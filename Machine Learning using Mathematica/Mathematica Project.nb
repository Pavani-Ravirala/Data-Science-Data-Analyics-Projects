(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2698153,      52526]
NotebookOptionsPosition[   2677015,      52187]
NotebookOutlinePosition[   2677492,      52205]
CellTagsIndexPosition[   2677449,      52202]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Mathematica Project - Machine Learning", "Title",
 CellChangeTimes->{{3.8599760008779755`*^9, 3.8599760257787895`*^9}, {
  3.859992678896825*^9, 
  3.8599926857953744`*^9}},ExpressionUUID->"6b051f5c-fe2a-4b73-84cc-\
fa6803a63ac7"],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.8599816130608196`*^9, 3.859981638006651*^9}, {
  3.86007349774474*^9, 3.8600735026596746`*^9}, {3.860153356672493*^9, 
  3.8601533580117884`*^9}},ExpressionUUID->"df7820e1-9cda-4961-943d-\
147b1d810051"],

Cell["\<\
In this project, we aim to use different functions present in Mathematica on \
a dataset that helps us train a system and identify any patterns in the data. \
We first pre-process the data with the objective of cleaning the data. \
Visualisation is performed on the cleaned data for better understanding of \
the data. Various state-of-the-art machine learning algorithms are applied to \
the data with the aim being classification of the data. The process is \
explained in detail in the coming section.\
\>", "Text",
 CellChangeTimes->{{3.859976027666387*^9, 3.8599760307599216`*^9}, {
  3.8599762430277214`*^9, 3.8599762660536838`*^9}, {3.860085934352743*^9, 
  3.860085946228079*^9}, {3.8600861318465676`*^9, 3.860086140028125*^9}, {
  3.860086804964734*^9, 3.86008680551517*^9}, {3.8600876272269955`*^9, 
  3.860087673843375*^9}, {3.8600877417443304`*^9, 3.86008783780288*^9}, {
  3.860088061415431*^9, 3.86008835665816*^9}, {3.8600884279836226`*^9, 
  3.8600884870618935`*^9}},ExpressionUUID->"a7dda368-5459-492e-8bb1-\
94e798fa0af2"],

Cell[CellGroupData[{

Cell["Palmer Penguin data:", "Subsection",
 CellChangeTimes->{{3.859976284361822*^9, 3.8599763068496943`*^9}, 
   3.860088329377055*^9},ExpressionUUID->"39f3cc48-90a9-4458-bc16-\
09e0e3ca9364"],

Cell[TextData[{
 "The Palmer penguins dataset consists of body measurements of three species \
of penguins found on three islands near Palmer Archipelago, Antarctica.  The \
dataset consists of 344 measurements or observations and 7 columns whose \
definitions are as follows:\n\n",
 StyleBox["species:  ",
  FontWeight->"Bold"],
 "Denotes penguin species (Ad\[EAcute]lie, Chinstrap and Gentoo).\n",
 StyleBox["Island:  ",
  FontWeight->"Bold"],
 "Denoting the island in which the observation was seen in Palmer \
Archipelago, Antarctica (Biscoe, Dream or Torgersen).\n",
 StyleBox["culmen_length_mm:",
  FontWeight->"Bold"],
 "  A numerical value that denotes the length of the upper ridge of a penguin\
\[CloseCurlyQuote]s bill (millimeters).\n",
 StyleBox["culmen_depth_mm:",
  FontWeight->"Bold"],
 " A numeric value denoting bill depth (millimeters).\n",
 StyleBox["flipper_length_mm:",
  FontWeight->"Bold"],
 " An integer value denoting flipper length (millimeters).\n",
 StyleBox["body_mass_g:",
  FontWeight->"Bold"],
 " An integer value denoting body mass (grams).\n",
 StyleBox["sex:",
  FontWeight->"Bold"],
 " Denotes the gender of the penguin(female, male)."
}], "Text",
 CellChangeTimes->{{3.859976368848861*^9, 3.859976491248397*^9}, {
  3.85997654595072*^9, 3.8599766848688803`*^9}, {3.8599799694161887`*^9, 
  3.859980030846673*^9}, {3.859980061491856*^9, 3.85998028162024*^9}, {
  3.859980373947945*^9, 3.8599803750975513`*^9}, {3.859980934178276*^9, 
  3.8599809359338465`*^9}, {3.8599817034371443`*^9, 3.8599817100781164`*^9}, {
  3.859981750416978*^9, 3.8599817705876107`*^9}, {3.8600885952746944`*^9, 
  3.860088604343998*^9}, {3.860088669511701*^9, 
  3.86008871478945*^9}},ExpressionUUID->"0132503d-1132-4092-ad1d-\
e618b04e951a"],

Cell[CellGroupData[{

Cell["Images of the three species of penguins :", "Subsubsection",
 CellChangeTimes->{{3.860088748684223*^9, 3.8600887854825554`*^9}, 
   3.8600889403012085`*^9},ExpressionUUID->"a0eb8d57-a983-418a-bbe3-\
357cfc38d91d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  NamespaceBox["LinguisticAssistant",
   DynamicModuleBox[{Typeset`query$$ = "Adelie", Typeset`boxes$$ = 
    TemplateBox[{"\"Adelie penguin\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Species\"", ",", "\"Species:PygoscelisAdeliae\""}], "]"}], 
      "\"Entity[\\\"Species\\\", \\\"Species:PygoscelisAdeliae\\\"]\"", 
      "\"species specification\""}, "Entity"], Typeset`allassumptions$$ = {}, 
    Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
    Typeset`querystate$$ = {
    "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
     0.6690596`7.27700980005036, "Messages" -> {}}}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
       Dynamic[Typeset`query$$], 
       Dynamic[Typeset`boxes$$], 
       Dynamic[Typeset`allassumptions$$], 
       Dynamic[Typeset`assumptions$$], 
       Dynamic[Typeset`open$$], 
       Dynamic[Typeset`querystate$$]], StandardForm],
     ImageSizeCache->{
      219.04521489376202`, {7.022607446881011, 15.022607446881011`}},
     TrackedSymbols:>{
      Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
       Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
    DynamicModuleValues:>{},
    UndoTrackedVariables:>{Typeset`open$$}],
   BaseStyle->{"Deploy"},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Image\>\"", ",", "\"\<Name\>\""}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  TemplateBox[{"\"gentoo penguin\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"Species\"", ",", "\"Species:PygoscelisPapua\""}], "]"}], 
    "\"Entity[\\\"Species\\\", \\\"Species:PygoscelisPapua\\\"]\"", 
    "\"species specification\""},
   "Entity"], "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Image\>\"", ",", "\"\<Name\>\""}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  NamespaceBox["LinguisticAssistant",
   DynamicModuleBox[{Typeset`query$$ = "Chinstrap penguin", Typeset`boxes$$ = 
    TemplateBox[{"\"chinstrap penguin\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"Species\"", ",", "\"Species:PygoscelisAntarctica\""}], 
        "]"}], "\"Entity[\\\"Species\\\", \
\\\"Species:PygoscelisAntarctica\\\"]\"", "\"species specification\""}, 
     "Entity"], Typeset`allassumptions$$ = {}, Typeset`assumptions$$ = {}, 
    Typeset`open$$ = {1, 2}, Typeset`querystate$$ = {
    "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
     0.6926342`7.292048925272772, "Messages" -> {}}}, 
    DynamicBox[ToBoxes[
      AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
       Dynamic[Typeset`query$$], 
       Dynamic[Typeset`boxes$$], 
       Dynamic[Typeset`allassumptions$$], 
       Dynamic[Typeset`assumptions$$], 
       Dynamic[Typeset`open$$], 
       Dynamic[Typeset`querystate$$]], StandardForm],
     ImageSizeCache->{
      237.04521489376202`, {7.022607446881011, 15.022607446881011`}},
     TrackedSymbols:>{
      Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
       Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
    DynamicModuleValues:>{},
    UndoTrackedVariables:>{Typeset`open$$}],
   BaseStyle->{"Deploy"},
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True], "[", 
  RowBox[{"{", 
   RowBox[{"\"\<Image\>\"", ",", "\"\<Name\>\""}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8600889642030115`*^9, 3.8600891056617126`*^9}, {
  3.8600891825396204`*^9, 3.8600893274361024`*^9}, {3.860089387580621*^9, 
  3.860089388673791*^9}, {3.8600894277179112`*^9, 3.860089429063985*^9}, {
  3.86008946602071*^9, 3.8600894673156366`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"041cfe90-4273-4f21-b987-0134afd016bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
526doczufzLsfpjafvdfMrl1Ckxsvh3bfH3BqPnVn9CZjrUbR5r1Q0C99lK5
9kK9cahaRyaK1QMydxSg8fUs2eyIZomvW4GRq14c0axwNMssxTxVMEnk6Ek8
PU00QxfPYjkTFJGRLl9CxZFEcwQLRLHRMplHAX1EgRHJtOIlNOhQcRTpBvKr
Ctk2TmDqV0G3vsVQmIUTO2PLt4ek44nZuaDJHeoTT2cXV3vUnbOrg4ubo4un
q6efl4OL8w07m6vWN60cEI+2zs4QjFdtHf7xp5vNWPbY0nPh1OPh0afQDlg+
7nI0PH0gmHsmWXhm2H07tfOqAcfOKq4oKi9Oz0qOTwzx8bcLCXcJCnMPivK/
4eQcmpyz8fDUeOt0dv+DYf/T1O7H2dufJ3feT+1+mAaDMO68hxM+tfUeTv70
NnL4txEF5ltvwb5h+xRGmE9tvZ7afPNfjpPmk8nNV3rz8djmd0bNRxdoN16i
6EyH6ESz/kK9dgCjav1AufJMvvK0vpdc00Wo6yG1Ehi9/Rw8S0BgCwHMAL+T
zqnH0kvbsIWNfcWtmJI2fGELvqid0TmgZShXBlSrqC+ieAEgSBbwYrC2SJIs
A8jWJkLEoSNZhORe6g93VOk2Q3mbJtvpl5mHtJujy/cFOmNxXYubjw+4g/oE
yktXNztnFzvo0MEdYO9iZ+ds6+Xv6enthth0d4BHwayV7RUIyb/ctClvwOiX
n8pmgVeyhXeS+VOo3ywp7nh272Tj8btBxXRsVlFxZWVxSV5kdEBImEdUrE8k
EB/oHuj5q719UnH11vNP8OTZfYiLN5bQeDOxeQJYDi9A1sdNJ7DVXhpPkGg1
v5kwH0+YD0HK5OYRjDCHFZij6+j84lEY9ZuHf8+4+eWY6QUwunHwJ3Trz9Vr
zzSrTxXLj3Ora9JLy5IKClOLS3Irqgrq6ssaW8tbOyraOosbW9LLquNyi2Ky
C6JzCyOy8gKTcyOy6qox/AHFytCoGaIP9JEki0isWdwhmqQrAOhDdjeLRwDE
oYA+qthEkWzR5bt06aZo6oFgfEegXcyrbnHzCwwOD3NytkXdQeaEtOnsZg85
087B2snd0Ql8udkjdYW7vaenvbPzTej+nFyug77/9csvWUW1G3fezu28G1v7
MLH5bcx8Pm7+CAGycOfd5uNTpWE5vaQqs7C4pq4yMyvJ3985JTU8JNwtMtYv
PDbY2cf9X61tsqpbwd3M7mvjrffga3oHchoYObbwGgVMjW0c/z2wbnH3enzj
UG96iTK+8eKC0bXnY+sHwOVFBPPLvwesoSOY0lpMwXgBHEKNrVx61NjbWdZU
l1tZmlNRkldZml9dXt7YUNPRVtvZDmNRQ0N2dRWQVlkeV1AQkV0YmlFZg0Xc
sbQbEH00GSIOqhQk9ETzqC8KbG3CZQBkQZkK9QxVvEiTLCGjeAX5Hb3EDOLo
UtOweks5e7udwA5PyohJSgoKgbhy9HC18fJy8vZxcYXq0tXO1d0JghEmAFSe
nt4Ofn5O3p42gIvTVXvHX60dr0MW9QyKXtg+WNx7P2k+ndv/BrvPhOnNwt6b
jQcnmuml/MrqtJysuobqpubqiAi/sDCvhMTgyGjfkAgvL38PJ2+Pf75h3Upm
bT39OL1zOLtnyWmbr0bXoI49Gts4hBEMTmy+shwej64foZsRAJMx8xtg1HQC
exM8YXT9JQBPntwC10e6tRcArMDroC91AXqIrl9+COboNXPxan8DXm31QLP8
DKhqbSxtqKlorq/taKlpb65saahta23o6qxqaa5pa61oaSlubCysr8+qqkwq
KorLLwvPqGgkCIbUa5xRKGNWB1Qr/YplimwRSheKbJkuW6HL1mjSVSTKhCuw
39Gky+AXyhuycI4kmIXqFIpVqmiVLtkY0uxyNSblzF51OyEoJi4mIT4g2MfV
1RZiKjjYOyTU19MLnFlD3Ll7ukCSRHoHD9j7rL287ECcq/O1QH8nNw8rOxcr
a0f7K7ZOAs28+eGnldufDJtvZrffrN37uP3oVKw1lNc3xSbFpWckNTVVNDSU
RUb6h4Z6JiSEJCSFRsWG+Ab5uPj6/JuNE5Yt2nr6fnrz+ZT55ZTpEJg2Q9I7
vnxKLWcYQuz1hTtEn+kE1Qf1BqTTH6H6/cxrVw+Ay3b0l17zMhdfhX7hxTWD
XjbfJz/Qm45KamvK6usauzrbsZiGzo7KpsaqevgJm2pa2us7u+vae8qb2vJr
G9JKK+LzCmPzShOLmroZcpF+SzS5PaxZHVAuDiiWEYOyRQhDpnJ1QLHGkK8C
TNl6P6iULvfLlqCUBQYVyxztBn9sWzC+J9TfVhkfyab3jJtPmnspgZHRUTGR
fv7udnZXvLwcAgI8IDcCXt7OYA0Mwgi9A2RLO/vrDk7Xvb0dPTzsHByuuHhY
Xbf99bqt9b9cvV7ZilvYfrZ86/XK7ber+6837hyxRZqsotLwmIjEpJiioozK
8uzu7sbC4oysrAQgPjHML9ALtksbV5df7VwGRNqdZ+/n917ObR/Nbb+a2ngx
s/UK0hq69UASgxM4tX1yGXQH1G9/Z2Ln7fjWCTr/U90IIQlc6EYPATSKLxIv
mpNhBZ3DRYJuuGi6RkBy8hFKTklZaW19Q0dXfXtnZV1jaVUdUFxRV9/S1dpD
bOjEQgmRW96QWVaXUlyVVFAJLRVUa/3CySHVPEsxR5dM0cUGhsLI0a4NqpdZ
yhUExSrSYijXOBoTwNWZRkY3hOOb0ultzfy90aWHoytPJjdeTqw9H128s/Pk
DYMrjohNiIgK9fRyAnHh4b5h4f6QMy1bnj3scRBxMCL63B29vF3R3zIEBvnY
2l2DFt7O2cbKweYXKxufsPgR+cTk8v785sPl7YeEgZGUnHzf4MCgUL+4uJCi
gpSqipyCwsyU1NjYuLCYuGD4V+DVHN2cXP18rZw9hmS6hb2n0+ZHhs2n06YD
+D4NW0fT28ewA87snhh2XiPsnSDzXaSYnP7O6dT2W5CFFDYWdzBO7p7CBEmn
l1qAPzUCqMS/SbGYuthVL9Yv9MHrwz+E/LvbJ5Yq6DghI7uwsqaqvrm8pqG8
qr6iuqmssqGorL6iprWpk1DXjs2raMwtbyyq7yioa88oq08qqM6obK7qIPUx
RUPKGY7WOKSaG9bOs5VGilBP5I5R+BMU3hSOPYpnj8KEIZ7vFxmZ0nmuelky
YVIZ93RLd8ZX7+uW7kmmzMLxlZn120MCWXxySnRsBNSWEFOwo/n6uwQEuQcG
e8AcOnRY9/XzgMISAhCKTAdXR1snOzjnTu7O1nbXoYaBlStWVvbuXlgac2Zl
U6mfJQ4MeQWFeAf6u/u4uXs5BwV5JcSGZGYmllbkZ2QnhUUGBAV7BwZ5uXs4
QSFk4+Rg7exGYo0wxRrCsBw/rMINqTEs9YDEKJneHV97Mr//Zm73tR5qvKVH
uuXHUHhARoUqcWrrGM4k0hTsvp0BoQjvoMWYu/VxZg9aibd/qlQvguiC/xRT
P/Rddnf5C+EFkWy5dqBdfKyefxibml5YWV1R21BR29jY0llV25SZU5yWWZBb
UFlV115R35lVXJNdWlfc0Jlf25ZSVJ1YUB6RnhedWVTe2kfjKYdUk0ypvl8y
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
AwDZEs+bgA0OBcuZwHB0BI6azFeTR1QUgYrK13QP8NopHOyQmMhRkPlKWCdw
ZTSBlikfpwt1vYMS0shov2SGKZ2niyHFzQ5qZkliZesAu7yPWIMf6BtW97DV
eM44C9QrpkUTxubuvqa29pN3p/cfP3p59OLOvdszc1PmrfXHB0/Mu5uGBaN8
bFQ2ptfNGpkCCU+pVU0Z2nHYgMiw2KSYhMRIcBcfH5qaGh0Q5A76AkN8wVRY
ZEBcYkRicgQ8ISo2LCDYBzIqtB4eXvZuHtagz8bpmmeAh2pKOyQb6e7HddAw
rZTudkpPFwPbSu7JbahKKist78LiuSqmamlQaWbIN2myHQqy5e3jxLexojsY
0V2M6D5yo5NwjyzZ61fts3T7w/p93uQub3JrZNI0PL42oF2Ba5UsX8bL1sFC
t9gE7lBrF4C4HuFat2C1V7zaI1oBYAIesbIffsWbllurkDvmGLIppsIwIJ9m
qWZh7JdODmmMMKcIx6CHwnFURB7UMONo6UIXj9MFcoZQMsAXE4eG23Ckqo7O
7LKqspbW0oaW3Oqa1IKSvJpa/AB7QCTG9g/W9+C7qexhxRR5SN7HEAh0BppI
1kDAFbXWR+dlhWdmxhdUQEefXFjXjKPTBVK+VseXK0uqqiD0Xhwfff5ytmFe
X15duvfgLnhc21zni0WjU1MSrQaijy0Sy8bGeynkpOyMiLgopOmOCwNBsOWB
O6gkIUlGRAdBvx8a4Z+QHJGSFg3uQsID/AK9oP6xs7vi6mrt5+fi7Hzd2f2m
o/tNLLWzrLGwi9JGGsL284kMIQHADnSWtxRHpsWEJcXlVTe2k1hErq5fMj8g
3yALV8niTZr8tuUvkNwhyB5A2iSJzNzRWziuoaqHU9RMSa/oSC1vzWvoaafx
2Op5kWGXoVwhy9ZJMnP78BIEHaoJggvGbuEygPqCSZdgCUAN9oiWUInITY5C
k+XP4Gz0DQqIXBnQL9YOqwxcrQFGmlCNY0uhnKvoIDXhBxniMZ7OyJJPMsUa
llBEYvb3UfDEASqVzWjsas0syq1tayxvqE7KTguMCo1KjqtuqYeHSExaQ2db
Sx+WNsRr6sa3Y0kskQTTT+kgdRc1FIenRHlGBEIH7hkS4R4UFpuR1djbyeCx
OUJ+Q1tLQUnx/ScPPp59ePDo/u27t96cnjx9/mR6Zmp8Ymx8apIxxFKM64bF
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
ItAnXuoWIBkS9IEyANWHJlUQR5BvUJQmsmKNKFvDS5aSkmMhw6SmJRQWZdU3
VDW31DQ0VpaUQs1YUlVdXFqWB2NxCfJRAVisqMqvaShqbq9oaCltbC3LL06B
EPMPdff0d/QJcvMN9YhODiuqKWzsrIMxLgPSFiT++NL6sqyCnIS0pPC48MjE
MIGS/eDFzvyGvrGjIi4lKiohLKsghTFMECjo9e0FffhmIqWnrrEsMyc5KTl6
XK/667+fv//w6tnzhxB3Wp2CQsUPcZnaMWVsQriV7RUPDztw5+XtDO68/dyD
QvwTEmNCQv2jo4OjwgMCfF2gkvT2dbJzvNbcVruwMaeYkHLkQxzp8MScnsEe
8PL3/vXGFd9g/7yKAhd/d7dgT8A9xMsrzMc7zM81wMMt0Nsl0Ms/KiwwBmoq
H+8Q/5i0uOTclOikKN8QJMFCiRuXlBgZmxASHgeUVlZFxcVCGeTu4Qz7qZer
o6uDTYC3h4+Hu4eHx3Vru19tHP/pio1beKLUAN3iIl0DoTfTyZ2E5Glp4U0E
6RpOvAIpEYAMidy5D6lStAwQpKsEyRJRukiSrcDY2FQFmkANCIJ5b19bd29T
eWUedLL5hWlFJZlNLZWl5TmFxRmwWFKWWVGT14Ntam6vbGqrgAyZW5yenBkb
nxoZHhsYEuOfU5IJJUdda216XlpEUmRwbEhDez2JQezAdGQWZMalxiVkxPaR
27XT0hHpYGZhSkxiVEpmUnVjuXxUIBsdrm7OK6nK6ehuaOusa2ypDAzy6uhs
/PL1/dvTw6Pj54dHz9QamVwh0o2rNKOynPy06zd/snzi6JqzqxU8GdxBGRkZ
FRIY5BMREQD6AgPd3d1t7RyuQtCJFUKJRkjj0sgcUj+vn8KmqvVqJoflFeDn
6ufd2NPm4Oti52MPOPg5ugW5+YT7ewR7+0QG2Pu7eob5h6fExmUm5pTn13XU
N/U0ZhWlx6ZGJabFZxdkZWZnxMbHRUbFhUfEZOXlQrfi4+vh7eUKhZC3mxPo
c7G39nBxhPyM3Nrk5PLTTdsbrt69jGHcsKSOOFTU2Z/XQqsmCrH8WbpyDTZB
9MPJlg+7LlHlK2TpAo431c0e7WCqmijCVrqoa1DeO6Ti8Vm1dWVZ2ck5ualV
NYVkau/AILEX05KRFQ8tUnllTndvQ2l5FkpiclhWblJTaxWe1EWm9dEYOAK5
t7ahPD0rEZrf+NRoqDM7+lpKqgpga4OYSsqIgzQFFWlzZ31yZnxEXAh0yoXl
SCEKcj38PbwCvQLCA6KToukcGn4AU1Kfn12YXFlf2NUHhXgTlIh+Aa6GmbEP
H18fHT159uwezMfGlbpR+eycvr2jwcrmL2ANumw3D1uYwN4HtQpsfL5+bsEh
PtARePo4wzZ33fbXmJRIxah8WMIhD1Fxg/g+eg+BiR3gMbgy3pBISB0a7iIS
rjpZuwS5uoe6+UR4eQR5unp7+oYFu4d4Owd7RKZHlTaXteHbemm9Hfj28vqi
ooqc/NLM2ubK9t7mlq4GKMPgIoyKj4BMDls85AF7hxueno521legE0HKWjeH
K9f+Yu1gc8POxsrBAQyGx8RHJqW7BIb/xd7jqnOAV1RWWSt9QDzXLzJiBrWd
dCk0kl10QRNhoLILn1vTmFRYFpyU6hcTG5KUnFFWXtzYJJGONDVX5+alQW4k
UXqGuXTQ19FVD4GWk5fc3FrRi2mqbywpq8jOyUtMTo2A7am7r7WfSSLTsH24
jrbOhrLKAtj6IcVl56WWVuTXN1XCcyqqizD4TngmkdIHTyaQu5vbqkur8yFO
4UcLDPOPio/MLc6PTY73DfF19nIOiApMK0jNKE5NyIhOSIsor86tbSzOykmE
raq+oeLxkzunp4dPntwBdzOz42qNZHJKy2SR7B2v2dj96uRy09XdBpWI/Lbd
1xViMCjUB/DwdrJ3tf7V+mdwNyLn0YbpGDq+m9rXQ+3CDWDILBKTz5KNjc6s
rg/LZI6+nq7BbpnlaWWNxaHxYVBneAUEeIX7ekZ5pZWk9tK6qRxyJ7GloqE4
pyQVaqqaprKWrrpeQnsXtqWyvjguJaK+tRIOoZT19XeBb8nV1dbB4Yad3TUH
R+sr138OCg+8aW/9l+tXb9hYA3HxiQkpqe4B/k4+vu4BoV4hsREpBbmV7alF
TZHpJQFxmVGZBYHxSe6hoW5Bfh6hPmFJEVFpMbDDegR5BUQFRaXE9GHaIWeW
VeRCbsTg2mDMzk0Ca9W1RY3NFQRSBxbfCu6qavIh7nLzk0rK8zp7mqGWgAns
OOFRgRBxEHeVNcVQMYKy8qpCMDg8MjA+qYYRmj6AMkCAHhB+QNja/IM8Ifry
S3JLKouheEvPS4diAK7z+My42IyolJz41OzYqlp4nfy8glToYNIzEkzmpTdv
XpycHGyYFgHQN78wNTGlCg33AXegDE4UjAB4hI0vKjo4JNQX3Hn5ujh52F21
/SUxM47NZ5EGyTQOA8ckQvhg+ntx/VgKm8aVSTXTMxNLSykFOTGZ8S345i5S
e3xmAhSZ3oH+QXEhudU5naR2HLO3m9zW0FlRWptXVJlZ3ww7fnlVXQGkdzBY
VJHnH+rNEbImDRonVyvLzRQ2Vla/gLtfr/x0w+pqTWPtiFiYmJ56xeqGraOD
lZ1tcGhIYlpSWGxYSHx4RHJsUFyMV0SEV0Ske1ikZ2SkPyThrJTQ1OjgZEjE
0TmVGfVdlW24xpLqYigb4IKHRgZSZXZOSnFpVmV1AZQikCojovxj40Nq60ta
22vI1O62jmqIuNr6os7uuoKiVNBUWJKdV5gREx/m4+8GF3ZwmG9SagyohIgr
LstNTouFJwjEw7AlQRff1FEH3Tpk0aqGsoy8pKAIH2c326jYkNqGykHOQEdv
W0VtWVF5QXJWUnJ2AjTF0M4mZ0ZDkNY2lMYlhMI3U1aev7O7/vDh/ocPr+7d
3wWPK6tzxvlJcJeZnWBrf8XR+Qbg4HQdxMEh5KuAQE8U3wB3+A6tHK6l5iYN
jjAh7ihDdCKbgunHdJG7MDQsbWiALRJzpHLd3Fwbvq+yraYJ21jdVpFemAYn
FuqQ/Mo8CofAVbIx9M7GrsrGrvK23upufENHT3VTWzns+129TSAOMklyRuLz
l48/fn5TUpb9j//032xsr1679tO//K9/tLa9AeJ0k/oF00ZrX+8v1lbWjo42
DvaOzk7QUbZjWuo6q6taKsuaKnIqC+LzU1NLcss76srba2p7G6p7qup6q3po
rTQedlBEYvCJGEpPQXlBElT+2Yg1qEmgGgGgGoEtr6AoHa52UAmZs6evsagk
HVJlU0s5JM/M7DjY9MNjg2EjyyvJKq7Mh1YatjlIgzBpaKuprC+FR9NykmAX
gJ0OlKVlp0QlRkYnhqdkJfx/TL11dFt3uv77x73r3h/MnN+ZUsiJmZmZQbYM
kkGyLFuywGJmZmZZlsyMiWOHsWmTNOWknKRt2pTTZNq0neLQOXPmvrLOmnW7
vmuvbcVN7P3Zz/M+j7S1BYizclOKy3LhBDh6fPXjT+863CaZUgBChsEBoKGq
l9cWltXk9fS2DY309vV3QtHmC1jXX7jy7ju37n/8/p27b7/40tVLl08Du9W1
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
/GJwfnHOaHOZnCH3xDxfZsjIL01IS8vOz4ORF3d4HyjIbBMrNBS3X7K5HZie
tw0TO+sbi0FB4Hgenxk0lV+U2NRa0txaATWczaOIZWyoJ1QaDqQH/zssdF8r
sKutLwHFjRD7IbqAT0KqgXAIOmJzqLHX8oCLVMbjcMdAXyA3JosM1No7GkFx
ADG2D/KE/3eU0svmjbS0VOTnp9ZUllRXFILuQiH7p5/fvvrSBe+US6SXMWQy
vsFuDq/Ob58nMijd/QgoCNBfbr3x6tdff/X111/fv//pvQ8++vje/Q+i/929
fedt0N2bb73y0svPX7py6srVs+cuHDeY5HV1JaWl2UAtNu+KirJAg5mZiSD5
5JS4mtpyl9di8+kNbq3BDuCMWrBKixEGn9SohRkvNjhUtgnfzIbK6sZSR0hc
HIHRgyG0dffV9fQ1EsjoMeYQmYal0AepjCHIBnCqD2AQ8wuBt2499/YbV77+
7O2fHn/87aM7Vy6vH9vw3ri6cunsxMkd39KC9eixmYXFGbPdZXGHApPL3omF
pg4UNPTC8tLi0qIj8Qdq64sG8QgOb3B23rq47KTS0E3NpYWF6cPD/asr80IR
C8JYU0sZsqtuAIckkDAQz0Ypg6C+kdGBQTwKduqbyqOroQKGF9ggGBf4JJ4w
ADu44b5RyhB0ZyACAgQ6DDaZQBqEkUceI0AUgW+DCQgVG3ZQfdGLCvZeVoDe
QeEJyND6y8vzK8qLGhuqm5urxRLOe3dvfvb1vfUTa5D6pGbzmERpn1rxzK40
I5t7Bzq60a1EMv6VV288ePDlgwcPP/74kw/fvwfrvffeu3PnvbffufX2O69B
v7vy/JkLl09AVgHPnJ4NdHY21teXIhD1ID1QN4CrqysDlDDyjsTvg86u0kq8
IavFo48WPQsEFSVUPMgqUqNebnXw1OYYu+DcCpXPpvKJw2OoflxLS0dpfVM+
DDhYzS1FnV1VGGwbidyLG+ogEVEv3zj92o0zz1/auH558+Vrx65eWj2zEz6z
G7x2ae74hu30jv/4lv/kifnllTmXz2+BuOKPBKeWenFEaOil1dV0JhVO+I7O
2uhfO1gvleKFQhyyo6S6Mgvd0xQKOLVaKfwuICXIJAoVBwSI6KiJXn1akAyt
AY1BdaKRNY3VReWFOYXZ7Z0t6L0LHjp6ELDtx/Vihwcw+H54EApdP7azC9UC
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
7TSNjTs5JjneIMXpxFhYdh3Ja6EbFTi/k2lSExTCfqeJdmLLXYuolxuVAE6o
Fg9Rh7sHUUNjxGHwP5mAJmQzRXy2REjjcwh06giNAqHU6XYIRNyunk6JQj4e
mbR5PGKlcpRGHeMxJTop+CRXyoJF41GakU0VdSV1jWWV1XlllQUV1UVVtWXR
SddaFxf/DOSKC5eOnz2/NbcQcHt0NbX5CET1wACyd4/d2XMngd3f/vaX7777
9rfffvntzz99+/jhL7/+8ONP3zz+/ssvvnr/hRcvvPDi+RdfOW93KdH9TYND
nVw+qR1Z24qIvnMEEgu4LlTUltZ6YAdbgJiZldLW0aS36FxBl3vc5QzarG6j
TCMyQU+36GB26+w2vlItt7jUznGpPaTxz0c2T5HYnMy8jOiFHN31Y4yBYEh3
dCtkswo6kaVgdKd3pkFWYbfozLrr3utHP3ht691Xjt6+ufvOy8deurywu+44
tzu+uxWITOglUorNoTLbtCq9QqGVW10WX8DLF3JgUji9+lFy/9PP/N8Fefum
w5qjq06TmmiQ4bXiQaeeCuDkPLSE3cmntbCozUrRgIjdw6V1CFndGfkZkPMp
3DGGiIUlD+FpBEBGYFIGKSNkLp0jFzLEXBjZ3dj+7v5etpB76szJ8xfPLCzN
T87OALvIzKxvYlwgk5AZVDKTxBax+HIOGDus2qbqooo8KPtVNflgYmBZNfUV
9U3VBcU5CckHpQru5SsnIGysrIYYNCxUUVR3A5SX+rrKUSL+Tz98++svf/rr
X377e/SVuz/94z//Ctsf//Ttr79+9/33X9279+aVKyevPHfC7lABOFAEZQwL
Uwk8E9h19TRDxehANu29r6QmNvIKi3JSUuMzslNkaimwg6lndZk9fofVYdQZ
VSq9UqFTSXVqqd4gNlpEBqfENq4NLDpmNgKzi5lFhSWVxUaL0hc02Bzi+Tm7
xcTGYethbi/NWNbnbXMB2fkt981nZz55a/f2azt33jz9wqW51RktDKzTW975
iGbCr1SraCo1WyyD1MpWaWUmq85qM1rsBrFC6PRbrQ5tUtq+rOwDp07Obm34
CUMNhMFaMaeXR+8aIzTKBX0WHUEhQrHHWqgj9bSRegG9Qy0aSEhPwIxgIFUy
xWyagEETMsEw0cOY2vYm2AI4ECBklQECvmegT6qSXX/huddvvryze3R6dsrt
9XgCfpvLCUyhRMh1Mph0UB9GacMdqNai8gJwG7Cvsors0r37YYJlgfSi6kM2
Ts74r1w7dez4wnjIPDyEJAx3oTrra6ryykoLjAbNf/7HX6Ke+dsvsAPU/vbX
X/78G0y9rx4//uIf//jl0aOPjx9fUqm5Xd31GBwC1dcI7EaI6L4BBLBDdNQB
Owgq0O+AWmtbQ3dPe25eBnhmRXUJnPPBqeDM4lQg7AtF/G6f3WzTg5ECu73X
0E1Ss01sdAnNfplzSh9c9M2uyo1mtpDvC3nkSjad1ivkD4r5GKUYr5aOrMyY
nz87e+VU+PmTobuvbDz84MKjT1/48uNrl06GVqY1M37x6aOe1TkDqCngU9rs
cpWGD8FVa5DrTWqNVg4QdVade9w9PuOva6nYf/B3o6QePm9oBN88gKpsb8mu
r0wcxlSHA+JzJ8dPHHOtLWkNqiHQIJvcxKW2HDiyvx/fD3WAI+NBYuEpBBgS
rgWFqGiuRvQhiUwSBMhR+iieNAK13eqyffLph+++98aJk8dW1hYdLjudSYPM
PziCpXPGhHIuUCuvyq+uK66pL6ltgGFXDKER2EHwi+KrKi6rLGpoqwG+y2vT
V2+c3Tmx3I9tpY4NEIg9VRXZtdX5NdVlN19/+Zeff/j73377r3/8Ddj9+bef
fvj+j7B++eXx3//+44MHH9nt6v5+RF8//I9YCPC4YSSNMURn4nH47k4Qb3st
or2hvqECRl5DY3VnVxvkFuCYnpEANROQbe5uzC3PBiMB77jHHXBZnGaNUR1j
pzAZgR3oTmj0SW0RlXvWNrE8tbJNYrKxwxgYqQLukFnHCPulm0u2xbBmfdb0
7Inw9TNTN59bAnZv31j97P3Ln997/uKJ8TNbrvUZzfyEPODkTvgkM2G9x62E
0abVS8w2tcGsUqnFcpUY/l2L1zG5EMEM9/7+D/9XdV0u4BslIpEdpThso1Iy
ujhjefbC3LUri1cuTT13KXJq2762oJoMcn0O6r64Z7p6O8Hw+TI+SA+cc5CC
R+H72vs7YUF0GaYRcKO4IdJQd1+Xx+d89OgzOP+vXbvo9TnIFAKyC9Hc2gBz
BCJcF6qlqrYoMyexobkC8JWU5+292l7Z1FJeVp4ffZtVRWFlTWkLsgESwuLK
5MmzG9Oz3tb2cvxwJ7BrqCtsb6sKjXuB19/++ivY5m+//viP//zLTz8+/uc/
//pf//XnL764Nz3tHxzsrq8vHhrqHhzsHCX1UWmDRDIaCgKTPTI0HL0gCiZd
7KoAIAiTDmxzb/DVwg+Qk58GVrlz9vjq1src8rwv5PdPBJw+l8akU5l1KqtR
YTFJTGahwS4weKXWsMo1Yw6tTqzssMSKDlSnwSCZnjQtTRmn/ZIpr9CpI8P2
5IodDHN7QRexM66fnXj85cuff/Ds5RPBUxuOpbBcL8GAuYW84nGv3OmQ6A0i
vVFisWsAn1YnU+vkWpvREfRMLkwyBGP//uT/QA+0BifMBiN/PKjf2gy9fOPk
229eePHa5rlTEzvH3Jtr5uV5xcq8HPCtLiggNNa31AE7mVZG5lCIzFEim0QV
0Ais0QESFr5kiqGbj9HY1EF8fyDk+fTTO2+9cd3vMeNw6LbWhr2zug6sCYYL
squxsDgNVNbRWVdRlVtanlNQkFZRkYPFIuHMLyjMBHZ1jVWtyGaJSjC9GFo7
NidTsZFddSz2CJ0x1ItqZowN3//4fXDLx98+/Muff/7TD998/92jv//t1/v3
7wQCjp6elurqwu7uZog0sNDoNiKxD7RAogyQqVgSBTOAhRiPgkkHhtmDQnR1
t4L6kJ3NkF1J5CHo5gXFGf1DqKn5yNrR1Y3tzfGpCCyHzyM3qNUWvdpmUtks
UrNFZATb9MjMIbltWutbsk9u+KaWRQrZ7Kx/bdHtszDFYwgWvlpGR3h1pKVx
6YVjrs0ZlZrXfXrd+uHbZ2DYbcxqp7zcpZAY0r5OOjjhFXqdArcL/m6JVi/S
GWV6k1wL9cQgUxmib/0G21QaZQfi/sDkEj+4d+u92y/evf3S+3df/PDujTdu
nr94dnbnqGdj1TIdkYaDvIkAOzLOnwzxDhx6pqSsUKwQAT4Gn05gEIcZBBKX
wpSyASJUNpFSyJdwuSIgOuJ0GzY2ZsRCamN9MRJRh8F0I5FNRcW5YIkw12rq
oA6UH92e3zw6V16Zk5ubDOxychIEAiq6D5FfkFFcll9eU9rYVi+QcYKT7pml
cSKlvxfTJpbSQUHoniaf27Q32n4CzwRwv/z8PWx3dzdGRgYQiFpY/f0dfX3t
OFxPV1cTEtlAoeCGCVHRUWnRHWA3SsZGn5ZHNgE7qOfQREBxoDsUuj2vILW+
sWyMQYRht7yxtLS2OjEzE1lcsHg9Iq1SqFFIDBqpJfqihsQc/awBhTUM7HS+
dbljxhFe0FutwaD16Ko3YGVqeV1KJsIoRLlUuGkXe21SDrrbmFYuR2Q7a9b1
Oe38uCjsYh2b1y4EhSEHa9zN97mEPq8CRp5GJ1Bq+WqdWKOXqI1yg91gdFl9
Ya/FZTic8DSUkfc/vPnx/bc+uPvKe+9ee/et519+8cSJ7fGFGe10WDERFI17
+bAiQfFMWA66S89MAT9kcOlUNgWkB+xGOWSGhDHCHCGxR8ei19tToxcUjfRD
C+tFNSFaSjsQVcQRNNhXU1NFXl5aSUnW3tWtSXwB+YMPb+7sLmVmHs7LTsrP
Sa6uzodfeWgYDe04vyg7rzgH8qdQyfNPulQmcS+unS+mYgaRYHcgpRMnNv/5
X3+DcPLzT9+BW966+fLY2EhNTUn33o1TmpsrQWuguxhHkGFHR/3gUBeAG6MP
g+L6MUgiCTOIQ8fwDWC6O7taABykl8rqguraorqG0um54Olzx4/ubi2vr80u
L8+vb1r9AbnZyFFIeFqFyKgTG6MjT2nzaRwRtWPWHN5We5eNvkmz0+l267fX
/fN+0ZSDthLgeNVYtwK7Mi4cN1MdavzOimljVn1y03HmmHtlUg5Aj82qVsLS
hZB0MiCe8Mkgrtgd0efeDBYZSE+lFSl0ErFKrDFrPEEXJPO8wrTS8qznr556
+53rd9578earF166euLKhdWj657IuNRtY1r0ZKuRpleTdSoSbBOToh/QmZKe
0NBc04/rZXBpTAEDWjZXzgFwlL3FFTMFYtbAYBc0tfKylJbGvMGBZhIR1dPV
UFdXlJ+fmp+fDG6ZkrZ/Imz/8N6t6RlPXl5SUX5aatIB3FDn7ollEilaQvMK
MzLz0oGdTCf2hh00HglP6iPTsAxWdFQRCP23b7/+17/8DCb50b07Xo8djW5H
IOoBHAqFAGqgtfb2utbW6paWKhAdfNnWVoPqbRshwkmFBWl3o1piz8z8/y/J
aO9ohO9pR9aDpVfVFEamA0d3N3dOH9/c2V7Y3JhcXtE6nUqrVaDXiE16ACeM
ziSrzOxW2SZU9imxdTZ6Q2zfLERDqZRtN3DtmtGInbY2IV5wszwa/LSTsTwu
9BoIi+MikNvpTfv5bfe0h7OzZNiaVYPu5kKSCOAeVwT9Cqdb5vSo3V4DNA4I
nCIFT6aVqk0q6JsOn6WptWr/wd9vbE6/f+flW69dfu3lcy9ePX7p7NLWmnsi
IDVoSEJuP4nYgWgpLClMKMyLvsMoPn4fbGE1NFRQx0YEYo7dY4WZzpNyR8aG
9tjRhRImHJym5tKerlKlnDAxrobJC/iyc46UlGTk5icWFCdl5hxa3Qi/d/cl
g1GcmnooNyu5qjxvdtr1+s1LGGxbUsozMG4KynKa2uugEauN0mEyZgCHxBPR
fCG1t7fV7zX++uu3f//7zxcvnYLDDnkj9uI7LNgHNcEWpiqkx8amKlgwzuDb
wAyH8H3gkKC12PdE77LSWgsyBKYgQwaLSBgdAKaQeKtqS6BPnbxwcuP41vzG
6tapk97JiMHjUdlscqtVbrXJrA6pxSkxuyQmt9Tsk1hCPPOExrdiHV+V6R0s
FoNOwdIIbWJ6l99IdyqJOn6vTY6ZsFGC5tGAcXTOywMLhe3qhHTSxZrz81cm
lWChASfH62CPB6WhkNrrVzmcSigLAiETZodAJZQYZGqrxhlwILtb9u37P9OT
7jdff/71V86/dG3nxavbJ45NrK24IxNao57BoPfV1ecfOPi7w4f/UF2Tl5S0
Pzn5QGZa/OGDT6YkHqwqL+hFd2p1CrvLDEcYMj+eNECh4clUHJ0+4nGpL11Y
evvWqddeObmxGmhvK0f3NDa3lBWVpmRk76+qzdjannrl9Qs0Oi4x8emC3LRu
ZOPzz23fuX2NQu1NSHoqOzehsCSztbNRY1JI1Xwmn0JlDJFpgwRCb3d3I0Qg
yP9+vx0oQLqIUQMFQUaF0AiMYlwgfsQW5B+AC7EEvg04wk4sWwJW+KPe/nbg
BfhgAUf4ErpDaUU+RLKtU8cXt9ajl5of3w7OzrjDEb3brbY5wNHUDp/GHVA7
x2V2v9QWkNpDQtuk3DNvn1g3OEJiqcRhU014VT4L26mla7gYPqnVpsTN+ZgR
B8Us6dPxUaDEoHF0xs0JOxhzvqjoFsIKv4sDE2oiJPW6RS6nRKvjyWQsvoAh
kQtkBqnEIJEbFQ6/vXeg+4kn/pfTpn31xYsvXzt57dnNS2cXjq37F+cdUxGj
1SJo7yg/cOD3T+/7HZgYjTGSlhyXmnQoM+VIYtwzRw48mXhkH8wvsBqRlANn
BU/CItHx/dhOqL0Wi+KFa2feffvZr764ef357T4U2GXCxtqk067IzDqYmv5E
b3/t5tGJk6fnu3vqUtP2Z2UldHbWX7u688ati9BZUtMP5OSBPDN6BpB8KRu0
fOrCtkBCw43ApGt3OrWvvPgsk0nsh27S0QhDKnaxGSioprZ0eGQAggcoDvar
qothwZew9p5tLgMxRm82tbcD24rKQuAIoGHYEUcHR0m4mDzhr4Wga7QZjp/e
Xd/eXN89Ore+ElqYAelFbdMC0rMBO513XOcJK+0BmcUvsQQ5poDAGrGF1iye
SQaL6XZqj60GZgLyKY9s1q8MmOhTbvbCOGc5zA/bxpwqvF2BnbBSV0KS5ZBs
NawAdnMhGeSKqZA0NC7x+0Qej0SlZsrkTJGEKZZxhWqRSCeR6mX+CS+DTX7m
md/JJIznLm9fe3YL3PLU8cjxzeA8tMxxrV7Hysk9vH//757Z/3soXxqdGLQG
vNISD8FKTTgIBOPjni4oyIBfFoPrZvMoo1RMY3MZGt2ysTb17ts3YIC+fON0
wKtJiv/3tqayq8+eWJr3YQaa5DJSOKw9eWLG5ZGVladmZIIJP11bV3Dy1OL1
a8fhhAF2GVmHi0qzSPQRCD8La1O37705REARKQMYTIdKxRPyxiCugPuB1kB3
cP4Akdy8NDjmgAyiLAgQVmwHMMEqryiIvU0S9AhyA5TwRyWluYAvds0DuCiZ
ggf0IMyo5daVK7RyYAeeCfgm52dDc9Ou0LjGZlWYzAqzVW1zRaXnDEafjrb4
oeWJbWGpYxLYucbnSRQyn0uCkSdgoBkj7SbZqFdPXZ9SbC8qYc24WVYZ1qcn
zHq4KyHZyoR8c063NqtZmFTNT6lAd+EJ2dSk2u0WK1UMsYQmV/KEEjZfKQBw
KqMS2CmUwri4J+hjg6d252++fOaF5zbPn57ePRacnjRYTXwyqWf/gf/55JP/
75GEp0mUQYGInpxwABaASz6yPxnAHXwKzDM5+VDsfunNbdWtHdUQUdC9zVMR
59ba1NJCUKVgV5ZmpiU9M4JFXr20fWxtYmHaduXC8gvXNk/sRJhMdHbu/qzs
Awfj/q24NH11bXxjK1RckpSY/HRC0tPQ2aPveKITLj578rVb1wnkfjp7hMEY
hh4ByR+D6YwpDqyvtCwP5ANagx2o1cAFFkABUrGXxeHLvUsaojdUgY4JHbyi
Eh6EgViZl59ZWlZQU1vehgAJdyE7W9s7muHxkvICCoO8dnR9ZXN1dnk+NB0e
n41YfW690wHswDZVVqfM7ISQqXWNq+wBnt4psYdF1gm9Z35iblMsl42O9lOJ
UBlziP31I73VWGSBXtI/HWCGPWMQV+yqIZd2xG8iuzREt4E8G5CszmghZPqc
7JBPEAnLF+aNJhNDIiMJhCQoelIFnyvhygwKiJpOn91s0RQVpYmF5MsX1l66
dvzlF44+d2lpe9M3M2UEdt1dVc/s+59PPPH/QO4ymhUwxcAzo7a5p7jEg08B
vqh5HnoqJeVgeWVeVk58Tl4CyAfVXSfijwp5xC5kXVVFTkrC03lZR2rKsiaD
xrM7s2d3Zk4fj1w4M7M8bxnoq87J3peZc+BIwhOtHVXnL6z7A7q8/HiYd+mZ
cWC/eMKAyaq5d//dm2/egCpKZw4TRvv6+xHQ3cjkQVAKyA0mV8whYR9WLJ/8
a9LFnu8C3e35ZylQq2+AGVdXW1dRXVPW0hq9Rwewa2quhQVfAjXYKS7JS8tI
5vCYm8e3oJjPLs2FZyL+cNBot2pt5ugLQOCZVrvcZFNaQH0Bpc0vMriFlnFY
KvtkaG5dazSAveMxTd2IwqHeGspgI3mwzqoang/xbVqMQYw2iPs0QrRJjtWJ
B/QSjEk57DHTrDqSQTls0ZOCPv7MtBrYaXRMjZZrc6g1ehmdF30TkM6shYBh
dxigUnFZ+JVFz+aK54Xn129cXYNyB1kl4FUh2yv37f9fdXUlXD4Vhh3E5ozk
w1G3PLIfVvqRA+kJB1MO7zvw1L/19iJkMs7gYCcK3TRGGzTqBdMRu8epwvQj
SorSqstzWhtLa8rSBExsxKdWCoenAsrNZedUSNvfW5OZ8UxqBtTGOOhuN29d
VijpRxL/HdhVVOVC5AN2W9srj7797NTZozh8NxYXvfsHmAB0gYY9KDGThEkH
C8QVcz9gBzKEbWw/dtOwPeeEMVcG0kO0NwG+KMTWhlZEU3VtRUdnG6ymlvra
+qryypLS8qL6xhqv33Xy9M7uye2VzeXphSn3uNtoNytNepleozAZNTaHxu4G
dnKTQ250Sc0emSssd0d0nmn/1LLOZIQ8TCV1EwYb0e2l3DGUnD/otzHX5uQG
RZ9O3GdR4hV8lE6K0ctwAE4p6NNJB9USrEY6qJFj3Q6m18NzODg2h8jjVdud
aoNZwZfwpGq5yW402/RGkwraFhJRRh9D2c2s07uhi2end44GYN7ZLcJeVENW
9uHRUQyMbxgNYEegOFiALCPxUMqhZ5IOPAXsEg48WZCbIhLRxGK6REoHcBtr
4SuXtsLj5raWitzcxK72GuJwV3NNFgHbrJWOUodbYAQEXJLJgJZKQhUVJAK4
jKx4s1159/1XNFp2flFib3+bUi1QqPhs3tizz5+7/uIlFjf6Bnb8SDTMU8aG
MJjulj3FgWHGrhSCWQYSA4IxWLHrTwAlrJj0wDxLSvNBbl3diNa2BhAX2COA
a2tvBoLILkRnd3tDU21NXWVOXmZLW6NIwl9amT++ezR6M9Wja3PLs95xj9Pn
0FuNe9dqanUOp9nr1zo8Yp1ForPD1OMb3XyzT+UIB6ZX/KFxLpdiM8Nfg2eS
URIOTsLBBpzc87suhwFvVgy5jGStDCcX9AE1m3bUqMBbNUR4RCkasOqJXgfD
pB912NlWK9cf1BgtYijpSp1CqVPZnRarw2iz6crKsjray4aHWkgjzX63IDIu
n57UOe0ipWyMwxqBQD483AtHJnYHkozUI+lJcWnxBwBZatw+wJd88Gkwz7j9
/we80WSQ6DR8Ppfg82ilIlJtVXZWxiHodDWVGfU1mU3VGeAeCgHOYWDy6b1C
FvbM8TmZmJqeeiD6qUx5GTqj4vadl47vzIYi1uXVyOS0D8ax3qS8/uKzdBax
D9s+Quyl0nAADkygGWTVEB1wMMWAXfT2iVVFsAOYYm9zgJ3YVSiwD4/HMgl4
I8yy2KurnV3QBBsRHS1VNeWw2pGtFVWlgLK4oqSyrsrmto9PBFehHBxbP7az
sbQ6t7A84wt5zA6jQq8Qa+SgPrPXY3R7oq+eGx3ADnQH7EB6oDurbzI0GRka
RgsFBLuJTxtFRfFxhxan9SePOYJuul1H8lkZbgvDoCaoxFghq9uuJYecPK0E
qxJj3NYxu4nsc3MCfqHPJ7E7xQazwGSTy9QStUFlsRltTpNGIwHdjeA7uWB4
mDqZBD8ekAd8cptZYDELIWkIhWMVFdFX02IL2EFHAMMEdgDuX+wOPfW7zNQ4
HBY5SkAPYtq7kdWF2YeLCxIL8uI7EBUjQ+1cNsakpWvlJJ+NPx828Gh9fMag
ScPrQdbnZCbl5KYnp8SrddJXX7/y1tvXtncW5xfHgyGHSMy2OvR8ER1CLIRM
qB5kKjbav/qQLc11tTXRuRZLj8AFLBGoASbwhxjK2PWWsRvgxO7/BvkEFBeb
aLADEMEnQXRglbFtSVlhdkGOxqiFfDI1P726tri+sQTUYAUnvKGIX2fWGB0G
lVGltRkN7ugllOCcCqNNYXbKLR6pPSi2j8ut447xWX841IFsgrlDGe0hD3cz
yP1Ok8CkoR5dNa/MqcyqEa+N5XNyTNpRjRS0hjHKh30WptNAUfB7pZwuu5G0
PKdbmtMH/TJImyYLX6XlwCFSaKMvKFjsOgol2ovpYxiJmKSQkVaXXVef29g+
FrZaRDNTTotJVltb/K9bWMBKTzkM7ABc0qGngdp/r7hn0uL3HXzm9/GH/1Be
miHikbUq9mBvM5XUy6QPBgO66Yh5acEJ7SPkl7ksPJ9dwiD14AfaOluqSvIz
iwuyM7NSj8Qf5PBpb7x1/d79Wy+8eD4y5Y7eeEct3ruEu2FwqAeGHWVskETB
9GOQex28ENzvX1qDxg1uWVCYGfsgPNiJ3jEsPx0W7MQ+Gg8ehC/3Mmf0JXIQ
XZRge2NTax2MNphx1Q1V+SV5ze0tEEsis5OBcHB2bnJ6ZmJ6Luzx27wBu9tn
Ndq1epsOltFtVlmNWvteYjFYNXYvsJM5xgEfsPNNLU/MzHSh2svKMzs7qgb7
2/FYpFZOH0BVQv7fXDFFYalGQ16xw8JUiAaVokGjnGDTkGxqopTVPYwuUglR
q/PajWVzMCDxeqUWm1CmZMBpDGkTDAp+np6elri4f6czhsiUPiKhc3bGtrUZ
UqtoLocSJldPT1P0kwFLcoqKs+EIwAJw0BFiIROGHYAD5wQZArukI08fOfRE
VkYcl0nwu/ViLknAIuhUvIlxc9CnXZizX7+yAcV/bdGtU9KYlIH2lsqCnOTC
vMyc7LSU5CPpGUnQ0a7fOPf5V++9dvP59c0Zf8ABVQvYoXrbMINIUNwoeSD6
EsDIAGAC7YCIYikl9ghwATpp6fE5e++ki70L8r9vvpGfHtvCr7AXZqo7kC2x
qQfsmtvq6xqqyyqKM/My6lvqdGa9d9xnddlgtAVCnshkMDIdgKwL7Cwug8Nn
UZnkZq/F4rNKDSq11aKx2eVGs8EdVFi9Qotb4ZoAz/RElqYXlocJuMbG0va2
yr6e1k5EDQYFp0iy1UDZPeoGcEoxzmVj+1x8jWxYxh+wa6kODdkgGXJoiQpW
l10zvLVoOLZuDwdlPo/YYuaJxKTouwzUArNN6/JaqmuLDh36A8Shhsbi7s4a
h10ql1F7ULU+fzQjVVcXlpfngtVE7xuzd0onJR1Mit8fY5e4/8kYOxh/WcmH
UxL2pSYdSDjyRENdkVrOifit6wsTfjf4ilqjZMH4c1hF66u+3e0ppYIGvtrW
XFValF1RXlRUmFNUlFVSklVanhUMWd+/99pb77x4+uwmjU6EjjxGH+4b6BjA
doDuhgloyJmxJ75AOLCgI8CXECbhJwRqySlxex/8Gr0DQEx0MbnFpAc7cBLG
rqQFgrFnWqCANzTXVNVXguKOJB/G4AdmluZcAY/N44he4RN0zcxPwIECcK6A
xeYxwFZnU9oCVqvfJtEr1TaTxuGQmyxGD1QDP9/kBHZG/5wtMDM5tzg4NAD1
qr29pqm+orggvSgvqSD3IJ2COLUTsBuZEh5GyO1XyUaUYjyLjFQJsB4Dzakm
he2sKSdnPiDYWTOvL+rHvQKfVwiJRSAaGWNgWbxRwGe0KGEWZOekdPU0w6JQ
sJNTruC4RWcQ8QTkppZyqGwxq4z5T/SNaUkHExMPJByOtnKIlzF2saZw5MCT
WekJyQn78rKTxihYq1Fm08ttJqVSymHR8C2NRcUF8WhULZ833NVd39pa3dHR
WFZakJebUVFRgEK1dgGBphK5inn5yu7dD26arQpwQuwgCjPYRSRhQHQw7GgM
fGc35MNqGGR19VUgHOLoEPxssXs6wRbWkfh9gCk9I2Ev/6Tl7r2vJ+aZ8CvE
2MWeKIs92VLbEL1+vqSyODkjqaK2XKVX+iYCkCQ1JjBGPcy44ITb7jJ6/Jbx
KY/eqnQEzGa3zuQx6p0GsU6mtBjUdmh5Fp3TCyVdbPPKnSGDd941sRSMzLTA
LG2rQyIbkIimuuqSprri+ppsbF/l+dOTk0G1VkHmsdBUcruQ3Tc20soht49b
WBMWtkM5PO8Tbs2qT23Y5iflbhsj6BXZLGwOb5DFHWJwRlQ6gcNtgDM2KflQ
ZlYSiKu+vpTBGNYbJVI5q7a+qLg0C37T6HsrirPhjIXfPcou5UBS0n6QXsKh
p2O2mXJwf+rhgxkJhyF/5mYlJxx+ClZjXSmmtx3WQFdHD6KxB9lYUZJZXJjU
WF/Q2lZRXJqxlwzLi4qjt0BvaCgbG8OxGDgWG+f0qE+f3dg6Ng+MQFPRN2AS
+8lUXOweZVAQUL0tsWzZhmiCeRf7G1JSD8fukQLs4IcE9cU+fRJ+r5hnxj5O
FHYysxMKizPKKqIv0xeX5cIqKo1eGJNXnAOLJ+ZGZsMWtwWSpFyrBHZ7Fxdp
AyGHyaoKz/qNdqXVq9PbVXsXSKukBsUeO6vSYlNZo0+wSOw+lScC7ELzR21u
f0FRPggcTtRuZGtne3NrU2V1ZVZLU/ZkSLEwZdIpKQYNhc/tV0tHVCK8kN5t
luL9eppTMbwckOws6M9u2hfCMp+dBflfp6HQaeihkY5Rap9EwbI6tJU1xfsO
PpmSGg8HAc5hLo8W6+AV1QVFpVkFxVn5ReAzuQWF2Xn5gC8jOfVgcvKBmPQS
96SXdHBfStyB9KQjqQlxsSSTnhJdaUkHinLTS/Kzywpza6uKc7MSiwtTc3Lj
ExKeggMYn7A/Pn5fbW0pDtcDepdJ6Bw2jsfFz837d0+ugj3CzwCTjkDEDhP6
0H0I2CK76rG4bsgtYJjIzmYYdplZKTFqIKjYheixbezBtOjnDCbAI7GpB+zy
ClILitIBXGV1ARDMzkvNzIl+rHZ6TmpKZlJjW70n6Ib2bbAbNGaN2WWGQKI1
qSGchKe8JofGM26bmPEZnRqVSaq3QzdXqi16rcOidzq0e59jqHWNC81efXAe
PHNyeVuhNSYmJxQWZlaU5nR1NPWj2ipKMkoKE5rqUqVCzOYypHyqXj1q0JBc
Fo7fLpAw+4ZR5TI6atrJD1no0y72Ukgc8XKiLwnZuUrpMHRwIrmHKyQrNDy9
SQ5oDiccgMSFwaKlMoHPb6dQh+FXi34SR14qkM0rzCgsyskvAM/MhCSfkhJX
X18O3aooP6MgNy0rNT4vMxkUFx2CR/alxB9IhvoQfwBUCaaanZGYl52WnZWa
D6MnLy0lJco9I+NIWlocaI3NIFJIA4RhlFzKEPMpjDFMa3OJVBp9wjx2Oz7Q
HXgmmYJH93bA4APnRKHbwSiq60qR3S0gmZz8tMSUQynpcTGJZWQkpAI1EF1K
XCY8AlMvK3orgPz81OzsxOzcpKKSzLKynJKSjMrK/L2b0x7Kyk3JLcoGdkhU
u9ai8Ud8Dr/dYNcDGrvfYnYbLB6jwaE1O/WecUcg4vHB6As54dvge7SwbMbo
vLNZoaQDPqXNI7YGle5p28RiZHlzlEaL3hW8sqCtqawbUdlYnd1Sn9OFKOxG
5KI7ck8e9XptTKmgV8jpthlokYBibKQD21kupKINkmENr0/J6RSMtUhZHbE2
IWINMKloMhVDYeJh3gklzMycxMMJ+2IdFjfUC+CgyUKNBasEXkCtpDQf1AcE
4UDBWRoX9xSAQCDqUSgEEtHQ0Vbf0lhVVV6QkvjfGQam3uH9T8DKSU9MS46D
QweeDFEEDiMczKKiDDiMNTVF0Re2xm0aBYdC7BsjDWD72qorMgvzk7q7o8g6
u1pi4Hh8+igJBzuxLUzA6DPM1UWD+N6M7KQ91RyOrrQj4JPRp8STD6WlHYmC
S4sHA98Dt3cb4byU2G0ocnISgF16+uHovU8LMzLzox/PRKAMA7KJ2ZB30gfp
EZAZnToYalZvbCdKELZWt9EdtIemgpNzYZvXZrSbdXaL3mHXO10Gl1vndEtN
DpVnCnTnmFyYXF4trazIyEzuQFQjETBI09vqc7vbijGo8mFM7Qim+tiqfS6s
4DHbScO1HFqnRceQcYcZxG4xA6OEuTba0o/MHhuqpOIrlYI+p4mhFY0yKX0w
OEh0PAQVGpOQlHowfu/eaI3NFTBVYb7AKIleo1VWAA4J+GAbzQDZ0cEBZ2ns
5pyQLvr6kACuG9kM7MqKc6orCkGJ+VkpsSc8gV1qwsGC7NTCvPTS0uyq8jxY
5SXZmWmH4+OehB5RU5XHYgwDQRKxrwtZ21hfVFudh+lHkMmD0BRAX0AKDHOM
RqCOjZDIQ8TRwdjbPeC8gh3wdsgkwCt2G7eYT8ZEB+yi7/fPTgZqBZBSgF1x
Biz4HfOjF3jkZGTFJyYdBFeJfoh2XnpxRaFMK51bnR2fDgJBs8vkCFidQVuM
HQjQ5jPDIyaXHhY87h532X027wS4qEVrMwM7EJ3R7TW4/bL/r6n3fG4ky68F
98N7egqZGbWpKnoPR3iA8N577wgSBAmSAL138B4gSNDbqmL56qrurpr20yON
RpqRCY3evrexHzZi/589SYwmlnEjIwmCZOKee87vnMybN8uNlXy9cnV39PR5
slwiDQ8Rt7Fzhlx2RTm7/PiinNyamho3rS+F5mK2s8PNH391kU+NT0c1AY94
JmpdjgdmJxzLM97VhGcqrIqGZNGAOOTmlzOxm7NkKTm3MBNARVteS+ym1p0e
M0g3QOpCKW+dNYLvanlp7GOLMoea8qfCMTxAVHxaf0fHp3CboJ5BK4PJBzqt
QQ7soJ/gHZdBdpi1BrXUblaZdFKzUapXi5x2dXw6HA7ZRAIahzXAGO4x6sXz
iTGJiI59MA5vmJkJoa4BO4gkwErMTQaCTkgBXjGZ1bBM4B1KG35aLKX6+onn
ura2f6pulF4AR7oHEUwnHlh/v+YGgBsR0rGFThJwk7qgJAOUvt6h7nA0hKJ2
dXd58eQcoKBVDssACxhlq3uZCtJ2EcChVY8ITJuXDWJN1ALhRXP1UqpcSlXK
yTI086B0dJY5ONqtHeaPz15/800kPt3V2waRUcjYW2sz3/3q+bs3l8eHmaX5
kNkwYjeNHFQ3fv/btwh38ZjRamA7zILpMUci6lmbH01MOlIbkeWEU8xr0ykG
C6mZV3f7B5WdzdWZnR3i1Eo0NiqScvFBoDxAqpWA0D8wY9jiFWzhUqiUgVbt
YNAGAB9KFRSPOEsmYoJHcCAqObG8OQg11N+Gb5cXph5fH71/+zSbWg96LSoZ
x+fS1Qs7p83CF6+uz4/LGgVPIWGJhcMYkHC2UikHKdJolI6Pe0IhYvUVoAaw
IhMBj9cK9rWuhMKf4Hig7RhF+OnFZRNqgH1CKv+rgXRADQii8AE7mAQm8fB6
UuusAkSDMkw88bxnsAsFjiNgr22vvvry1fMvnp8/Pj+6bNaOqsAOW2hj/Yi4
66d+VASIKHxAkADxpE7cVHLagI2pnRzAqOwVC3ulIoI5fGb+4Bjw5Y+O928u
mzcXKqNKqhhRqfgelzadXDo/Laf2FpcWIuGQVSIa1ip5Oxvxbz8+ffq4tDjv
sZkFAHQ8YElM+eeng2YtD/DlkrNri367le/3KA/3k/XyXmJmbHl5FrYkPOYX
irjE2sMjLOzAirTcCHG7Lqh3v+pIa70R0AoNtgRbFKxIxDs1FQwG7XaLGlFO
IeWqFSMtPdRrxD99/+VvfvrQbBRK+Z14LOg0y8vZ9e8/vPj5u7dfvr5eW5oU
cMlyMVOrHtFrhQCutVAG8h1xMS7sBC6ADNUNCEIqgSAUsnVip6UMODxk9qd3
lwAOUgnStRIB6V4q/9xaqKG1gjmAwxDlCFgytdTmtc0uzGylt569fQbUkAgO
zggZzJTTxf0CwNo/RgYv7R+XTq8PWlLZKnmgJMHKo9r+yf496Qq7xUKqUk0R
V/Eqycp+sXlcOm4+fvsyNh+TqsThcTdCq8+jn5xAiPNHIm6LRaFWj+h0Inx2
l0NzfJC7vigszvtMer5ESJGNDFu0Yp8dckaLBI2V4trd45rXowoFjPv7mZXF
GaNB7XSgmnimYuMarZy4Y0LCpzMQYIcBHGor5X5ZLdQLYoUfxhAxjEk9qGJo
8JNgis9n2dycPz/fb9SyDquGxyZrVUIkF2CHZOd26CfGPF6XcTLi06lG9Epe
Nbt22cz/46/f//irV5Nhh0QwTB54NMIjmwzEQ5RGRoaR18JjXvhJKCTAMls0
rWQHBFu357TOKmMHIwqEqtfzx8e1lja2sCMG2L2rxBY+hJh1dg8cMUF3hDDJ
w0yySiubnJ3Yy6UOL0+unt7UTw+xs3/WPL05BRygW6lRbC3HStwTXU/XD/KV
g1yulkQoaPEObyBSQz2f2y+kyrl0pdjCrnDQTFVqu6Va5eTs9vWrytG+N+SG
rBGzBKWsyJjD7zUAL6mcq9II0ZBT8Kn1enFiNvT2zVm9tjUxbjfohDzWIA/e
XsDA8JYIaCaDMOg38PgksZihVAu4HLpep5SI+UqF2Od3tq77w0xSqAhB1GE6
iUzpJ5ExnvtayoPyQbT7+UXEKej+DjBlbMydz283m6Xzk9rZcTU67tWpRcOU
HmgmaIgdfCsTsxm0vsHez8l9n0f8ppX46PtXFz98fBmPBfQ4DPYgjdIpkTCR
FPBBoIpokclgOOKDZgJE+BM0+N5WDBdLuK1FGFre4+XL252dFQAHdDDSyP9V
5rClEnWZaLz7EnD/8BEGnUVhcIdHJ4Jnt2dXzx/fvnreOD8CcGiFRgUaCB7B
ohycNRAE4CShlmgn53XkX8BHnEU5yCMpgJV4W75RzNRyIF2mipiX2yuVy0cn
xKWEcrVxcfnyq3czizNKjXRpeRYdBZbBZxoMEuLmaNXICAyblA1baLEpgZ3V
pphPhAAcrJpKwZGJGEIejcscEvGHYQnYzL6BwQfDw8TCyFCVVlITCjiCEbZU
MgLgEAEo1AEmi0amDGAHqCGn9w/8qXbAUmIHIRqNOJfS14a0cnXe2FiNO21a
v9+ay21dXDRwkMhQCG4cDhmiymQOohoODLR1d/6SRe2ScIe0co7bqoxP+uxm
uYhPpZI7gCzer9VKYUJi0xGP3xEa8/mCxCJIYN/G5iLQbF3HgUhCKlsLRgGd
fH73D3/4e4fDgLQCWaBRB1GRAdl9A3Y9sAfE9F0umVjGk5gYzyTTBkYk/IOT
xtPXT08fE8WodnZUOmpUjxvgHYArNUqHp43qQblcy9YPiscwk8dlANfCrtYs
IJ6jgXetFTW387twmKVDKGctXSln6/uwmrXTs+uXrxonRwarUaNTQvntdi2M
ikLB1WgEE5PEiU0ApzPKXB6926u32WGbh8VCikhA1mlGrGaZVskHfAIulUnr
o9O62cx+JBrICINFnF6AJBKnRxgUhUKAiI1hDLXEi30D3TQ6mUwd7B/sAfWA
Xd/9eQ+k6a6uT7Hf3fOwp+chTF16b/X2qgngKEOdOp3EYlHBYywtxSYnA2az
Ev3W1/ewlYWxM8KlqnDwIroUcVhAsxpl+CykwUckEpHQEZMBE4JA66FCkcnR
wKinFeXGxn0oc8AOwGFL3ErJG5ZIuIeH5X//9989fnwG1DCoYHf/jB3UsoUd
SPfnNMfkUHgCVj+ZuGfw+Or4+sWTo9vL/YuTYnM/u18C6SrHtWqzCkQI4Bp5
AHdwVGk0i7VGbv+w0DypHByVGifwLTm0SqN0L5v59fQmhBHhrnp8uJ3Llg4P
cvv1syePm1eX/tGQSqPU6VVqtdhsUFqMCsRJr9f4pzXWPEa9Wery6BYWx6w2
iVRCMRlHPC61y6EE9QRcEnWozWKQ2kxyJq0H0iQcofL5NDACJhnpjFimldQD
Y49GuDIqQbeBoV4me5hCGwJ2A4PdnV0EUsCuNYZblzXRmfB7+9WczaxBmlPJ
Ba3+XFiILS3NwP/MzU0isLNYZGJI0AcRIlKptbXlmdiEdzxkR3YL+qxWk5I8
2IG+tdxPqlxcmoEwIqqgOjg91pnEJPw/ogH+EShzf36AqlQKAY1GI2k0iv/8
zz//7nc/TU0Eod7QcDq1nwDu3gnfF7veFnYMxgCTPQQ1RhZApYOlTJfSqHHH
N+eNy9MyLEK9lK0VEa7BuEqjDFAazWp1P3/YrDSPy5VaGtaj3sih5LXYlyvu
5avp8n4Rspmr5jaSG7vZZK1JOJb66VF+v7p/dvz6y3ezi/NWuyUajThdVnxA
qYgDCwczhiZX8u1OncOjI7DzasbGLbs7U/MJj1rB8HvUl2eFSnGjlFnZWpmc
jXqtejGp9zPgONj7Gdw4ZKq//0F/72cdbX/T/uivO9t+2dOJmNbWusg1ROnD
+EQzmDVujw110GBQOJ3GqQk/7N/C4vTC8szK+tzG9hKSOGWoG+gPU/pQeoRC
FnrV7TYbjUroGAK7AMGQQ8WvR6PBzc1Fj8eCv4MGJ2k2q+FOgandroc5gV3E
1uE0jo57XV4LNHN2bgplrrVSXGvAYIu/hhFyerr/+9//BmoJo4L/DtSQKFGI
///YATVgBwQx5IgT6cRNWIw+Uo9vzNe8aKLSQSQrJ4fE0uu1IqQPDhOoAZFa
o3B0SpxzBl4HzWK5miJsYy2dK2xjp1hJZvI7hXKqXMvnK9lsKUPc0FHKpYvZ
crNeO92vHNRgeKbmprhCjt1pGQ37x8J+fEwui4S6r1DwUUHEUjb8xiCl3WSR
PXl6eH1V/PLd2epySC4h1yubX7+/vrksvnhS39sEdk61dJhN6Rjs/qVBxV2c
G11ZHF9eGHPa5Evz4e312a212ZWlya31uePjyuXV0fbe+tRMJBwJrG0uZbK7
K6vz6Pbt7eVMci2ZXC0Uk/hcpWoGH0HIZzFoQxwmlUbup5D7R/isIcgsqQ/7
MEIKpRhxXiYXwsRarHrEQ7lCpNUpVGpi8g98LMhrsxtbNw60br2x2nT4FkQD
jojhIKDWIG9Ni0UuQI2WSnmocaDbzz9/8/bVE4dV19/zCOOn1YYpcEcDgBLx
s8U7bMG7Vhin0ofoHNpubvfo+uz08TUqFHo7v1/OV2EaoZMVAFfdL+43ig0U
stJupZJqNPIV4kp4pg6K5Xdb++gBfPxihbhzH207tVk/rhOLn9QJ93Jzd724
Ns8nHl/IZrCpxJP1iPUAe1Ey5FKWUsmDY4EODJE7OTzS9GzwzavzrfUJp0Xg
sgrnpl1ri6F8KvHNV1fff32T35s9rm9dHacLu/HTRvLts6MfPjx99+LkzfPD
48bO48vi9x+e/vqHN1+9f3J7ffD8+eXd84ud5Bo8Xnw+Nh2PJuZiwC6b3Sbg
25jPZDaSqQ1keTS8jcuiUYZ6+7rberseATVYVjaLJhJy1Sop0gcIC7BCo969
5KbHa5fKBHwBRyjmK1RSDAy9USORC1qzW01mbauoAcHW9DwEOpQ/m9MAMwZ/
2DqxAw8JS/lP//Tr77//6je/+XYyEoBlAuMG+9ohm9ihUwdb2BH6+V/1jriV
j0ehswYHKH12n61xcgjsGucn5SZMSS1/X7OISQu1PMZkDWAiwVVTwK5Wy+yj
tFWS+BavlysZoImGwVMspQrFdCq7A+ySud3ifhE5PVvJnN6crG2vCOU8jUlh
c+qcboPFpkb2EYnoAE7Ap8BPwuS3nvizsjZ9e9sEj8I+nccqDjhlkYDO75LN
TtoK6dn0dnR3fXR7OTQbMT05z//x9x9/fH/z7fvLw/JaIRl/cVOq5OZOD/e+
+fL27vHB9JQvFLItLsfQadwRulQhlCmJucEut3US0XhqdHlhamtrAcMPgjmT
mIjPTyplQh57eKi/C/DBJ2jUMo/bFh71ATsYV3hUWB0QbSIKvxEwWfRCmUis
kEiUUrvHZrSZ+GIeaqtIyh8d96PBZKKo6QxSYhV9l97rt0gVI8QCHRIuKh1I
B9m8u7v86aePP/zw9c3NCWo0ICMmZg928VkQyy6IwD31+tAQMJFQ/uwzybQe
EGE7s3VydXZwcVw9bQI7kA7dXqwVcuVMoZwBdtVaDswqlfYqlT1gB6QAYr64
UyqnK9VsobADL51MrqMT8oVUOreLX4RyluoFYuWHs4PKQUEi5zPYQ3whXakd
kSk4OoMok11tHGTq1b1Cbj0YspjN8tjMaDa/tbw8nUiMFbPrZ4fZrcWw3ybd
Wg7vF8EV785aKLMVWY7bthd8tfTsy6vixf7WV3eHv/l4i52j6sqXz6tv76qg
5M7apMsuk4ppGB40el9b+yc9/W2oemweHbxAjhCJ2ChhAa8FRtdmh20SQ8SQ
sJxW06jf47KZZaIRhVyEptMqwDs+hw4CQjmHaUP0YZJcJlxeSgA+t9c1PhUB
4+CC2FyG1W7SaBV4PTzmh8C2ZnkhrookLJfHiBGLIcTiUltTLIZI3bFY+Mcf
P/z0/ddQS5NeAdT6uh+2znIPk3oxiJjUgXvUiHM+qIPYsuhDnPtIPkDqMtkN
J9fHiHVI4vXzJoCD0yC6fb8IDUQDagRwKGrEDay7hcJWLrcB4ABfkbjhIFUs
7mazm3t7K9ncDqiXK6YIthLo5/eParlKam4xZnfphWL6/cPr+wDc6lqsvp86
Oy/dXjcO9tMzs8Gl5ej19UE6vQrDabcqk9vzO2sz2c1EPbdaza8GPcrlOV85
N5dPTh/vb7y8Lf/Tr1++elzbWRmr55eKybhFw7Jo2eMBlUI4aDXwtCoWc7iz
o+2vBwcfwaujjMIttC6RIzUgEcDayWR8vR4vEcZjbMwLGzkzM04ZHJIKRVaj
IRzw20x6cBCogQUKMY/PgZx2o/fI/d3DpH69Suaym/w+p9fnAKz9fZ1iEQ9A
W8w62Bi9Xo6/j1oml4+0ZqSDcQw2GeUSVRKMxjCAw7x7fP7b33z3qy9f724s
0cl9/V0Pyf2dtP6e4YFe8BIIgnpcBhk/og52Y8uikUbYdBwVi0mFCGQLyeOr
o/pxrXZav19unVgdBUSDHgKIfAFcS1Wr6VJpp1jeqdSSBUS34mapspsrbKQy
K9gWSlu5wmY2v5Ev7aayG6nCDnGzYbMC4PayO8EwcaEKBkylgg/oM+iEi/Pj
0YjLZBD7vYbFeeLsJZ87ZDZKIHGxSe/0lCfo068uRjeWJudjISC4tzO/tj51
fVk9PkrPzfqePz346fuXleLaQiKAd45wB9RKrsOmxB9hsvokUob/Hn2RgAYu
LyxM3t4eQ+RBao/HJJVzQ6Nu+AetTgYDj0oHr2vUyWPR0PioR6sSy0UyPpsz
1NcvF4v4bMYgyt6nvxjqbUfXtS68EkQY6O1vf0ju6Rzobu/tegA7CresUYpQ
kmDsvS6z32NF0ACP7qcYEfNhUN3YPJpIyhVL+MibwNps0r64u/rNT7/68O7l
11+8mAi6aQNdrfnY1L5u/AsmaYBB6qUOdZL62wAoizZIJw9g2HAZNAEXpa4H
Rv3otHF80URJun8KYSpVSWYLu2WIYSVTLCahh+VyElIJxqUyq/niFpBCA3yZ
3FquuFaqbhXL20AwW9ws19KZ0s5udjNXzaLMTc5OeENurUGJg4dKI4hJRHSf
Sxef8a+vTgJBJFnGcE/7o7/q6frl0MBncik9MRuYnnTqNRyTTrQQD2+vxNeW
pl+9usLYADG3d+ZmYv6pqGdpYSwUMAL6iXGn1aocG3PqkYtVI26f1WInVt5G
pobxRqx+/vz66uowkYj6fBYQARzEsMQbUHHunl19+92XkMrenvaHD/6up/Mh
ippCJteolR3tj6gUEhNWArG+pxO179Nf/hWKIJyMSi5SywQM4jEabQCUx6ZC
fsEgMrlnhDtsNak9ThNQs1u0Cikf2CFTtJ6jRGeRwDvoNpND6+vvnJwa+4//
+GcEurevbhMzYxIBxslD+lAXtZ+4C4k4MT7UmqH9iEkmdgjeUQfhfumUIQp5
QKmSZnLJi9vzg5PGwVkDjEtXM2lC9PZAt1aDMP65ZXLrINefgcvm14EaWjq7
BkpmC9uZ/Fa2nITe7uV3x6fH6ZxhOFi4ysEh4qo9+k0qYs3EAkeHmUJuFTAR
8/rcgDI4NmrbWJu6e3L44evbne3pVDIBZGenAzOTQbMBWUziD1rcbr3TCddt
stmVVrNMIWNJpaxg0Gq1qkEoYEFnDJmsOmLVC6N6KhZG54Dv/oALOnl/NYGB
fcQrFCPYe7RcPlmu5JQqCYfH7MJ45nNsbjuPyyYNDbQ9esBmMdQqGWuYAvah
/AU8TrGAAycDnURyJ9w7qZe4Wa+/HYMEZSsUcm2tL8xMhUHecNAFqw9Ga7XQ
5GEpQWXiYS6AD8DRWRTU3MdPzv/hH76HUYlFAyz6AIBDY5C6gR1gAruBHf4F
pa+NzyAu+OJbjJzBgW4Ap9bId/Y2m2eHp1cn2BbqeaBGrPlcSgM7VC402H5A
Bv+Qzm5kcoROAjtABuD2UkvYAY6QTQCHlId3Nppl1Lil9QXkuLHY2PjUmASB
iMcEfNB5r8+GSNVoZE+P89nMQsCn97o166uxp4+br16c/vDdq59+fPWrj0/O
z/Jfvb8tFTa9br1KzkdjsYaUar7fb7bZVD6fyWKVg79SMSMcdgA4s1kJ1wFL
wOUx5hZn4NUBH0CMTIyqdXIujykUccmUAUTyZGo7EHTb7CbY+yFSHww/OgEG
g8VnTyVm716/PDw7GRFw8CMq3B2dLJWKxSLBQH8vh82UiIWCEY5ETBiY1mrn
DFqfRMIGZMja8GkwruGwB4kVCR0NryOh+3w2uKDWJDQOf5hKB/soLO4wiP+f
//Nfvv32fSTiZQ73d7b9srfz70j9D6lD7eSBRzRSF53SQxnsYNL6mOQ++hBx
mYPHpIB33V2PtHpVupA6uTw+ODs4ujw6vjou1Yu5chbmEMWOWGEms5XJbrew
A2rJ9Foqsw7BBPXQ9lLL27sL93S7J11xF24TnhPpYGJ6XG/R2TyOiZnJ+dVF
Yt3XtaW17dV6owJxbhxU8Ke2d+K16vruzkx0wgYEIaGPb/YzqcXkXnxrM1rf
3ylXttbWp5PJ5aWlGEQb1pp4+KOauBym0YhMJhkkEW16ehTdheg0ImADGpfb
5vW78NEWl+dWt1ZkCimVSeHw2DQ6mc4ctjst8blZjU6pUMln4lPjE2OjYwGh
WDDMpmvNxo30XvX4cGV3C9EMCQIliYO6QqN0d3cOU2kQUrlUBgQx5klDrSto
3UajHJYbFg4FNBBwAKyJiQDw0mgkrZM28D/IJrCarZmf3X2PmBwKX8ju6H74
xbvnP//m26mpIFJ2f8+Dgd6HQ30PhskobQ+BHVBDmRvqewQEUfKAHVzK/SM7
HiGeADhAdnhOzPgCcOWDcqVRLlcLmfweZATApdKbwI6QzeIOSAfgsAVkhCEp
bhFLeCXBu41ydRdkrBARLzO/MGN3mNA5OrPW7nWi+cKh+NJCOp87PG3myvm5
5fmVtWVf0BGd9CzMBwlt3Jtv1PdAw1JhfXV5AtgV8suV6ubG5nQk4saYhPFb
WpqJJ5CmXKCYQsFvrV4COYIHQHdNTY6BSsjL/BG2P+CeTcQi0XF/OODyu2Uq
HIkeMoj8BRwdLrvFZuahJjFoJosxOBqwO2148/zKwsR01B1yU1nDapP66vr4
3fsX97NZaC6XIxIZW1xcDAaDOp2OwRhmsYeR74DF0sr04VFhYysxfv8Y1unZ
MHZgL0E0SKjHYwkGncQ25EIA+dPMT1IX0gG8SrVW+PDhDT5CT+eng32PwLWB
ns+GB9s5NCjkQ9pAG2RzeLATlQ5bGBgYTupgL3mwB+kjnd27eX5TalbqZ43D
q6PmRXMvv4c0l82nMtm9UjkL1NI5FK8dtFR2K5nZhHtM5zYBH5EUynvYAXCQ
SnhO7OztraEPVWoZGjrE7nHYPC6Hz+MJhSbj8fnV1dXtzaWNNXfQPxGbWtlc
8gXMmezy+UX55auL12+uiqUtlLBcfrVU3pyNByTSYXhFGA9i0qZRgwMeH/dh
SPv9dkKClBI+n47AxWRQMAiNJi3EjTZMEkmEXr8HAKk0SiSxB53tfWTyXi5z
eHK8uLriHw3J1SqJQk5l0I1Wi85kRBufjPpCwdjMlEavYLAGURbjc5HL68PD
o9L9qneyaq1YKOTm5ub29lKAj8fjDAz0yeTCldUEPnV8biw2E4AmhMLO1rN9
cZBqtVinkyH145htNp3dYWgFEzKlt3+oEzX36d11IZ9CERzobQPdQLHu9l8w
SMCojTvcR+0HXu3ADv6ENtAB4OiDfaS+rs5Hnxv0amjX+c0ZUDu+PQVw2Nk/
2U/loY3Znd2NfC61t7uBIk6UvAIM/9Zuan0vvQHs4EMAXG0/i9K2m1wBauUq
PtPy8uqMVDIikwow8mVyEYa00Www2azALoAPEA5HZ2dnFxe3UilgvJ1Ob6d2
Nrbm371/fHpaOT4uPX16NjHhMxqlgE+rE/D4JLV6RKsXOV2m2HRErVYaDJA5
MfpEIubzeUyEYgQopBuUMLFkBKj19nUqFMSYcXmcM/HpyNRkeCIKo2C025c2
NjZ3d04uzu9fjMTis1OzM/vNw7uXLzCKWt/OL8ZNJgWF0olYgWK6shLb2lrA
v9PrlNMz0eXlRZ/P53K5Njc3w+GQw2HDUV1cNhuHudp+emUt5gvabE7d5vaC
P2iDMrhcBhRffO5IxI/B5nAYkKPvb+DqAegoGaMBt1TEQ2CEdQRwpJ6HcCPM
oW76QCeL1DPc30HtbYNIDsOcDHSxyIO9HY/6uztiU9Hj4+bp1dnBabN5fdy4
bFZO6o2Lw1IDKS6ZK6SzuWQquZ3Lwqjs3eO1tbmzjB2wD7UMQtoqgsjpq+tx
qCgOGJ8aCoaYyWYNo0CIxHydQas36tR6Heyg3eMPRSZHJ6aC49HJ2bnFtc3N
vTQk9O37l9ClpeXEbHxyc2N5diY6PT0mEjG5XAqPR0YEQwlLzE2Hx0dVaq0U
XxIB/gWHPczjMuA9TGYdidzf09MFEesf7MO/m5qOTcZQwiIqjdobDFidLo3J
NBqNFmq1xtFx7eAwVyrWDw+uHt+eXl4k06mjk+Ozi9NytbS6viJXiDnMIeQX
IY8S8Jm2t+ejUa9AQEfZQu4OBD1Gg256eiqTSc3PJ0Dz1bWF+n7h7KJ2f3+x
1eHSh+6f6gvZRP11OvUIBfg4Xq81Hp+Az4SEIonrDaqJ6Cg+Qn9XW0/7A0RF
OElgNND52UD7p+Tuh0CN1teJRtz696dp2N2dDz8TcDlrK6svXry4urm8fnpz
9fSmcX5UPd2vnTWgnLlqbi+7u5sENLu5bDKT3tlLroNu23ur+VLy/kHq68AO
tQ+v7zeKkHqoBMwDjUaUbGLiB53M5SCBskEEjU6t1WuAndFqM1odTl/QEwyj
AcRYYmFueW1xfX11a21rZ71xuD87O63RqEJB73QsAm+G/IVOu19lgudHp5mB
PyTYSaEOwiGgB9Agy+hAkNFiMUEnYUU0Oq3VbltaWc7ksg6XUyyVdPb22Tye
Lz58yFUqS2vrGzvbkzPTAO7561c7e9tPn90BuPXNNZQ8X8A7MEhMJ4BLR5oO
+qyJ2dGNtRmFlIuABquPWpBJbq2tLl6cH2OY4ThhS1KptVotNTXld3uJRZ9Q
i7Gdmg6hQMPA+NwWNCR9/AU+h5B3DDnoEnqJGIF0CqL3YGcbubcdzIKNZFMH
sMW3kEdaPyxlL1B78Mkvhvp6HTb7zc3jp3fPn794hVF3+eS2cXKYq5cqR/vF
w3K6lM6U05liajcFc7ILKYZm7uyuosZtbC+BccnUxuraHIAD41pnjWASoAPE
M+L72tkMEjHhikOc5xGKeNBMuDjiuqpBb7CYzdAMj9cTGCUaMtxEbGI6MT41
MzEzs51Mbe0lC8Uy+lwikWg1YIwcfxP2+369AoHRrAuFR6dm4z5/EKNioL8L
5oHBpCqVcliI2Mw0fnFlbRW/xsa4YTENJmM6m0kkEngFCgmilWpVDCEgi+FE
ogxByTe3N5aW5/x+LyIA+KvVIVnww2MBu8Ps8ToSidm5+Zlyfmt7M4Fcub0x
X8hsFrI7q0uzkbB3ITGp18tddoPXa15YmKzX0/n85uoqxMEZHHU43cStWCqV
IBCwra8kWrOpYZq0KukIl4FUCMYBOOYwiTbUB3RaVQwIgoCU3i6QcZjU39/V
3tvZ1tX2qKOtHbYWBenlqzcv3ry7uH16fHFdPTxsnJyUG/XiQRUN9jJbySDQ
ZQvJ3b2N7Z21ne01aAKwa12MA4LYh82bjU+43GZUYS6XhlHa2fkZc3iQAI5J
hnETjLD5IyyQDvojV0qAncGkN1stJrPVYLFanR40s83t9IX84Ql3ABycCken
VzZ3g2MTflT1SNRgANR6p8OM/mndgiRTiPF35heW1jbW0b0YvfB46OrR0SDq
jkQmBVhujItQUKlWkShkJpvlC/jVamQr814qeXJ5msxmpmdjTDYDxlKtVQmE
XIlUcD+TdqCnt12nVTjsJp/XsbyUODw6aBw18Y+29naLqbX15djW8vTKQjTg
1KvlfD6brFGMeBx6p007FfGNBq2xSd/u9ny9mlxcjKI0i6VMJBcAZzUpzQb5
9ERILRPoVRK5iCvgMHjsYcn9qez7SzmDA70dQ/0odj2DfZ19nY+wTxvqJw/0
ArXuro6HDx/yeLy19c2Ly+uzq9uz6yfFfeS4m9rxWbpcrR4fFRq1Qg0FgFha
llhQPbONura9s7K+QazphJ2NzeXWRS5kWDQ4LqDT39fJopPxv9gMCv4vkzrE
Zw0TWw4dCg8HdX+TpkihFCPwmkwGq92iR6nQG01mO8RTb7I73IFgOOobjRjs
XndoYnQyvr6TSSysGk021DTQFqUBmgNBNpnVC4uziGn/8m//+vt/+YPbY3e7
rGaLXm9Qh8LBiclIYn5uJj6bKRRPLi5z+SK6r2+gHyDCyev1eo/PHZuJIs1V
qgWvz9nX34W4De8Bz6NUCucSMaRCjDqI5MriDL59cve4eX6KvZmFOY2UIxfQ
6UMd8HtSPs1jVU+FXZFRO/hYL+/FJrzL8xNohdxGfCak1wp1OpFSzW/NwzTp
ZX6P2eswATjApxDzWDQS4ENHCXhM9F77w096ux71dD7s627r72nv6XjU2fHw
0cNPP/m7X3S0PwJq8cQ8IHv68s3N3cuzx3fNi8eHl0/z+yeZ6gExM/mgmSwV
C7UKIt5uZgeMQ11b3Zjf2FxcWJyOTY/NzU9FJ8OttXFaU3ewRbmBalFJfRg5
lKFeDCEQH0cFqy4WcIj51cQCyMSiOvfYyeDtrVYzqGexWVGwLFan2eJsYTc6
MePwR3yRGc/o1MTsojc07vaHwBfQanh4QCxmma0qJKZaPZ/O7Pyv/+v//J//
6z9nZyZhL6FsEM/l1aViuVCpVT/86iOAi0zF1je2JqemIZVDZBL4C1Zu7yLL
4Nd3F5cSOr0KChzwu5AvYCFisXAsGgr5bTRyt0TItBgVd3eXX314BxtQrJWQ
QIVMsk7Knx33Ls+M5XYWC6mVybAjNu5YnY+sL0bRNlZi2+txt10T8lkjYWI2
qex+rhSXS0wAAHxWg4rLIPMZZMRqCZc43w8E708j91iNOj6bQYXrRFGDeFIG
RwQcdBRcWa6Qv3l69+z1F6e3T49uHh9c3JaOzorNc2Jhk9I+dkqHp3uF0l6x
UD863IRI7qKWLUAPx2FoYXHtGpVWJFcJ2ZzhIVIvnC0Uhs2iQasBFiAD6aDY
QO2eeY+g2Hw6FQgSM0JHiLtlhSK2EkNOIyOoZ9bBUVitVpvNAfEE+6xw8d5Q
MDwViMYVJrfZMwr2aYxW+EC4OKfLcnt7/N13b5vNwuZm4ubx8d2zq//9f//n
+6/eWi16WD6wDzz6w7/+Hh4jEB4tVMoW1Bl/YGZuPgTZnZqEY5mamjo5OfrV
N199/NV7+AqEQYVchBQM12HUyWvlzDcfXp8clkR8KlIVmtUoe//myclJvXlU
RzIaGw8kJsOF5OZyfMJn12tlXCa5S8gZ0im4IY9hNuqNjbugQyoxy2lSzMdC
UxGPQSeUS5kc1oCATxnhUqGuAi4V0Wyw61Ny74O+9k+Guh8Au46Hn2WTe//5
H3/85puPFxdnxWK+UikdnTThHh8/u3v64vktPu2TZ2ePnxJ0u74tH59n6ofp
WnOvephvXu4U6xvpQra6v53K7qZTW8nt6OSY1WaA0AmErNYNsMT6z0wSGNRa
JQD9iX7zwjGZdegEGrkfcg32AUcMJ4wl9jAZRZZ4HqUAGYF2/5wgCRoKH/QN
HhKDym63W6x2u8Pjcvv9gbGJqTlXMOoZi+msXp5ExeIL4VsCIT+RDc3anZ2V
mZmwzaapVDIotTe356Nhn8WqHxGw8dPZ+FQkGmayiRNciAZavc7udBhNFpfb
OxoeNxjNLDY/EByNx+PIZbAfaEaDJhGfik6E9TpVbCry65++Q4HrbPsMwsVj
U2Ei0NuwFrOzEafTiFywODcdCfuJYtTdhp8ihXEYg8RcUFqviEPWy3gOvSzk
0vvtGqtWNOY11IvrkbDVoBH4XDq1nCvgkvnM/t5Hf0Ub+FQlJqsltKGev+vp
/HyEz33x/M3HX/3wxVcfn795R8B0/fj85glMSPPs8vTqFu3o6qZ5eX1wflk/
OSseHhGrKxTL2f1jgnqFerpymCzU0gXiMk9icUmhUPB4HIGAr1Ci+AsRsVEU
WhU8FPQEgm63xwb4UPJ8fuIKo9GgRuGDUYd+Aj4GbQg4orXu4GOxKcAOAkVU
PbVEq1fB4IFwwVFiISediTAtkM3Q2KQ7MA7byRVKzQ43iOMJ+JGRAYRaq4HT
iETG8Ekp5AHUAjKpD75oYLAb2BmM6hEBk1jrgEeRK/lKFVFbZTKJSqXy+kIh
aPHM0uTkwnh0TqU2yOTq1bUNCClGDtIfPM9eMruxDe+VnY4vB0MRuUyN8cpj
MTVKCaK0waBA2EHb3FhJxGPJva2lxfhsLALCjgVcTqtGNsJAHRzzmFfiY8S6
wkMdPZ//Zefn/81lFqe3Z1/fHV8el7bWoO4+k4rnMgvnp2yXzd3r01R8ytHf
+1lvX+d+4+jZy/dPXry5evby5ObJ4QVguqqfnMOHYB87QK15edM4uygdHGUq
tTQxX2E/V2/mGiebmTKAS+YqWbjnRjMyMWkiToIYQQ2n0263mawWg81KNHAN
W4xzqB9IBA4iWqI5nGZ/wAVkxSIeKiAaebCHMvSnWxtQ9e5XcRH/ybHo5Hqj
xuawwv45vR6t0QT44DbVOrPF7lHpjGK5ChlQgWygVrl8fkhfHONpeb1W27fZ
bHqtjk2nEgTpbsORTEyFMX4cTiOEfZgBpg8hyEPM4UMEAsH0zNy79x9fvvz6
3Zc/ffPd716++bpcPxgbn+DyecgIRGbXGb2BsWS2Vj+8zpePnzx/H40lwFOF
XJre29zdWkayg2Hu7vhkIhKanYkeNevlUvb85OCP//5P71/fRcc89KEuSGXE
ZwXdvFZVwKHu+vQvwl7tQXlzfXFsaz329LZxd9u8uaw+u669fXbw9o6YffHq
abmYmdNreGRyDwI+fMj5DaGKR1e3jbPL/dOLSvOkfEislFFsNCvEEicX+DZb
OSAm3hVqmXIjU23m6sfpEjGDOVvaL9UPU7mi6d5JeDwenw8blxeccNmgjTDP
Br2KcGX363sIRXDsAuyr1FLAh8HvcdvQDFoFl4Uo2Y4iSKf2c1lQe+IasfB+
ii96FalBKhPCtOCPT0xG7Q6XQqlG6pNIlVqdSaM1whzCGQI7KpPW0dOt0mnd
Hh+kb3x8AtaFy+YAVatJC3+LZEdnUuFVbHYTBgYK8cBAB5NBuZ/h3M1kMuFm
y5X98eiMyxs2WtwYPQarEelerhITs7aIFSpkCyvLb7/6iP5Jlaovv/gyEB5L
zMdRDiRCNmu4n0dciH6AOohhCf0h5i1MjP6//8///vbjFxsrs2tL036HTsyl
KIV0l0m+Pj/+w9fPJgOW1Ob0Dx/v8sl5i1Hk9yBBuHe3Zp/d1L9+c/rly8aX
r6of3zWfPylenGatZjmTRc3mc0fnVyDd8fVjYAeu4XjAsurRaeXwrNQ4ydea
rZarHqaK9Z1sOVs73EFtPDwr7B8Wqo1ssRIMjcvkSrgygnF2GAmdzWpEwtKo
ZahrWg2oIJXJhcAODTstBwL40HVw2nB9OrUMVlgq4nGY1FbQQ+IjFl+iDWCM
EUvBENNySBwuA1VvfDw8NjaGca5Wa+VI7wqVRCrnjfClcgmDRWdwmRqDHnyG
yu0l0xsbW4TtZDD5PJZCLtZplVD1zu6O/v5+kQgk49PpNJi0T/7ub3p6urq6
Oj578HlXdy9fJB4g05QaYyw+j6Pv7OsYEXKJh7bI+LDKKo387Opy/+h0YWMb
WvTqqw8be3s2t53OIPf3t+PIhXwGPoJCyscHd9xfXQ35HQDu+2/eB70Wi0E+
FrQpJCyDiq+RsfVy9s7KVL2wtrManY7YnWYxi46y2BcOmohpGB7l7vrYaWP1
+mTj5ePshy8OXz9rZDMLNpsqPOavHzYB39H59cHJxf7RWe2QwI6g3skVACIe
+b1/XDo8Lx6cocBtZUv4FhwkgNs/zJXrM3OLCox9vdFisTgcNmRog15tMmqJ
BayUYjTiLgwRTyjgIBG37oHC6AX7AB+2RExmUkE6pANkBPhM4tQcuY/c34nK
jh0aubc1J4c00A3W0KhDMqk44PcGg0G1UiW9/0IQE+NLKpIrZUjwLr87PBGZ
W1r2hUZBT2RtDofT0fkQzEVAm4xNmSxmKnW4u7ubSqXi1yH1EAvUa+zzRzDG
ZORh+oP2DoFE2joVgyFI4NrR1tXdhi2NPjwRm2WPSB/1kBV6Z2JlJ5ZYpjLY
wH2QNDAwNMjhcTGWkIUgO7DNg33tVpP67asnv/3NN5FRl1LKlouZEgHNaZbT
Se0DHX8bdGoumpmQW72cGJ2ZcI2HbLNTfhS76Ljd65D6XRKtrP/p5e7t2dbH
9wcf3h+fHae9bo3Xb8kUwaTjw9OLOhTy8LgK0h0cEWp5fIZWbZ4TCB6coMyl
yge7hWqu1gCy0Aq8H6Szuz0qtdbmsAM4NDDObNLBhxBTEIkHaghhSIileLgM
Aj4xD7IJq4AGBLk8BrCTiPkjXAYxB7XzESLD8GA3tb+T3NsO7FiIhMSsGGI+
IWmgEwURCPZ0t0vEIx6EIrVSIhbyeZze3m4+n4soIVdKxiKhqXgslpg22exS
JQZnxGpzAJ3JyQlgZyYe8OdBSAwGR+12ZyIxf3f3/PDgJJ8rr61uWcwOFZTY
aJYolENUCp3NgjoEgmM3t3c+X4DNZi8uLk5OTtrsbr5QRqKNxOa2nr359u3X
P795/8PadprG5PztJ58yuCOTcws6m3N0atplN0THvT63aSzkjEUDP//4dXM/
D8ZZDNK9rbnVxWg+s3xzVv7+w7OdtRiX3l3KrAVdBqdVdXd79OGrZ4XMWnzS
Ffar05vj716UH5/vfPGy/P7NwfVldjJqdXt0G1urxSpxhryy3yhUqrlKpVCr
EQgeAb5TwAccUfsAGfI4sXxlpd44PsuVa3jb/PKKzqAH4+AHwDiL2QiLAuyg
k1BLglYAS8hC8SK8h4gtlfKwFQiYrVomFnPkEmK2G+LnCHFFum/o/pwqra+T
2tsBEDm0QTZxhryLRuqiDnUSIJKIacYAUSEVaJUyKGF/XxeTQQVwMP9wpBC3
IRppRCKAY0FeWN/eKdf3L64uT89P+ALOELlfIhMju8FyzMwmUBPhKmEUXbCs
oxN7ydzF5eM8wvrB4cu3X+ykkkwuz2C05QvVV6/evHz5+snt093d5GHzzO4K
RqaWF9fzN8+/efb2p5OrNy/ffts8u5mZX94/v/zqx1+Xm2dXL155XcbRgJ3L
IpEG2ocpPfAwp03irpqzo+IXr65e3B2dHuXG/EZK/2drC+OZnYWVRATERMV0
23Xv3z5t1NOkgc849LanV/nzg82vXu+/eJx/eVe+OEstLwQnos65xZlUPl09
qOXK+d3M3nZqJ5nP5qvlw7Oz/bPT2slx9fiIuN/j8KjYgE4eVOBhDg4A3NLa
KjoBDgGR2WQyGA2gmwbYQTCJ80Vo9/5ENMIkVhe5f6C5RMJtYQfgsCXubr63
JQLOMIdOIiYTDnQNw64MdAM+bAEci9LPIHWzKL0Mai+pnzjdSkB8fzJNJRch
5qNaCQVcUNhs0dldZrNNHxwPTM/NzM7PRadnxqKTm7t7qUxaKBY8bHtAHSbB
r/JGuDDFs4k4WAn/L5Nrzs+fnMGx3b199uyLXL4SX1jey2QR0nUms0AoXVxa
q1QqiUQCdRNKi9E6k1jyj87oLAGbb8rkisg0DrMrbHUFnMFwYnXdEQihx1Z2
9gw6kd9r1GkEfT2fatUjhdzG0WEeiBwf5HY3E+vLUxaDhEnrjo45f/Pj+8dX
B7FIEFVDJRWi6IsFrPTeKn5EJz348tXJ08vim2f1J5e5k4Odk2ayXFhOpRd3
kyvJzHauSMxi3c3s7KS3geDm3ha0tLRfAYin15f1o8PKwT7QLDcaAO7w5Hht
a1OlUY4I+cQFFLMRUgng4E9AOlgUSOW9txcS66BKiKkBrfPMIBpaCzg0NpuC
gwR8PCaFmMt0P6UQ2NF6Okhdj5hDvVxqP32gc3iwk9oPPt5fW7yffdFaPVvM
x6gYhofBaEHoJlbmtOr0JrXNbVXp1Uh5KcCw30hmc8VqRW3QtHW3Azt/yB0a
9S4uz4GJd89eWKxOLk8UDsdkSpNCbZGrzAq1icbgU+kcsUxNTNMnDYkkQmIe
EWeYy6HDjgYCvkKlHI5Oj8g0ztCU1uZXW9yi+/xpdtrZXFZ8brpcLXj9LqWc
c7CfeX53OjnhuTirri5PuZ3ana25anH76c3h9vpsYjqY3l36+OWzbz+8PD+u
Osz6z37x14O9XQj7Ah5TiRxI7RbyyOuLkcujLPJCPpU4qu8eH6Zq1c10ZoWY
ilwholulnstXiSs4W8mN+ZXE5t56MrdHQJnbBaapQqZ5dlSoFtOFzMbuZnA0
wOVz2Gzi2gdQA2SwKGaT1mTUtLC7byMyGR+2mVhLhEFqYdeiXot9xP31AI5N
5bOIxUboQz0oc4MdD4Z7O4EglzrIHx4c7u+g9LWhATuwD9QjZq9RYOcf4beM
OiWAQx4Zj4Ri0xGb0xQY9YSjo2vb68idqAXTiTnIZrZY2EnvAr6u/g4enxmb
HlvbWIYKfv3xQy5f5PHFHI64d4DOYElFUp1EbqCzRI86+jl8KU8I78qUykUu
t1UgZGGwkcg9MNKJpTmT3WXzBZUmp8bqmV5aR/hERNSYdCLJiMdrRdXQGxRm
vRhFzW1Xl3Ib1fLO9JRvYty1vBgt5jefPj7a2oi/fH7+zYfX//j3375782Qm
OsqhU40aJY9FR8YnPINajM4Z4VCiY673r66e3Ry6LAqrUepyqF1uLfHc6Wqq
up8l7lhsFgvlvUx+h1jtE+Z6e2lhOT4djwbH/U6PVW1QBUd9gZDX43OaLHqZ
XMRiD4/w2VqNAsYbh4ocB+AM9/cwtlb5Jp5BL2C2FhKB2wf1BDw6/DO2RHzj
DqPSgXFQSx6dxL7n3WDXQ1Q6xmDPUOdDcncbm9xLXMEf6iKmGt7P6YVyMml9
LeVErLAY4VaFg0O9CqUkld6xOoynF816swblb56fZsvl6HR8YWV1dXMjmUvh
RbvHCrOk0UrD48Hm8eHd82flSg3pvrOHxB1RaA3O+cXdUuX0p5//dW0z86hj
kMkR9A2RBsjEDBYyBRayR6tTHBzsX9xcW10+uc6ysls4uX118/J9utLopdA+
efTgwaPPxbIRxBk6C6rO5HP6k9vz6HCzUTIetoOJSwsTu9vzLrsONmZve2V5
YTqf2Z6bnUARt5v060vz0xNj46M+pELiVi8ure3BL7Kpzf/8938cCzqsRgVq
qFo9sr4Zr+2nT87r9YN8uZYGgrX7uxeB5l56LZnaWFufn41PuD0WfF4Sua91
bp/FoaOJxICGL5UIwLJWQygAcDqdTKUStYDj319XBeMI208sljUElgFB7LT2
AStcCvO+qKG1sGupJbGqeU87MelisBNS2d/9OezKn0pe3yOQFL+Oksdi0igU
0vAwVSaTkKmDPX2d07OT9eb+XiZ9en19fntbOzjKFIorG5sLq4t72aTTbTMY
1UMk4sbVeqOGYq3S6cMTU27fqESuY7CFhXIzW2jE5zfcvkhXL/VBWy/EU2ey
erx+5Bm9XhsKBZxul9sfQmz3j8dff/nTmw8/P/viu9/84Y8Ts4uftHf2kkgk
Og2jWWMycJhdsajj5rK6tjxRL++GEcD3ltZWYkvzk+srs7VabnkpgQAImDxu
m9Nm9DltSokgPhWpFFPRaLC11Ab6MzruX5yb9jgtdoter5F6PJbp2TBBunqm
VE7X9wtHx7X76RjlciUD4La3l3d3V+PxCZtN17pnkyCUjMjXMJAgGjI1HL5C
IdCqxAatTKMUYYdYyP1+kczW3XzEGkcsCgAiFlxikP+MHQJsC7tWpWthB7oB
r/6OzxkkJIVO0I1JJrAD6eiUnp6OTwb7iHvwh/o7WheP+rraUezQnyAFaqrL
44xEx+OLiaX1ZYjkXi63sZtaWtuEz9zaSwbHQ3gDjIpOp0GgKJYLSJ6InRhk
RqtjO5W1ewIytV6uMakNthERPoPa7R4NjMZ8wUmbM+T1jbI5I1KpPBKJcnlC
vcmp1bvjS6nq4dPbF98+efX9hx//+c3XPyn0drHGqLG7NVbXiEo3FjJ+8+EJ
gkC9sg3s3r68/N1vv9lYm2HQ+iJh72jIC+y2NlddTisij91sgEvRKcXoK6NR
7vUSDyVEHwZDrlDQI5eMWAxahVwMa02c27eoVVpRa52HVHoTqKEBxP37Vijs
7eysTEYCyJXQN7VCCGgUUj4hjEY1WIbEDauP+iUTc1FV4UnwU0Apv1/io/Xw
X1Aewgj/32oE0e7hQyOAu8cOJLo3k72ocRBM4vYH4pkCD1HgCNL1t8GfDNxP
Ge3p/LS36wGxlGjXIw6TymHT6XTwjoJ0mc5mDpqNy8dXMFrr21swKg5vQCRX
KTR6uE3YFX84wBfwUKNBi4mJyRcvXyMj7KYzKIirW7ul+sHi2qYnGIZu8sWy
cCR2cn5TKu9PzSyub+caR9d76dLObvrs7KJarYN1iYV1o9lvdo65AvGDs1fP
vvhhK1PfSBZJLIFUZ33/w9+/+dXPZ3evnz2pP74ub61P5jOL795c/tvvf4Tt
pNO6kRqQWKmUATZrWCYVs5h00tAAh0EbJvUPk7vJA+0USqdcztPoxF6fbXCo
CzRBWVcp5SIhz+tzevwOt8+qNRBXZ4CF1+eYX5jJZnb366XGfrlcyh7ul9eW
5yIhn8tqVElH5CKuUsJXy4gVD9BAQGJm4wgTVpa4A+J+ByDi9XtuclvLNOE9
wF3IpaMhCMBdEAXuHjti2WoW9U+vIIAP9QA48A50I9bj7W8D11rOBHmHuMuP
2k/4VfYwhk1sKhIZDwE7FouRTqdfv33z7NXLs6vLi9vLk8vTzeRuplSIziQC
97MgBBLp2PjETHxarVXBBIpFcqFAVqk2/vXf/nhwfGa2u8KTk6NRYiJfYHxc
roWCaEw2p0yldTi9GoM5lS8jFq1tbSNTRCJjZrPR7rS5/QHIrFhl0pi9juBk
dG5VZ/f0Uen/45efogg+/+LDzfN3F09e3lyWy4XVk2Y2l16CsdzZiLMYfVIR
C0OdSuq5vweW53E7bVazSqEc6CGW00FpIPU/ZNJ7JRKmziAFBZgsstNhbuxX
lpcWvF53vVFBJKfCPEj5o2MBm91kNGndHtt0LLK5sZxObSf3NhMzUZ/bBoGV
3Z/3IK5PiflABxjBJYJxhJDyGehPCCBelIywWgQksBNziPW1ePeR/B5W4rd4
DIJ6TEpr2QR828KUeJ1JYRB3OhCPgQANMfZQ2lo6yWORFueih/vFlcUZr8fu
8zpXlueJOXtjgYXF+IcPX73/6suzq+vDk1PUuMp+/eLxTaZUis4lpCpdLLF4
cHKRzpWR15aWV0USscVmVSl1ghHpzOzC737/7x+/+9Hm9jl9QavbTWYw4PBz
lZLWbOQKhORhent3z0RsunZ4nClWGkdNm9sOw4mKOROfKpTyiI0DlGG7P6Qy
WX/xsL2bRKGyWEPDw2K5amxiOjI5GwxHr0+qsxO+7fV4rbS7sTI9wiFplAK7
RW0yqTCqJyIhaGZ8dmoyOiYSjvR2ttGGeqAwGLEjXKqQPyyTcWH2+vqIax/n
F0dff3jXPG44XFakD1hHd8AVn5tFUqNSyZGJUfARbioYcEMYWSzyxEQAlZRB
J4Obw3RiXXdiMR8ysWoBvCJhQmh96GQ4QPhYAYuskHAkAgaLPkDcU0nrb51O
GeGzWqscG3Xylq5yGINs+oCIMyzhMdDkAjZ7mMygDLZWc2XRSOTBrtZid2IB
Q6sSQre3NxaXl+ZKxBrtlVRqD8esUMmvnly+ePvy+es3dy9fPX72HM5kfXd3
dGo6HJvVOVx23/j49KLFPXZ8/vSLr787PrveTmaUKo1Oa2Kz+Aaj9f2Hb777
+39MFisynRHRrKN3wB0MbkAZ8wUGhz0iFhmtlpfv3q5v71X2D+F5YHhsLlRM
wxfv3x2dHPNG+Eizsfjs3NJyW1f3g/aOicnok7un+NHK2ipfMBKJTsA8E2Mv
MTEdDUA9MBTdDj3R7p/5CKaAJgG/GwLS3vawr7ezr/MBOkcp5UI22YxB0Qid
wRjq728Pj/mrtUI6uzcxOYYM0t75kMKgorLj30ENuFz2X/3VXz54+MkQqY+4
lHZ/DRTM2tpe3UtuPn/5dHN7zWgzYOB1dD7o6W5DSkUFBKfQIIZgCnHVWC6E
BqLn4SVaawHxuAwmg4JIZTarDQbF/fz9ASGPBsQR5VpSSZxOGeob7OmgkwcR
S7uR7ygDf0oQbDKd2ut2GBFUkR8T8Znj42O3293Z3bG8sfLDb74vYEATMpHy
j4bHY5Maq4XC5q6lMpWj8/rpzcXdm1LjIhpfO7m4++Lrb3KlKn9EyGBymSxe
e3ffVHz+/bc/PP/y68Xt3bHZhFCmbJ5dfv/rn6uNg37SEJPHgucRKWQShXov
XYC6AutCpTq/vIJhRKZSevq6dQbt/OJctV5hslndvT08Hu/8/BwJYmSEh+Sb
TifbPvtl16NPPvmbv/jL//5/oEx3PPo72C2MRotR5XNbWquQoaNkUgGFPDDQ
Tzz1Cfgi/vR2fE4Z6savPHjwt/Dq+UIK6XV+aVZvUgM7Lp8VnRpfXV9CRH33
5Rdzc/GlpQUEbRK5v7vrEX65p/dRd8/DSjV/cUk8I/79129aDxxPzM/Epify
hfTZaXNzYwX/mkUnrnf097S3lu4H9GqVLBjyutw25IjBgW4+j4njHBrqAmFx
SDD8nY9+gTGGQ4VmQiSlAm5fd9uDT35BTHZq+wwZ3+EwwCSvrMwUCjtwTS6n
xWjQmIx6j8eDLhoiD4Jxb796s53aCo+PugMeq8vmCcESRg4uTmunJ68//grB
++Lu1euvvl9Y3x2diO2kskfHp2arBdixwCqZuo9Ey9cPPv789yePn27ni1DO
te293/7z76u1feLih0Tg8DqlKqQdKdTP6vQEwhHYnoPjk/D42INHD2FuoVeb
2xu+gBd/1uFyBgKB2dlZqVT813/zPxhMaqGY6e146HaYgz4nagSGNBxyZ9sn
vV2fDfYRD6NsrWoLr36fEewoT+iK1mkHYj3bDuJZh6hN6fRmZCIUCLrj87G1
zSWr3eTy2C0249Nnt43D/dGxEGLLkye3xGTRgBt/ym4zwiuiSiZTW82j+rOX
j1++ufv1b3969e5lpVFduJ82jPF29/xpdGoCIZ3NoROXATDOfvm3EE2oRzKd
ypWK+WKOmBQ32NPd/YBK7cPBQAm1SkEhs5lPbcWnxpbnYiG/A77o+upUp5IP
DvTAJu3tblxdHf3xj78/Pa3NzIQRVYqFNIpCKrk7OTlpMBhoNEooHES+npmf
Do76UAJIlAGxQnh8dXz6+HJ8NrZTyF+/fPXiq68//Pjz2fVjiN50Ih6bmXr+
8tn1zdNcsbaTzm+mc3MbW4dXN68/fnP2+Knd4zfbHeORKFRoYjIym4jFZqJj
k+NOb2Byei5TKE8nFhwer85kjs1MI6VDtGFapqYnpXIJhNgX8I+Nje3t7aAD
BUJue8eDXD7ltCK76aGKbpeVz6Hj4/d0fg7lIZbIIPUQj6GkD5kNSlQTjH+o
DcSHSR2CyPDQpQwKLMfTJ1cwkMGQx2oz6PRKu8PE5ND4Qja21XoJqAkEfI1W
IZEK7A6zXEFMqysU01fXp8gRm1srxP7tWbmWX9tewVDfzaZtHs/C2lr18PDZ
q9dLa6s0+rDOoF9eXYE5j0xN+kdD2+n0szfg8zuYB6GIBwXG+IEI42jj0+Mb
q3MLicnlhWnETKNOCQdyeFB79vyx22UbGw/+/g+/LZYyP/70cWd3FcChoVbC
aM0lpsfCoaGBQXz19/fS6FShGHZ+ZHJqbHNn2eE25Sqp7czWwtZifG3u+Ob8
+sXddi771bffzi7O05gMGIyl5cT8Yvzm6XOUv6Pz28bpdaa2P7+1M7W4lFhd
lygRyzxuj29+fh7c0epVkWg4EPLCriQWV8r1A8hmLJ6wOl2tD7u6vjIWCYN0
CJViqUhv1DmdoJ4PtsFmN3762d/m8kk9hqNMpFJKzSadw2pARUE+hUZJhGwg
iLoA9mFHp5YoZUIqeolNl4v4zGGS1aS9PGvubq2ury3CcrQWNAb7HE4zjUFC
y+T3tvfWeTwOih2TRWtr/xz04Y+wZ+OT9f3SwuLs+sYSZHYqNj6TmEQbmxyd
XpgGama3dyOVObq6uXn27OMPP4xPTnkCwdPLK4TDnUym3Ghc3j2/ffm6eXmN
gMzjs5QKcbNZWVychttESET9QjLdWl9w2Q06rQKHB9+It33y6d+uri3+xx//
5e//4ceLy6bRpIrHx6NRP2wPosF0bILP4/zFf/vvA339Tqd9PBICNaZmInaH
gVgrJhZMLE8Fxj2b6bW9Ugrw5ferK7tb+Wq5Z6gPtWl5bb5cyZWrhWJ1//zm
2Q//8PvLZ6+vXrzaLpSAnUil6SOTaUwWBGh2dhq8JkayywxvYHE4oZaQ3Osn
z2oHh0gcbq8nBU9bK6NBM1fWlp1uB8aSVColLsp3PSLmUQx2wyr8f6Tn3dg=

      "], {{0, 150.}, {148., 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{72, 72}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://www.eol.org/pages/1049602", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset050/c65/\
c65be400e89e425df12f27967738d99d_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{148., 150.},
    PlotRange->{{0, 148.}, {0, 150.}}], ",", "\<\"Adelie penguin\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8600892735198603`*^9, 3.8600893285985746`*^9}, 
   3.8600893918096347`*^9, 3.8600894304194984`*^9, 3.860089468403945*^9, 
   3.860133749614105*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"f84dc23b-34f8-4bd5-a227-98f090251423"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxsvQeYG9d57+1rsW3vHdt738XuAtiCXfSORe8d2M5lJ2XJRbbiIkuWaImU
KFEURVLsvXeqF9uxkzhOc3xTnS/lSxznfrlJHCex8/3PeYFZkIqfV/MczAwG
mN/5v+0MuG5ObnMufPYzn/nMrk3YOBOfU+7cmXjSVYwXnq27lhe3zs8Zt+6e
X5zfKUs+hp0H8N92/MfGm1cXYcsr8/MLifm5+Mry/Jaty1u3b17dtrSybWnL
thVmW5c2ry6sblnaum1l67blbdtXtu9Y3bFzC8Y4BMMA52/euohz2NVW52Er
GGxeWFqZX1yeW1hOJuYi0ZgvFHZH4oF4Kjw3H2O2GIfFE6FoLJBIBlNzYVgy
FfIHXCazWqufsjv1eEssHowlwolUdG4uObeQml+cm19ZWNnMDBefX0zS1ZLz
UVwNN7K4lMLnMsNHL6Vwztwy3pXEeH4hzgxvWUgk52JkuPL8/HwqlUqkkrFE
PBILw6LxGLcIxoGQ1xdwe/0uh2t21m61zJoNVr3JZjRbTSaL0ThrMtnMVpsF
h/DRC4tJfIdYPJRKRpeX5gAESMGH2dblLduXiRtYMdTbljnSzeC5fcdmesmA
b12E4QaXOL2lzXMEE8buYikRS4bCEU8s7scgtRBb2Ty/vDKH/RiDZyjspaNg
7nJb1JrpickRlWbc6TZifzIVSc3HQQAGFIvLC7gmPghfHi9xiIlhgU0NLojb
WeQMcU4yFQUrnBCbYwOgY9hTEWKIOaJpisZDsVgkHo8DYDgaCUWC4WgoEosS
T4zBk5B6fE6n22F32gCQIbUYYWa7ZdZlc3nYobn5OD4UV4tGwzAIAEyAdHVL
2kiBGEBvMOIMsDCIlhvDiC8PW+aSWOSWzTM1F4VBlrBEMry4lISAF1dS+PR4
IhyO+f0hdyDo9AccTpdZrZmSSIfFI/1jskGtYcbnd0K9mAX23rkI+DOw8/HU
XIwJaj4Zn2cawyfSN0zP4ALuKxKK+qKJIN7FLBnGTsw1Mcd7iWc0FYHFElGu
SaZGAMQAhp1k4Yg/GPb5Al53wOPxeYEOSB0uOwxjbPESSGEkzkQiBqQwfEkA
gXJgkBDZ0nKCveTfFhyY9uDFTNjwrCQ/Ie1WxJOEhJe4NaI6zwjEgILRmI/h
jStbFnAdNpXxEHgGI174NaQIqharVj4tA89hcY9COe50WYMhD84hMsypKVZA
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
nL146fDJKy8fu/bto9fsySfwrXDX2uCaa2eJcw9pT4CZBpXJOICpCu2gtxCK
7Llgd5eVztLMwzuJJIghvDCL7IHpI+kZoa+BKcYePtE7oWqoFDEB4QIDfWAL
YKr82zM84UG7FMG0YYIAXG0L9fT01NeW1VWXlJXlAWlBYQ5ce1POY0QSWxIt
x7uuoHATLL9gY14hM5zMeBbnFJXmIeSWlReCZ1NTdUN9NfrQzhaRambixW+/
cO3atZu37tx+8N6x8zcPHL9+8Ozdpc/vnfFsASV8Mcwy6VAZ2s3oBXeTZQLm
48zN2Z0yJeNeOJaduC9lcDuokhpBQJsVYymWZs9Umjyaguguc3wPWn4mTv5e
mhG4A51MYZCRR7gIbiZ9AiZ8nH0oZMm3j/CEyxs9icERychAV3dTVVVZbmlp
blFhDlgVFefCSIcMXT4GGwgm9nPmDCm2NOb7N1VWFCNmiETl4NnSWN3RKupo
roMyb9y4ce7S1Wu37584f/3I2ev7j1w8cOrmV146jjoNt8zQZWCSZcOkMWEk
YUAGKv82PtgBmEBKY9y+No1udwZgWqs05rZTnSZPWn0ozgieq+QXzPostsUH
ZU7YTRrAxcGTXmI/mGuMlpGhbtX4UFdTRVXZppKSHPBEMEQkxJYvF8O71+cX
rC8s3MCOFm0sLt6ELV5mj0sK11dX5DfVl9fXljTUlbJ1kqaqrrY6tEhP7Nl6
//7bFy7fuHLz7ltnr564dOfAW1f2H7m89/AVc+xzcHZd6HGBG7m2cO9Z97Uj
A22nKssoZ5Fu03uI88MMHzE6BxrjMuMaI9UFtsEIGk0fjekcNgjtJIAsbIZ2
KvzMGGE/T23uuGRsZHKka6S7UVSeU1ORW1WeV1VeUF6SC3T5+etQLBUwfa4H
tNLSTTiKqqmiNIdqp5rKAmxBko0r8vH2uqr82sq8xrri+prC1sbySWnf1pXY
5Qsn7927d+X6nQtXb568cOPs1QcHj1/e+/q5A8dvhbd+TelDcn9cE9gtxEyW
g4K76fsLQZ5Ikj3CU5U5gfiouJGWVL6dSm96f7ap/btwiJ3m2zbj25Zx3h1E
ia4sXFOZBf9TtpP7O3huMQaWJpT6kYEe2UAbxCmqyAON6vIcVEEVJZuACNAq
y3IBjaSI0FrCayScBiWDHtBVlGyoLctpqilCsVResgnlE8DiXbVVhehY3Xb9
xXPH3n3n7oMH9+7cvX/+yo0T56++efrKq8fOw+UPnrq95al9Ss8WpFSBj6AN
ComajJwEqp9SLPNE3BphYawCzMCTsQU03870vXPtpZnz/Wnya8EwzVOZ9SnZ
WqVPET4oo1v2di1irCssFov7Wmv7myva60vrKnLQB9VX5qNiZ6BKc8CnsnQj
NIkx8/T89UX5j5UXr68q3oCTW+tLRNX5VSXra8s3ASmdjwgMrwdMzAIGqhnZ
tWvn3n/v/ttv379778HFazdPXrxy+NTFw6evQKIvH7v61AtHUX5oQ2skBT0Q
w08DXHvp2w4DTIqlWUULC6SCfsgfKcYK5xAfisbpEBrcLoTH7HCaLooy88V5
7uCXTfOknShNpxTq/q6W0S7RaEdNZ31JZ2Npm6ikvbGsoZqrtCwXiLAtzPss
QEGr5cUbgQuyhCarSzcAI7aNNQUMZgkPAqWbcCZTaVUhR1qkVU2eOnn0vfcf
vPP2/Vu3bl2+fuPC1RsnL1x788zVA0cv7Dt6ce+bl+yJPVSBCCaQzGZLqhN0
8um4KpxPFyEhCXISchbx0WRC6NqsZXhme4ri09cJEMy05hlbL1tK0tjDw8OD
gx31sp7GqYHmlur8puq89vri1rrCptrC0sLPlhavY25bWVBXVQjRttSV1FcW
lhWtA2rm4+WbQBI8RZW5OJ8CLxhCk1AmkAIm4nA8Frx+4zLE+e47D8AT9dLZ
S1fB8+SlmwePX3zl2MXXTt4Mbv6Swr36aTgCunSxx3VIrIQ4qRQmwrsNYwqG
NJB72FiVOU2ZKRqz48mnP07Idzgn27VZHKaUFNqdEeoOgqn0bkbzrjY5x4YH
uhsrpb2NAy2VdWWbgKihMqejoaS1rhiUAI1FyLKctrrS/taa9roSEXy5BHkH
Es0BVTq/uSa/viqvua4ICQjwQbW6orCysrC8rLC2plyrmTly9BB4vs31efvO
veu3752+cOXa3fcPnbz88tELr5+5ufM39ik8K9p0ybc948vbNH5eovi2wjIw
01iUGWjspXcbvD5DjPu+jxkkNJPZKcAU8n529ZXtGmyyvFuzBZmdv0iZmaOM
J66s8a5YvPEpubK7ram3pUbcLupurGirL0OWaa4pbKktaq4qgOODD9RYV5pT
XbiuG9EAxCpym2uLq8o2lhevqyh6DCEUqm6pLQB8Nq4rqea1AaystADlFmpR
i1l/5swpJKO7d2/fvX/v2vWbV2/eAc9jZy4dPXsNWenV45effumoxruawbWV
zTijtFXlfYhktj4fCg48ihIWDcuzDCbem52FhZipycp32fKmD8VWMDQaCu8W
fAGgm87smXFvY8YOrZ2p9S5pLW7x8GBvm6i3tbq5uggwG6sLIbnW2pKm6oKG
yjzwAbfi/M9UFq9rrMhDwmoo3VBdvL6uHBEgF57eJirqEBX3NlcgPjCeVfko
CUQ1xeiwwJNtK0tqqsvqG2qeeuqLt2/fRj1/++4d8Lxw5frZS9eOnLpw/MLN
A0fPvfzmmRffPG9L7JlxbeYw03eRkd/WR/T5qDiz3Dnr/G2CzJRrQS99JuBM
Z9Egm3avPkKJG/syazAzPAl+2jxbDJ55jcE8Lhke6Kwf7WtubyiHrlDkYAtc
CJUgTLm7omQ9wKKU6mupFpVugr+DG/P3so2tNQU9DcVdDaXwdJaheOaCszc3
VMHf0brW1pZW15RVVpUuLy9fo//duH7p2vXT5y+duXjlyp37x85dffXYuZcO
nURtH9/xVblzUfBuDnA7DQhvtnrJ6HbW7jRNI2suPKTzbcKZD50MLA8rjZ3v
eUiljyhWwSdiOi1dessWnW+zwRmVSqVDfa39HaKOxgrupKg8Cyl3s8BYliOq
LiDFYgvCKE0ROSuLWNFejsxemTvcXjPcWt1YlY9yFIJENYXqFIY0VFtVXFNT
VF9fIaqvKirOszsdZ8+fO3fh/PnLl85dunz6/IWLV6/dvPf2kTMXD526sP+N
k/vePDe355lp1xIFujRP8nfPFkR7mMq3CsMAmUvJaKySQdW0h85fexfbs40M
lD6FHedsF3jSlngKe7JPhnppIPdsmc4cxU6la1nvSk2rjTPTE2PDHb1ttYiH
yMhQFLag2lBbUlddVMV0WMg6nTJW25cVbUD1jpoT+b2Kl/c41NdU3oWmsq4E
ANGWIvsgWoJqVVURrKampK6urLlFVF1TPqOcfuPNw9duwdMvo14C0otXr1y8
fv2tcxdRiL58+MSLh08ld3xN4VxSZVyMyYwzQZ4inoSUvczAzKaaAbgGUymA
cjOb8cCdV2lMszDjEl4+agJVNhH8JQ2wU86NX2oVPLXeFZ3VNz09LR3tH+5v
6e9uQFODLoZX7HnV1cWVZflIzYh+vNPJgz5rSpHTcyBRSJFF16rClrqyVlFp
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
RR7VoSkESxdIFDMphWWiAYt4JmbgSRpjSCmbm9I8ZelIGyKPxhZjMjYLRpwT
hE1awpMcJmzaHFKZ3aOjYhRLhhnJjKTfrJnSqcZlYwNjY/1TkxJ4PXi2tTaA
J5rQ1jYIlTk+6+6R3KtL2Y9nqotRKTXVl3e0itqaq9tbqyRDLfue2fN7H13+
7p1jdrW4rGhdfsFGXos+ti5nPQxJn0m0oAA8UY6Cp0KlfGn/PlSh0Oe9B3fP
Xrz0On8Sh2YzvLRbrHaRq3IyQvETITUy/+X7x0wCPdJVRMjUlIzGMwF2Ldcw
iUYnTZEMoowZQms6xCFTME2Si5l5NxmHKfCcMgaUJtfM9JRRNWHVTI72tkyO
9oEnVIpGXjraj9qpv78dHX1ziwhW31Bd31AJvPWiKvrNDCQKsOiMgBSZHX1W
Z2v1+EjnSsL+vbdP/+n3rx94ZqeoPKeiFCXrRvDclLs+J28Dinzu72x9FSmp
vlE0IB7++rPfvH7j8ocfvYuqnhaXntv/2nMvH3Ynt0h03nSzkymNsqugtXyU
0RXRpjFFBiEO8BiLl8FsngQzbUyobADIaTOHmJkigtcj+whIAXOCH8V42hzW
Wv1Tk+Pj4h6bTi4b7JAMdkKrk9IB8ERtD6SAiVja3l4PcbZ3QKgi1JydKPhb
6nnJVASwiJxAiuDZ3900Mtg2LevbMuf54YdX/ur37n1w7ZBG1lNbxtbz6Vkz
kEKf4AmSVNzW1FW3dnY88aUnz104C2dH4XTp2nWkpOdfef2Zl163RzdDHuSk
qIhGjeERQ+jTURHQxgyBMcQEXRCRYUTLxqPagFjrHdX7aTyi88FGtb5RtZfq
zEf0SQDZwBAAQ/a5ML6foeNHmXQNISLPCPP9abamiGbWr9OqWXM0MTwp7tYr
ZOiSxoa7JCM98okRiYQt5Y2MdHd3N0Oo2IrFPQMoptrrm5trEDbRbCIgIBk1
Nlb19zSPDnWKB1pH+pu/8dSO3/no2t/80Xt/9+N39z69VVS2rrqCrUWjXQVM
Wg2gahZlLXP55oYt21bfOnHsxq3ryEenLlyAv3/rwBtffv4VpQN+yjRGIZSY
wBgoHlHF+iBMYDWm82M7osE2MKrNEOb7AVms8Y9ovLB0cs+CmW1yU2jKGBR4
wmT6oFQXgGHwEPnMgM5Rmj1mo8lmUNBfnlGND02N9Q/0towOdw0PdyMrobUf
l/QPDrb39rZCqF1dTSCMGgAv0a2LeJkEfba01JK/jw13wN8/t2P+tz++9Q9/
/r1/+NMPP7pxeHJIVFfFfkXGJYrtJtRL6Tq2spx3SaL5xbkjx968fffW2++/
d/zsWRY/X3vzya+/NGkGkLTGGBkMoENDIDu/U8ZHDhJSBrcIspUsHWaZmwM+
z2KA7E+T0QcnDSE2NvjxkhkGBj+JMG063zgnCYNuGWcjC7BrcUDgafCrrT6V
SiWXDPhnNYZpMaIofL+/pxVSBE+YcnoMbKfGh4bAaqx3cnIYtMfE3cS2r7ul
vb2uubmqr6+lt6txoKdxoEtk0U187amdv/Xxnb/5398Bz3/684+f3hmqLd9Q
XMye4/NF6Zxi/iAeyqTOS9RQk5yLHX3ryLUbV6/duH7y7Dn4+7dfO7Ln6Rdk
Bh/KEgp6BArxjV6CDIcT5OYXjPZT9gd/GE5mbs506yXfl2j9MJnWD1ZjWg9C
NF4yaPgsGHZq2BY7J/SwILEFTNi4MUBjyJjYMjOySZk2ONVqrXZa5jLKvaZp
p2EG7Xt3RyNYQYEDAx0apQz6RDjFFjCBtLezAU06vBuCRHGFhqi1qQrbjpYa
8Jwc7VHLhxdinrdvn/2LH3/8//317/zsTz64fvJb/e3VZWVsIQVVU0FRbmFx
HvpN1ssXsx+e1Yqq5heT8PfrN6/REhNa+BcOHN7xpWclOo/MGGDqyoAiaOTC
fGeIeGbtoXPWYqZY7ckyvPTJtF4I7xGGMs6NhMpg6tnn0k6BGwlYOB8DzAVd
AX40rnVotPpZozrq1MWdWuPMGLTa39XS1d4w1N8hGekDMeloL7pR9KQYI5ZO
yfrHx3rQnI4MdaJAwmmQbk9HfVdb3WBvy5RscELSb1KPnzm6/2//4of/+o8/
/tmffPgHn1zWTg+UFm0oYs8+ciBRtEj8gV0xQii20GdqPn7i1PH7b99DPjpx
5uwbx048/8obK098dUzrlhqAyJetwHSc5Np7ZKfAUxAkbWGASTthUB3DQgyh
N2OAiGGb3smLJdYuZRJ9thSZGimi6n1pvPwbThm8kzMqzcx4yKYOzyrNSqlq
cljc39nZVg9fHhnqRrREy4NSX6uUwOuBVDE1rJoeAd5JaV9Hay0qT3Tu4Nne
XI1mE9uRwY6VVODy2cN/8Dvv/9Pf/v4//eV3fvL9G6rJ3pLC9WipkIxQfLKf
iPClABiqWejTH/ScPH2Cxc933zl28tSBQ2+CZ3L7F0bUTvDkFszSHjNiJeAi
E4gJuUk4IfuQIEIY8SFlSnUIp0KpGWKWTlJR3lLxMpWfT9jJMN3cAnKjT67U
6DUzdt2UQ8v+vhwSiniwq7W1rrOzEUhHh3vg3dPS/glJ7/BAOzKRbLQbzGcm
ocNedKkdjeyX9jCUoN3tIlZrjQ9o5GNfenz1B5/c+dlf/ejnf/5d6FMn76up
YL/C5X+YhS2M0KodoiiyUk1thdmiP3Hq2N37t95558GVa1dffO3Qsy+/7pvf
LlY5JAagEKTlYe2nzougN6pxw0bULrHKSb6ME7BFPzWC/WnzDquw9cPHhzUe
GE4gtmxSND4WJyEtrUdI3wBL8Tk9j9y1uYXSA65GisAwugLN+KTeozFajVpV
KmS3a2QmlRSIkIAAE8ETiQlIoc/R/tbh/hZodVTcgTZ/YqTbrB1XTQ2ZlDKg
wzmoPxtFFe0IoZ2NOIqLJEOOt97Y+9d/8v2//uP3//S3b9t0Y+yfdpazJyZw
eSBlKi3MZ/GznPFUKKcOH3n9nffu37hx7er1a99+9fVn9r1mCS4OK+0ASGS4
z7pGOEYQIKTgOcqPZknRDezY8pNJt6x8YjC1aaESSQmfmnRu4nJdC57YyY8i
0ko1Hjo/+13YCWMnGNbePqFz68wOlKBBu95rmjLxvwOP2MhTTONgXztiIxI6
Eg1iJmAO9TXLR3vZX6BSyTyzGt0M+Pegkke91FBXjhTf01oHMYcceo955sDz
X/nLH3/n7/7koz/70T2PdaK6YkNpKZydxU9WghYU5Oez30Miv6OHlcpGXn/j
VcTP8+fPXr7K+qOv731F70mCVbaPk5FOmFCz4mq21695t96fruG1vkyNGqD8
nuaW4UlKS0+Tmu9Uu2FSjRtImUdofAJkpmeNB/upNqA6AUfHtS6V0YESNOQ0
LgQtcPmJoQ4IDJUkUjZKd8DEoK+rHtGShYKBFp9NY1bLAA1IwRM1fFe7qLMT
Wb6GhdzBNujWph1P+MwnDj3/0z/+7t//2Xf/8Devhd1KUeUm8OSP45lE8/j/
aNm/qVkkHul/7fVXED/PnTtz9vw58Hzqmb0qe4TdhT6date2nCcPAp6RLHE+
EkuZnrVe0mTWGORZVUBOzWKs2rsmvwwfGBFDGSBwyxz1cs5Amua/BlnrlOts
dofLb9MlPHq9fHhC3CnubUZ+QbRERTTY1wpDjdTbKYI4NdNi5eSgZKgFTeXk
GMv1lOgnZYMosdpb6kBeJu5Qj/d/++tPfvL2pT//w4//4vffgUVdysaqXPYv
PorzNhVwnvynUXD88sqSltYG8Dzw2v6r16+cPn3y6LHj8PfPPf3cONxKFxAq
cCYhUqOG9Yw8ErrJr8l4qPQiArCgyiPqMAutrux6iRI9guFalcWFR1uKjRAb
DNzIgE6IMNzTSbc+KUVOfToCM1dSu8bVVrPNiRYp5TM69PJpSe8ULzJRYQIU
q4U6G/jfjm4Dz4nRLpm4bVrSjSYIIVQ60oV0j9PAfEzc29PZhGTksalnpD2f
3z73W5/c+v4HV3/48WU0Sug620UFNTUl/CFpDq+acoEUUbSkrLi+oUYiHX75
wEvnL545derUgdcPfWPvS1s+95VRpQPc0plF5eFjbpkxR+TKMg9DmsUzez9t
YUNKl5TPCPk1FEjBkMXJNBaSn4d40gnCmAaCnhlkHhnwRqCe1Dqsdo/bqoW/
u00K9lc60bC3s8U3+DtUivCI4Anrbq9tb64c7WtUyfp00yNmDfu/lQFkFKid
/C8poV6SDLZb9ZMQ+axu/Ftf233stWd+892zf/9nnzy4+NpYd01tFVvPp989
0m90i4rY8/3qmnKJVPzKgZcuXT536szpF19+5elv7g0v7xDP2MZ4Zmcezb2S
IFBmz5Yc4RK4ZZtAckjpYBmKz4UkywSYxARzkQ0zW6U4gdgyqlT88wKAIKel
q7Kb7d5E0B1z6cNOg0UzDn3CbRE5ERiR0/tZY87+eax4qA0Di0aKztTv1PH1
50EgRVyFejELBqUUutUp0Pc3G5WjTvPkzmX/29feQH7/g48vGKe6RdUFxBMk
6Ye1hYWF2KJkko2PvvzKi2fOnT50+I0X9u//4tefmw3NjShn8SXTxSSHSapI
l0lZPLOLdgGjwDaToTzEE5bONSpmYyoXxthyjG44Bdx2TOWUcr1x73ZljjKS
5OBp3WaNiTnOV+htXod5IWx3GqaNSolc0oeEDnQABVyjQ+1Q5mB/MyssFaMo
AFCmOkwKVPioi5QTQyAJhrOGKYhWMTGA+Dk12okQOj3WEXEqLh9/4S9+dOfv
f/LeatwEnuzf3BUVUJfEszxLSSjpJ6ekLx/Yj5bztdcPPvP8t3c//YzaERxR
20c1LlIjhEQoGB/u0Rm/fsjfKWayEvSho4TXCYkS51GlU+BJbIkq0AkGpDRI
p3geBITcJOhZ8He6CKZjUmMNB9xxr8VukIMn+IAhkCLXQKtIOhgDJl5iO9zT
pBgf1Kmk7Hno5DDgI0lpZ0b8dm1fR+1IfzMMQUM20DLUVrkctdy9+Orf/vG7
//zT7144+lyTiD1lBkMKoXyVPg94RfXVas3M/lf2HX3ryEuvvPwbzz2/sOsL
YrUVxTz6I6owxzIwWd2eKTtHeanJM5FzUGFHYCRuLA1xI4a0nw/SPLmb+x4m
+T8YA6j2CP4u5CYxn68hfKLCPqx0jCgcuAgZ9ssU5ng4kAo6XMYZyA88YWgb
B3qaUSaRR89MDsGp5eNDrF2aQH80BObo1nUzYx6ralY3iVQF7P29jU0Npb3t
NeKeetV4z54V/90LB//hz7/zXz///aunXmyuZw/u4e9I64ifgIn+CPVSY1Ot
yax94dvPv/7GIQTPr35rr39+q1hhhTjTMHlNKOSmjNLYlmN0DM04YYMKZnQo
24Q9pFXgBU9MEBEQ0AmWnXfAk5iPcK8HOjAUZ+aLujMBZvq0GaPNOpsIOhM+
q3FmRDk+gJJppK9NOtIDr8d4bKBtoLN+sLcJvRJbbRZ3gic44yUcXzM1jAjQ
117X2VqNYrWxvqS/s66/vVol6Ur6tEf3f+X//D8/+I+f/ejW+Ve6WsrZPzou
QZmU/sEz+4cP5UVNzXUOp+W555/d/8rL397/8tPPPo/gic5orZ3EN0/rk+oi
JwlyYMYGY0gBc9oxMMOMCNNpVE0RyQx/xpyumQ0TACf0D/VE6USvIi92Ct8k
+73ZJHlo4hOksGh1JqfVGPGYfFalXj4y0tuETD052gOhDnU3qiYG5eiP+lGI
iiBCxEx4OmImWviuthrsH+ljlXxHS1VNZUFLQxnykWayT9JTa5kZOHXwG//y
dz/65T/+wb3LB+srN9TVsJTE/vJqzkae39nT0ta2Bn/A/a0Xnnv5wCvg+YWv
Pauyh3Dv2TEweywIb5C72zB3ZGJF/v5IjUQy7pNb+6dnaUtM1pw6k8TJFyg2
0idmWDEfp88aznyx7OlgbLVugadax/68tsuktKmlVvU4OkrZYAdAsWZ8uGNy
pIvxHGDQkIMQVBFCIVFWBvQ1QZa8dWqtqchlDzpbqrqaKiwqicc4Dp7f+Nzc
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
L/3002/87LP3fv7DBwj2f/n7v/jV59/69DvvfvvDtx+8+7XD4yO5xlBU3ZJX
3ZJZ2lje3FfVNljV3l/d1p1bVp1bUtXaPVhS31rW3NXQM9LcP17Z1ouXhiYX
h8an94RC2u20OewW2qZUqwwmpBbKRFlNNGVzOUw0DZ+DMNeYTADA5nDC+VBO
J2LcG4w4HdTJcfz85vHhcQLVbjxxcHJyAoSRx9ElwAswo7EDX4h8RBiKJTAE
STN/BLoSHXB6sB/wMxhLMG4fkppUpYNr0hgti6trKWmpiHTQsiifzOydep1M
L5mcpepqVtpTWWlPlubfKMy9lp76BJll+kryTkY3HsvJeDqd3Ovk8bTrf5Sb
9VRh9qWmmpze1hLx1lTEo7n3TODBW89++I27n3781R9+5y1koj/98Yf//c9+
8Pu/+umvP//o04/efvm509fu35XL5XWNbfVtvSBbS+9YY+8YCFnLGSprbC+o
rMstqkjPL0rLL8ksKq9saq/v6Kluba9oaOL09omlooNEmLGbPF7QibHRZsZB
6406s9VitCG0tYhui90OZuosiFG30UrhqcPnc3j8Nod7ZXHqGDbnIBw/CKGm
8Pu9x8fHt569DfSIAjiR8b1IUshWqNC1CHOHDwsmh9cKZfBHIarByJHTAzWI
6CknhFelt8L/zy6tXUtN+89/SCZKYvGcHO0a7GoEgKhu2htLu1tLhzjVbfX5
I711nJay9Gv/pTDp0rNSHi8vvFGcfbmmNLW25EZdacrEYMP+5riYO7+3MbU0
N7S9Ps2Ypc8ce7751ec+fvelH3/vnd/+7Nu/+eH7f/njjz7/8I33Xr7pgR9d
mBnoIDPjtrT3Flc1FVQ2VDZ3lzZ1lbf2N/ZM1HUNN3QOVjR2lFQ3VjQ0F1RU
Z+UXFZSV9A10b24tyaU7sRBzfOCJhJh43Ov321FtuVwOf9Cn0mkNFrMvFETg
yzQqsRIungawVoaGJpgoxmilJ0b7luYnFufGZ2dHeXuboGvA73Y4wDkXZXcg
xSMxYTxMjMds96OGQgEFSC1IUg63CSHhCUQPzjz+GAA3Uk7UViiUsL64ovrS
tesZWZml5SX5Bdk4yvz0AIrN+fGuuTHOzvKIgr+olaztb04qRauDnNrxwRZU
9/CcKCpnJnomhzt4mzPC3Vkpb14lWRdxF6fGuirKsr7ylf/0xBN/UJB3HRvr
5Vw/o3r1dvR733jxZx+88qN3n//2y4cP7kTcst3xltrJttbp3t76svKnHns8
JSUtIzO3vKq+qralvKoRj60dPX2DY0OjUwgxrYlaWN0Ym5oUSwUGg2JuZmB9
eVwp2zqKu48PfYcxdyzsstsMDG2GcIKoFgrC6gCkKoNOolIpdDq5WgVdhejp
TFaRcL+9uaG6oljC3wm5Kb/DjGYzaaKRQCgUCEXC/mDAYLHqLTaghIxvtbsw
KMn8dYBXoQn+cASGCtYKhEfgI6k1tbWTeXwuXyooKszMTO8f6B4c6J4a79vf
mjMod7SSDYt69yhkifqMQbdBLt7a2ZiRi7c312bHhntGR3vHRgemJ4YXZseG
hjoHBtr7+tqbmqpqakqKi3LLK4oqKosbG6ob68pRva7MDBqFq2dO+edvPfO3
33npbz66+5cPnnvVqxUNtqy31c431sw2V/WW5zfmZdRkpXVXVfTX1Sz2d2+M
DQlW5jUiAY/HW9/e29zdn1teG52aXVhbm5qZbGltqKos4bQ3SITbS9ODHlpx
GLSuTPW5ac3ZcRSQWm0WvdkE9wSuKjRawAiBpe0MUIKcCvkCuUzSXF+ztTRv
kAssKuGd0+jdmweAN+B1eD12q8Wg02ko2urx+pHsAK8v4D06SrhdzJ3bp/fv
3UIseP0+YPv8vbtqraa6tiYrJzM1ncyGBBtfVJzX0d40Pze5tTYLmtl0fJ10
00crL47c58cBuWRvYWFie2NxcXESMHK62hqaaqtrK3JzMgoLcoBec0tNd0/7
6NjA5NTI5tbK1uaKUMQVCvZ4vE2tUpDw0+defUi18ecP7vzr51//5x+89o/f
uffJsVXdVynuqPCvT3w9YPqa13DbKLpllLzg0KK94jbi8a5LZ+WvVpfk1dfX
dnZxGlvbGlo7gCoAicSiRrNhcXFeKODOTY9MDrbzNiYRUBLuUjTI0FadViOn
QS4aNaVZpVFLZNLt3S2JTMxGPZ8vlEgkKwvzw33Yb9XeyrSSu/b+Wy/dPPAr
RWSAwn4mEfM/e/scIhCKBE9OE06X7dbNw4iXup1wOg0ivHr37p2bz1ysb66V
FOeXluSXFeeBQpUVxW2tDeNjgxsbC5y22pHeFvHe4sJ4J3dt/BwVgMcikXDb
OpqbO1r6B/uaW5tgVotLi0rKCqvrylua66anh3d2lrjcVY1GoNeLv2gaMUVp
ZJJtqXhLLd1x6Pkfv3z69hHz1x/c/5fP3vm/n7/1bz947Ve3mA8d3NhyZ2Cu
7QXpwvtOyY+OzJ8ljJ8emL4T0n3oV33TLfvjiP7CxJvtrmuqK93aXD2/OIOZ
gb7de+llQLrJ5fKlUkSxSqNcXJpdXZ0N+eivvvrcH7/z8vmB1yzfs2nFjFUT
iwYom0mulGn1Go1OLVUqdCYjZXOo1Fq8U8Df31xZWJkdX5wYXp0ZdVg0e5vL
7U01fO7G3edvadQynV6FQcEejCYNZdacxtx2LVexN3frLHFxcT442J+Tm1FW
WlBbVTzU305+fJ2f0dpSP5S8oNbZWrO5NNHTWjHUVccYJSoZoWVfP6e4vKy0
sqK8ugpIllWUgpmdnJb1jQUgKRBsCnirwE0q3tRrBSaD2KATmo1SpXwPKUMq
3DBr+VrhimZn+swm+e1Hr/+/X37r337+/t9/68Xfv3X4T+8c/q83wp/F5K9J
J14SDL8iGEB7XTp2XzD8hnzmDfXic8Lx1aprvZUZiGkHbUYWPjhM3HvxheX1
tYGRUfgleCGkb6lSxReLdrk7y0tzk2P9y/Nj/K152fYCb3VStLcSC3sQoQ6H
2W4nmCjVMgtldDh9VspBO+BaMT4eK2XX68wikWR9Y2tkdLyju6eorLy4tKS8
siw7N6u+sW5oZHh7dwcGFhT12/Uxr82gUZaWFmdmpRYVkh8WdbTWFBZmpqdf
KS7IBJJYgzYx3NtaV9ZeX4L+8PeWsU1vX2dhcV5FVTkSVmVVKWCcmR3d3F7Y
21uRy/cUsl3gptUKsaxR8dTKfal0R63m07ROpxOZDBLAS1sUVr2QuzEx3d+g
21946YB5/074+/eiv3vvuX/86M4/f3DxD29F//dr3v95n/mLM/XnAe5nnr2P
qbX3jcsfMzsvi6dknOLV/ia5YJvP252bm4EAgmCT01PwRQhbFEEmyiZTKXki
IV+IANFq1PK11cWF2QlKr/TQhvmZ0ZHBzqDb5KZVDitIuoU3GUxS5G+TmdYa
rMQRJXO0QmuG59FbaKXOJFMbN3Z5Y9NzbZyu62mp+cVFHd19g6MTO7tcLncX
fgCjlpF+IyN5O5KSEnJdNy3tckrqlaLi3Nam2orSvLzslLbmmobq0rqqwp62
Gv724vBAB5e7/uUsNxktrfUb60tyOV8m4woE60rlPuIaPNRqxSqVAHhqVUJg
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
AQ2n8P8BC9s53g==
      "], {{0, 60.}, {44.8, 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{180, 180}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> 
        "http://en.wikipedia.org/wiki/File:Gentoo_penguin_nsf_cropped.jpg", 
        "URL" -> 
        "http://www.wolframcdn.com/waimage/hset050/e38/\
e38532e9e9094b5c711bca7fd8ff3190_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{44.8, 60.},
    PlotRange->{{0, 44.8}, {0, 60.}}], ",", "\<\"gentoo penguin\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8600892735198603`*^9, 3.8600893285985746`*^9}, 
   3.8600893918096347`*^9, 3.8600894304194984`*^9, 3.860089468403945*^9, 
   3.8601337496298428`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"5f50dc09-1ea5-475f-a449-13aefeaef545"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxsvfV/XPe1/uuYxZJldpyYEmNMMbOMssXMzBpJo9EwMzOzNGI023EcbNok
pTQppE255/Tbc88P9/4R9/nsjzz1OffqtbK7Zw949ns/a61n7dkz3d3OLu9e
uWLFCu56LMrbhHkjI23iimzcqBri9vUMdXXeHeJ19XSNnGtfhY0B/NeJ/8h6
XX1lbV1FdV15VW0ZlrUNlQ2N1U3NtYjWtoa29qbWtsb2jubOrpbunra+/va+
/s6e3nbcxPam5rq6+qrqmvKKypLSssLyiuKq6jLcrKmtqG+orm+sqWuobmis
aWlt6OjE09u7uts6u1rxajTIi7c2t7Q0IZqbyas1NNU2t9Tj8biLPgZPxFPo
03t6unp7u7Hs7GzHX2tra1NTUy3zV1dX19DQ0NLS0tbW1t5O721GkJdtaqiv
r62pqaqurqyqqsBfZWUllmVlZSUlJaWlpdXV1Y2NjXhu62t/LW14fktrO16u
s6u7t69/oJ81WFlVUlFZXF5VXFFdUllTWlNPdhM7mGT16g23dHW3dnU3Y4l1
bMQeNeKd1lVWVpWWlRchwIoGiIEhdhyBVwMEChyvhmcRJo012I6nY0cQDQ3Y
1xqKt5HBhQcDLOHT29Hbh6PTQYJhhQArCqq+vr6a+aupqQExvBA20r0GHxp4
ZQqKRtWrP/pE+iw8vpP5A2qsk2V7G3BhSUENsTnDHG51TVlVdSmisrqsqqYc
+073orkFO9hAcQEOw6eprb0RgY3YHewvBVVSWlBYlF9UfBdRXHIPAgMrigiB
lyJMmuvwFEoJqsMDELW11aBEQWF3cBOE6RPBKgkKgXUcr7a2Fuilo6MNOmSk
UsNQqqJBZYMlXgf30hdPHgvKjfm36qgUwRlyAluQ6erq6mP+uru7oUlKjPy1
t/X09rMGhigr7C/ePBJn+f3XVdIjCyZJOHSlpbWe5maSErRUXFpwr/BO/r1b
dwtuF4BYyT1sxKslWeGlEHhNPAsoKCg8F8cFO0jkxBx67BrZ35py+lzoEKmX
DICiMsaOAxSW9PEEL1bra6prqyqqyssqShFYqaqpxMs2NtYjBxFYoYEn4gbY
ARRNW2Qp5NTb2zswMMBms4eGhrBOExzEcFdfHwu6Aq6BQTZ0hfdPcYEA9gjv
E++NybjWpJwgM9QxFDf6SFKgGFCAQ1lhWQhdlRaUvcrBpJwamUxMUloOrKO4
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
B8eUiS4S7A4uu1PI7eUN9yAG+1o7W2uqygtu3Lh49syJ944eOH7s0Kn3j54+
cxxx7vz75y+cunrtwq3b14qLb5aV3W1qrM3Pv33o0KE333xz48aN27du27Jl
y7Zt23JyN2zYmEsQZWakpKWuT01Jz0zLzM5Yn7oOW7Jzcrdvf/Pdfe9cu3oR
qd3YUI0jiNynZm+YTbot3i0KKW009JOgnr7OVgwsXaSW0g/vqH1ihsr6pKGi
FpQOgNSg0um7p7eDFvPKimKwwr8IqaByogKI+ANSEVshHVHJeWoFXy7hSIRD
YsEguGEFd4mFLImAhJjfjxDxWIiRoS5Ukobakjt3rp47d/zIe/sPH3n32PFD
WAGrM2dPANeFi6dv3LwCPWOmuHnz+lu73gaTjKzMDRs2ZGVlZWblpKVnpqZl
YImtKanp61PS1oHRupTU1NS165dZZedsosQOHNx3/sLpsvIiHH1Ub1r22QOw
za20F6AJwphhFkAy0ibIAGxjSlk/CNAkpWaMcWLtdGZM+nZ6mqKvvwuVCrlQ
W1MOVhAVcgpqEfMHtCqhXi0yaiVWowKhVwvU8hGVYkQpHdYouFolT6vkquUc
hYQtFQ6AmEw8DIAgOTzY2dlWW16eD2mdOXsM0jpwcO/xE4eBC8uT77939txJ
4CoqKcy7cQ0ZB9mADIn0tDXr1q5Zt3r12lVgsnL1qtVr16xasxpbEOtTMsn/
kLtWrVmzCtyycrIRGzdBjDt3vrXn5MlTlZWV/X09Aj5HMMJGC8BxR4JAALTP
AppYzBEJ0Sx4aJdMceMIhCNYIm2pGUvWN+aMa0vyQzd65qe8rLCmugzVGNHa
VN3T2cBmtUMhOpUQoOwGhcusRFh1Ep2KT0LORZjUQmwxaIQAqJbz0NxNRo1B
r1IqhWhD6IYgj5KOSnXi5BFQOnhoH5bgBpkdP3HkWt6l02fPABQqEliBDCi9
sWolYtWalatXI1avWrVq5cqVa9euXbn6jTdWrVixesWKNW+sWrd2NUMzJSVl
zdoVq9auWLHyjXVpqRk52WtS1qdmZmzbsfXCpfOd3R1c/ohIJFCpFF6f02oz
2h1mu82k1SjUKplWI9dopUqVRKGUqNQysYQvkwpQ6KiPpUtKDErrh4/t76If
6YIPoq6urKqqqLGuvKO1Zqi/Tcob0Cj4Fq3YYZQDlNOksOmlZq3QoBHoFTwE
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
coUXwMfmn7H6po2ucYMzZLAnwmMv2Hzu2YuHzl88fvLUQUA4f/7Y2fNHz547
fvHK6St55wqKb2B+L6+ExvLLym6Vl98uLb1ZUJB38zbcxamT7x8+dvwwshJx
5sypO3duVddWdXS1j/A4MplMLJV09/aA1dnzZ44efw+WFf4WxKAxyBWT+GjI
gsLudijtFqnTJkcCmo0ivW5Er+ZDbMhNmbhfNNKN0MtHXEaF36kNu3URjz7s
1UdCZhJoCmHDRMx1/tz7qdnZ6TmbgIh+YpWaRapWRs7G1Myc9KyNBGNmblo2
idTsdLIxfWN6Rk5K2vr1GSlrUrObO3km54TJOW50JIyOUaMzZnBEteagyuBT
mbw276QjOBOffdzS3VxSdAWD3fWbZ25eP3Pp0slTp997/9QRLFH2i0tvVNfc
be+o6umt7eup7eqo7miraqgrKiy6evPW6atXT1+/fqGw4HZJ8b2K8mJUbxaL
JRJLFQqFSCLuH2DV1tdduXb18HuH9r27G8b1/MUzd+7erKmtQNWKB40Rnw45
5XUpPU70RIXTJnVYJTaDwGJEbnI0SiQgB/not2tCLn3IY4h6TViJ+s3wG7GI
FbV9JuHic7qzc9KhKMwpYJXJfByVlr0Rtjhjw6bMnM3ZuVuxzNhAbqbnbEzf
AKXlAB3yFMVqTVranoMnuBKL1hLT22IGe1xvj2itIbU5AFAKncfsSjgDc87Q
/NzjH7uD/t7uuv6ulpq6wsry28WF165fP0eVdu7Ce8Ulec0tZQODDSPcNj6v
ncNuHRpo6e6sram9h7sKCkgDLS+/h4m+orwIxa23r1MoFIpEIj6fP8geau/s
gLSoMTtw6B24DlLT6iphHvwuOXIK4XVI3VYSNrPIbhHbTXykm8Mk8trlEZ9h
PGqfGvWMh5yjQXvMawm7DbGAhZ7OSkRss2Oeu7fzMNYBFEGRnZO5ITdnE7rO
m9lbd1A+gAZEWCKgK6yvSUnHI5kilpWWvXmQq1SbQhpTQGcJARRERXHpbOTM
HmqXL/bQH380ff/LpccvRIJ+mYjd39/a0VbZ3FhSUXEHiXbr1sWbN89VVt3p
7KoZGm4QCtpFwg7uSOsgq7mzs7ahsbiq5m5p2Y3KyvyamqLy8vx7967dvZuH
jgCrKRLyBQLe8PBQd29XZXXFtevoIO8dfu/A+6ePYyKA3QUrr03iNAmcIEOW
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
l3wtqK+N+Q2f5iFW+xALmdjK6m0Z6icx0NsEXFxOl1jAQQJi3nE7Xd9995s/
/vBXEn/4y+++/S3i97/74x++/9PvfvP9z7/6+pMXzx7MT8NAjYa9U/Hgg+nE
hw8XnsOBT8Qfzk28/PCDr7766he//NWXX3/1+NEShly0TvQCiGqE1Tbc16IS
s+1myENnM2GKlMI8xH3O6VhwJh762Y+//PijDyZgcI3k4m0/GE6MTiXGI2Ef
9Iz52ue2jMZDo9HA2bOnj58+n5aeCetOT63TPrg+PQPO4eLlSwVFhR1dncRW
yWXkNKZCgRmQ+iuICkJikdTroV8xY7rhAFbITxQyP3YEVvRXrUAMlQqUBvua
EWDF/CzYEB0JvV7v//nnf//Xv/6f//jHf//1L//5w2//iPjPv/7zn//xX//5
j3/96Yc//+E3v//ul998/tknHz57+uGjB88XZh5Pjd5PRBYTsSdzsx+//OTn
P/vVt999/8033/7ok4+f3J9//GB+YX56NOz32M0euxHFhzlhGEFyTSaicLAP
UKAmJ5Ymxv0OE6o3qiLqG4xrIOBYuj/38P4DKA3AUbJgMKDhqcmxo0ePHnv/
DGo7DAOtV7S8g9XGrduuXc+7W3CvvbODVnXgYkw7qVRgBUNFC9QgfMIwC0vc
JFv6uygrJpoQyD4UK/AhlBhp4SbKOzFXCgFKltfr/u//6/8Gq3/8/V9//uPf
/vT9n8Hqb3/8+3/85R9//eEvf/j+B2z8y5//8cMf/vLdt7/71c+++erzzz95
8ujD+/NP52aWRkfnp8Y/+fDlT7/62dc/+vGnT598+uTRTz/7/Jdf/+JnX/8U
GQ3VffbRy6+++NHXP/7iJ5//6KsvfvzLr37+85/89CeffvH5y4/RGkSCfsFI
j5w3aNUpPG7b3ML0gwdLi0szk2MBdGGf24b6MDU5fuTIkZNnzidZUV3R62HA
6vrNG8WlJZhr2MMjyEHmFB+Z+2BBkYDEJDC2Ckuss8hXF3vIDxT3IeM6Iaqu
9joEpAVW0NVAfzNlNdjXii3kV+mEbJmMfP0/FPb985//+sPv/4K8+/Mf//Kn
H/4KXEjDn3351ccvPvzi8x8D0Z/+/A/EX//6rz/96T9/+MNff/vr33zz5Rdf
vnzx+cOHzxanPn766OvPPvnpxx9/+fzJV8+ff/OjL3/3zfe//tX3X/74py9f
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
AZ+PSgqIXj/wxhsHDxx69y3ED/xLTHCWVVaXVVSVl1eWlVWUlpWVVFSWAL2m
xtqqchotL4uWkxbD6lZhVnJ+dnJBdjqiqyg3s7aqtLsD6r2zt6eD2iKbMTgw
RB9gMQaEbLZGoZybmb9/7zGd0ZGdldbZ0gBOmAwY8FWhMxH8UFxmg9zn0m+s
TO1tLpJLTEapx6mCYKDW6u7vrKzMTz17fP+T509RIPxW4n+nQv69O+t3VuZs
OrFZybPrBGYVJ4ygdRoQmdBaQZ9+aS4IiKYCZrwOygJf2UxKvAF/C2EJzYA6
izHCAX4jM6JNCjB8rIWQDjGJv65RSo4dfeftt9545523Xn/99aSUxLqG6soq
Gpx1MS2/sDC/vLwUaVhWToN4aGkmrT+hpsppBaWFeWQH2ZRb6bdvJdy8nJaa
iOpQUVLUWFvT2dHWTf4Bp77+7h5G/wCzn8EdZutECrvKuLqwcv/xE5tORGbp
2zQgK5dZCc0pYPXByyzPhMD2Qi4dlL6+Mo0hXl2eXFkKe226Sb99b3t5d2sR
2YH/mo0GHDYVbPjQYCckUElRts2sgV71xq4WRmPJCI6C+e3vrodNhhfGh+9s
LiAHgQDokVyWifXLMxul1J0vSDuDbuzunQUIYNSIwf62iZAdfnBi3OmyG86f
P3vk2LvvHo3dmHj9ADR8cWkhUeYVtCJaHjmKCkrIKyU1NTAyTR3trUCjpCAn
P+t2avylxJvvJydcyUpPzMxMKinKra8qq60sa26qw9t6e7p6Ozv6Ozv7+3ro
vT18FlsnVQTd3t2dO3t3dzyxDd8wrDCwGDWTbsxulpMVuGqRntymHyOLZ/02
cJ1sbBQVDf4X3gTlErmjkvHsFvWnL56ARlC5mAMtEuFQV1s1oTWfCSJhwmug
iAs6BJ85wujAo4AzAJWCIhu7RmGONRYkrbti/fLk0xEfVCjkqMkgMRqVCGNo
VFReAAjxNjsbFvDZ5y9dpOZpv3v8BLAil/uSE1D4CDuVFpaUFdEQYKWwyRWN
jfB69I62zoaa6vqqkvzshKuXjqYkXEy7fS0zLQEqC2RVW0FrqC6Fj+7vaW2o
Lq8sKSzLyaosyq8vLRExGBaFIuh1hUN+r9UE/w6BBMaG2FuZC85OOoJkuRC5
REytJAUIOIXYEjni4JCklASFI7abVUaNbGLcvbO1jPc7TLIfFoWFnOCcxSlv
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
q6LwuV1Wl9vW3tH8/wBEJBvN
      "], {{0, 150.}, {100., 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{72, 72}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://en.wikipedia.org/wiki/File:Chinstrap_Penguin.jpg", 
        "URL" -> 
        "http://www.wolframcdn.com/waimage/hset050/fa6/\
fa69bbffd75f80fd4aeaf62331a9c45e_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{100., 150.},
    PlotRange->{{0, 100.}, {0, 150.}}], ",", "\<\"chinstrap penguin\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8600892735198603`*^9, 3.8600893285985746`*^9}, 
   3.8600893918096347`*^9, 3.8600894304194984`*^9, 3.860089468403945*^9, 
   3.860133749645516*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"25dfdf1b-575b-41d9-a7b5-d0feac1cfcf5"]
}, Open  ]],

Cell["\<\
We first start with the exploratory data analysis and visualizations to clean \
the data and also understand the distributions of the numerical attributes of \
the  data. We also try to see if there is a correlation between the numerical \
attributes of the data. After drawing a few conclusions and interpreting the \
data at hand we try and apply classification algorithms to predict the three \
species of the penguins.  \
\>", "Text",
 CellChangeTimes->{{3.8599815760586376`*^9, 3.859981606503984*^9}, {
   3.8600895389911036`*^9, 3.860089569573203*^9}, {3.8600896135772448`*^9, 
   3.8600896599828453`*^9}, {3.8600897082239795`*^9, 
   3.8600897425203457`*^9}, {3.8600898089911776`*^9, 3.860089831676044*^9}, {
   3.8600903039798164`*^9, 3.860090370630104*^9}, 
   3.8600904121255703`*^9},ExpressionUUID->"d4912be5-ff23-4105-83a8-\
5667b37fc77f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exploratory Data Analysis", "Section",
 CellChangeTimes->{{3.8599809891845937`*^9, 3.8599810184875584`*^9}, {
  3.8599813094107943`*^9, 
  3.8599813244257393`*^9}},ExpressionUUID->"d39a6bc0-9eb8-40c3-a0bf-\
f2b59588bd26"],

Cell[TextData[StyleBox["Importing a dataset:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.85998156231051*^9, 
  3.8599815704878645`*^9}},ExpressionUUID->"540c6959-3e05-4736-be4a-\
d32335542b35"],

Cell["\<\
SemanticImport was used rather than Import function because the Import \
function considers the column names in the first row of the dataset to be an \
observation instead of column names. We use missing data rules to replace NA\
\[CloseCurlyQuote]s in the data with Missing[] so that it is not considered \
as a string. For example, if we do not use Missing[] NA is considered as a \
string in the column sex instead of a blank or a missing value.  This can \
cause a problem when we are looking for columns that have empty values.\
\>", "Text",
 CellChangeTimes->{{3.8599822834538937`*^9, 3.8599824439319787`*^9}, {
  3.86009066053943*^9, 3.860090709193125*^9}, {3.8600909079320536`*^9, 
  3.860090976480884*^9}, {3.860091104998352*^9, 3.8600911479322944`*^9}, {
  3.86009172751027*^9, 
  3.860091762301651*^9}},ExpressionUUID->"c4471314-7961-4292-96b0-\
28d602dc3564"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"SemanticImport", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], "<>", "\"\<penguins.csv\>\""}],
      ",", 
     RowBox[{"MissingDataRules", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<NA\>\"", "->", 
        RowBox[{"Missing", "[", "]"}]}], "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.859981170512003*^9, 3.859981192365779*^9}, 
   3.859981235477559*^9, {3.85998127062237*^9, 3.8599813569106236`*^9}, {
   3.85998140178253*^9, 3.8599814194647617`*^9}, {3.8599814743642025`*^9, 
   3.859981475467107*^9}, {3.859981521223857*^9, 3.8599815467090473`*^9}, 
   3.859981856968177*^9, {3.8599821809229374`*^9, 3.859982210794091*^9}, {
   3.859986504972397*^9, 3.8599865181029143`*^9}, {3.859986561733926*^9, 
   3.8599865939600086`*^9}, {3.8599866408963737`*^9, 
   3.8599866457017527`*^9}, {3.859993648391238*^9, 3.8599936738416414`*^9}, {
   3.8600014275901213`*^9, 3.8600014281618323`*^9}, {3.860001595919211*^9, 
   3.8600016089188366`*^9}, {3.8600016450613675`*^9, 3.860001671994275*^9}, {
   3.8600463053723664`*^9, 3.8600463303141627`*^9}, {3.8600916725461683`*^9, 
   3.8600916935557857`*^9}, {3.8602220830427265`*^9, 3.8602221170370345`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"2a158522-ff5a-4b3a-ad9f-263cc8a75eaa"],

Cell["\<\
Observing the first 5 observations to get a brief idea about the data\
\>", "Text",
 CellChangeTimes->{{3.8599818624455156`*^9, 
  3.8599819011541557`*^9}},ExpressionUUID->"05fa7c00-cfbb-4b71-a1e5-\
3b452ca0cddc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"data", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.8599818405587244`*^9, 3.859981849541643*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"1cda4366-9ff6-4d9a-ae1a-9e59aef0c30f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.1, "culmen_depth_mm" -> 18.7, "flipper_length_mm" -> 181, 
        "body_mass_g" -> 3750, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.5, "culmen_depth_mm" -> 17.4, "flipper_length_mm" -> 186, 
        "body_mass_g" -> 3800, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        40.3, "culmen_depth_mm" -> 18., "flipper_length_mm" -> 195, 
        "body_mass_g" -> 3250, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        Missing[], "culmen_depth_mm" -> Missing[], "flipper_length_mm" -> 
        Missing[], "body_mass_g" -> Missing[], "sex" -> Missing[]|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        36.7, "culmen_depth_mm" -> 19.3, "flipper_length_mm" -> 193, 
        "body_mass_g" -> 3450, "sex" -> "FEMALE"|>}, "AllowEmbedding" -> True,
      "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 5], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 5], "Path" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 7, "DataRowCount" -> 
     5, "DataColumnCount" -> 7, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["species", 
                  Style[
                  "species", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "species"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "species"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["island", 
                  Style[
                  "island", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "island"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "island"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_length_mm", 
                  Style[
                  "culmen_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_depth_mm", 
                  Style[
                  "culmen_depth_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_depth_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_depth_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["flipper_length_mm", 
                  Style[
                  "flipper_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "flipper_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "flipper_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["body_mass_g", 
                  Style[
                  "body_mass_g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "body_mass_g"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "body_mass_g"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["sex", 
                  Style[
                  "sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "sex"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "sex"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3750"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["186"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3800"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3250"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["193"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3450"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{658., {82.92062981973868, 88.07937018026132}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{658., {82.92062981973868, 88.07937018026132}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8599811932042627`*^9, 3.8599813342361264`*^9, 3.8599814216926284`*^9, 
   3.859981478179536*^9, {3.8599815319161105`*^9, 3.8599815525148*^9}, 
   3.859981851687137*^9, 3.859982214899815*^9, 3.8599864169734917`*^9, 
   3.859986536191761*^9, 3.859986653093061*^9, 3.859987174086415*^9, 
   3.859988074849675*^9, 3.859991298934926*^9, 3.859992720735335*^9, 
   3.859993688542804*^9, 3.8599965914812098`*^9, 3.860001733065711*^9, 
   3.8600023315434465`*^9, 3.860002439404746*^9, 3.8600427497155952`*^9, 
   3.86004297840934*^9, 3.860046447357242*^9, 3.860049793359378*^9, 
   3.8600911549710565`*^9, 3.860091710081944*^9, 3.8601337570740857`*^9, 
   3.8601353552235312`*^9, 3.86021834461881*^9, 3.860222126347823*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"a4289c15-659b-4044-a0f0-8d058e8f7ccc"]
}, Open  ]],

Cell["\<\
The dimensions show that we have 344 observations and 7 columns.\
\>", "Text",
 CellChangeTimes->{{3.860091162309079*^9, 3.860091166017067*^9}, {
  3.8600912170354185`*^9, 
  3.860091242998908*^9}},ExpressionUUID->"12f0b080-115f-43b3-83e5-\
9452f1711828"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.859983591862446*^9, 3.8599836664056206`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"ef2446c3-3395-4500-a0c3-a1e83b731708"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"344", ",", "7"}], "}"}]], "Output",
 CellChangeTimes->{3.860002441974715*^9, 3.860042750731158*^9, 
  3.86004298017552*^9, 3.8600464489148636`*^9, 3.860049794751381*^9, 
  3.860091713755906*^9, 3.860133759440603*^9, 3.86013535681558*^9, 
  3.8602183466549444`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"85238ec6-6bfb-4c02-a124-176605195e13"]
}, Open  ]],

Cell["Count the number of Missing values in each column", "Text",
 CellChangeTimes->{{3.8600912596287537`*^9, 
  3.860091280577593*^9}},ExpressionUUID->"24efdd45-751c-409b-a2b8-\
2545c94ca863"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{
     RowBox[{"Count", "[", "_Missing", "]"}], ",", "#"}], "]"}], "&"}], "/@", 
  " ", 
  RowBox[{"Keys", "@", 
   RowBox[{"First", "@", "data"}]}]}]], "Input",
 CellChangeTimes->{{3.8599844358342285`*^9, 3.859984443195619*^9}, {
   3.859984480069208*^9, 3.8599846256397667`*^9}, {3.859984761994999*^9, 
   3.8599847772590623`*^9}, {3.859984820940583*^9, 3.8599848670524874`*^9}, 
   3.859984943939825*^9, {3.859985155641321*^9, 3.8599851624430428`*^9}, {
   3.8599855175812254`*^9, 3.8599855213250523`*^9}, {3.8599856429330864`*^9, 
   3.8599856575805383`*^9}, {3.8599880479039316`*^9, 
   3.8599881194065514`*^9}, {3.8599881600186815`*^9, 3.859988227934778*^9}, {
   3.85998851318379*^9, 3.8599885540345297`*^9}, {3.8600464074561214`*^9, 
   3.8600464140094814`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"c8440ce7-8d74-4dab-9ebd-801f96edf748"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {0, 0, 2, 2, 2, 2, 11}, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[34]], 7, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Atom[Integer], 7], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[34]], 7, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Atom[Integer], 7], "Path" -> {}, "DisplayedRowCount" -> 7, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 7, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["11"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{43., {95.92062981973868, 101.07937018026132`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{43., {95.92062981973868, 101.07937018026132`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.859988208688511*^9, 3.8599882312453403`*^9}, 
   3.859988540540429*^9, 3.859988673684386*^9, 3.8599913060667257`*^9, 
   3.8599927310815763`*^9, 3.859993694903984*^9, 3.860001739585586*^9, 
   3.860002336949538*^9, 3.860002450820924*^9, 3.860042752002802*^9, 
   3.8600429819784403`*^9, 3.860046450035774*^9, 3.860049795826789*^9, 
   3.8600917167136483`*^9, 3.8601337618978047`*^9, 3.860135358449916*^9, 
   3.8602183487326517`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"58da2805-aca8-4d19-aba8-3621cd1091e6"]
}, Open  ]],

Cell["\<\
There are two missing values in each of the columns named culmen_length_mm, \
culmen_depth_mm, flipper_length_mm, body_mass_g. There are 10 missing values \
in the sex column.\
\>", "Text",
 CellChangeTimes->{{3.8600912867422237`*^9, 
  3.860091409387063*^9}},ExpressionUUID->"6787729a-6c79-49fd-b273-\
59efb7dcb16b"],

Cell["\<\
For classification purposes we are just using the bodily measurements in the \
dataset to predict the species of the penguin. Hence, we just remove the rows \
that have missing values in the numerical columns and leave the column sex as \
it is . 
We first get the indices of the rows where the numerical data is missing.\
\>", "Text",
 CellChangeTimes->{{3.860091419491803*^9, 3.8600915620786753`*^9}, {
  3.860091610649597*^9, 3.8600916231165066`*^9}, {3.8600917833639174`*^9, 
  3.8600918612754235`*^9}},ExpressionUUID->"551276c1-8789-4352-a805-\
a18c60ddafd3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"All", ",", 
     RowBox[{"3", ";;", "6"}]}], "]"}], ",", "_Missing"}], "]"}]], "Input",
 CellChangeTimes->{{3.8600021083323936`*^9, 3.860002108989876*^9}, {
  3.8600024578505692`*^9, 3.8600024586615615`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"ec92bb44-22cc-43b0-834c-fba8b0cb7d3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"Key", "[", "\<\"culmen_length_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"Key", "[", "\<\"culmen_depth_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"Key", "[", "\<\"flipper_length_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"Key", "[", "\<\"body_mass_g\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"340", ",", 
     RowBox[{"Key", "[", "\<\"culmen_length_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"340", ",", 
     RowBox[{"Key", "[", "\<\"culmen_depth_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"340", ",", 
     RowBox[{"Key", "[", "\<\"flipper_length_mm\"\>", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"340", ",", 
     RowBox[{"Key", "[", "\<\"body_mass_g\"\>", "]"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.860002050185561*^9, 3.860002110113555*^9, 
  3.8600023405690193`*^9, 3.8600024596229315`*^9, 3.860042753635947*^9, 
  3.8600429836057196`*^9, 3.8600464511857967`*^9, 3.8600497968507905`*^9, 
  3.860133766026325*^9, 3.8601353617729864`*^9, 3.860218351760436*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"506e96b8-d1cb-49a5-a76c-1332c357cd90"]
}, Open  ]],

Cell["\<\
We can observe that the data is missing in the 4th and the 340th position \
hence we remove those observations from the data. \
\>", "Text",
 CellChangeTimes->{{3.860091864363843*^9, 3.860091882851966*^9}, {
  3.8600920994008636`*^9, 
  3.8600921240476465`*^9}},ExpressionUUID->"06f9fedb-0552-4aa6-8acc-\
09f9df5f622b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Delete", "[", 
    RowBox[{"data", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "4", "}"}], ",", 
       RowBox[{"{", "340", "}"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.859991225495509*^9, 3.8599912394239073`*^9}, {
   3.8599913251363115`*^9, 3.8599913427904215`*^9}, {3.85999250615492*^9, 
   3.859992590447407*^9}, {3.859992656060979*^9, 3.8599926632766066`*^9}, {
   3.8599927397694016`*^9, 3.8599927689450665`*^9}, {3.8599937630284195`*^9, 
   3.8599937861324973`*^9}, {3.859993972168975*^9, 3.859993972405202*^9}, {
   3.8599940326665473`*^9, 3.8599941732685037`*^9}, {3.8599943004491053`*^9, 
   3.8599943544493914`*^9}, {3.859995464158297*^9, 3.859995468499983*^9}, {
   3.860001948587557*^9, 3.860002003422215*^9}, {3.860002181274469*^9, 
   3.8600021977289257`*^9}, {3.8600022327943897`*^9, 
   3.8600023048579245`*^9}, {3.8600023454891725`*^9, 
   3.8600023909360046`*^9}, {3.860002507425641*^9, 3.8600025178077087`*^9}, 
   3.860002558149289*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"462d931b-a88b-4256-9007-0b8061ea6e55"],

Cell["\<\
We observe that we have now removed our empty values in the data and the \
empty values in the gender column has been retained as it is.\
\>", "Text",
 CellChangeTimes->{{3.860092147449839*^9, 3.860092241316719*^9}, {
  3.860092280363537*^9, 
  3.860092302288838*^9}},ExpressionUUID->"517e3801-28ad-47fb-954e-\
f35acafaa7b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"1", ";;", "8"}], "]"}]], "Input",
 CellChangeTimes->{{3.8600025670584135`*^9, 3.860002573621209*^9}, {
  3.8600027490302973`*^9, 3.8600027494082556`*^9}, {3.860092245791087*^9, 
  3.860092274010786*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"316ab361-9c25-41d0-9754-980559bb6b6c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.1, "culmen_depth_mm" -> 18.7, "flipper_length_mm" -> 181, 
        "body_mass_g" -> 3750, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.5, "culmen_depth_mm" -> 17.4, "flipper_length_mm" -> 186, 
        "body_mass_g" -> 3800, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        40.3, "culmen_depth_mm" -> 18., "flipper_length_mm" -> 195, 
        "body_mass_g" -> 3250, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        36.7, "culmen_depth_mm" -> 19.3, "flipper_length_mm" -> 193, 
        "body_mass_g" -> 3450, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.3, "culmen_depth_mm" -> 20.6, "flipper_length_mm" -> 190, 
        "body_mass_g" -> 3650, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        38.9, "culmen_depth_mm" -> 17.8, "flipper_length_mm" -> 181, 
        "body_mass_g" -> 3625, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.2, "culmen_depth_mm" -> 19.6, "flipper_length_mm" -> 195, 
        "body_mass_g" -> 4675, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        34.1, "culmen_depth_mm" -> 18.1, "flipper_length_mm" -> 193, 
        "body_mass_g" -> 3475, "sex" -> Missing[]|>}, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 8, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 8], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 8, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 8], "Path" -> {}, 
     "DisplayedRowCount" -> 8, "DisplayedColumnCount" -> 7, "DataRowCount" -> 
     8, "DataColumnCount" -> 7, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["species", 
                  Style[
                  "species", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "species"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "species"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["island", 
                  Style[
                  "island", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "island"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "island"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_length_mm", 
                  Style[
                  "culmen_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_depth_mm", 
                  Style[
                  "culmen_depth_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_depth_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_depth_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["flipper_length_mm", 
                  Style[
                  "flipper_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "flipper_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "flipper_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["body_mass_g", 
                  Style[
                  "body_mass_g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "body_mass_g"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "body_mass_g"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["sex", 
                  Style[
                  "sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "sex"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "sex"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3750"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["186"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3800"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3250"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["193"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3450"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["190"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3650"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["38.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3625"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4675"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["193"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3475"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{658., {121.92062981973868`, 127.07937018026132`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{658., {121.92062981973868`, 127.07937018026132`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8600025749673777`*^9, 3.860002750426449*^9, 3.860042756268135*^9, 
   3.8600429863234277`*^9, 3.860046453424732*^9, 3.860049798798929*^9, {
   3.8600922467701173`*^9, 3.8600922749415007`*^9}, 3.8600923078872213`*^9, 
   3.8601337701637926`*^9, 3.8601353663425703`*^9, 3.860218356615079*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"03bfaa9d-fe7f-4684-81e4-f06f615c8651"]
}, Open  ]],

Cell["\<\
Now we replace all the empty values in the gender column by the word \
\[OpenCurlyDoubleQuote]Unknown\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.86009247190921*^9, 
  3.8600925036204863`*^9}},ExpressionUUID->"a04214de-b1b2-4ba6-8514-\
d2678c171607"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", " ", 
   RowBox[{"data", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<sex\>\"", "->", 
       RowBox[{"Replace", "[", 
        RowBox[{"{", 
         RowBox[{"_Missing", "->", "\"\<Unknown\>\""}], "}"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"data", "[", 
  RowBox[{"1", ";;", "8"}], "]"}]}], "Input",
 CellChangeTimes->{{3.860002600573594*^9, 3.860002723544429*^9}, {
  3.8600027559893656`*^9, 3.8600027616323204`*^9}, {3.86009246520479*^9, 
  3.86009246859412*^9}, {3.860092508480831*^9, 3.860092508907074*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"91d1a2e4-13f0-4ad6-88b8-7a48b92fcc54"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.1, "culmen_depth_mm" -> 18.7, "flipper_length_mm" -> 181, 
        "body_mass_g" -> 3750, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.5, "culmen_depth_mm" -> 17.4, "flipper_length_mm" -> 186, 
        "body_mass_g" -> 3800, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        40.3, "culmen_depth_mm" -> 18., "flipper_length_mm" -> 195, 
        "body_mass_g" -> 3250, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        36.7, "culmen_depth_mm" -> 19.3, "flipper_length_mm" -> 193, 
        "body_mass_g" -> 3450, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.3, "culmen_depth_mm" -> 20.6, "flipper_length_mm" -> 190, 
        "body_mass_g" -> 3650, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        38.9, "culmen_depth_mm" -> 17.8, "flipper_length_mm" -> 181, 
        "body_mass_g" -> 3625, "sex" -> "FEMALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        39.2, "culmen_depth_mm" -> 19.6, "flipper_length_mm" -> 195, 
        "body_mass_g" -> 4675, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Torgersen", "culmen_length_mm" -> 
        34.1, "culmen_depth_mm" -> 18.1, "flipper_length_mm" -> 193, 
        "body_mass_g" -> 3475, "sex" -> "Unknown"|>}, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[73.5]|>], 
          DirectedInfinity[1], 7, {All}]], 8, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE", "Unknown"]]}], 8], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[94.5], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[73.5]|>], 
          DirectedInfinity[1], 7, {All}]], 8, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Torgersen"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE", "Unknown"]]}], 8], 
     "Path" -> {}, "DisplayedRowCount" -> 8, "DisplayedColumnCount" -> 7, 
     "DataRowCount" -> 8, "DataColumnCount" -> 7, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["species", 
                  Style[
                  "species", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "species"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "species"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["island", 
                  Style[
                  "island", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "island"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "island"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_length_mm", 
                  Style[
                  "culmen_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_depth_mm", 
                  Style[
                  "culmen_depth_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_depth_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_depth_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["flipper_length_mm", 
                  Style[
                  "flipper_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "flipper_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "flipper_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["body_mass_g", 
                  Style[
                  "body_mass_g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "body_mass_g"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "body_mass_g"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["sex", 
                  Style[
                  "sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "sex"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "sex"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3750"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["186"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3800"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["40.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3250"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["193"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3450"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["190"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3650"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["38.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["17.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["181"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3625"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["19.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["195"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4675"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Torgersen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["34.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["193"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3475"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Unknown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{73.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{669., {121.92062981973868`, 127.07937018026132`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{669., {121.92062981973868`, 127.07937018026132`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8600027270761023`*^9, 3.860002763199613*^9, 
  3.8600427578651934`*^9, 3.8600429877969418`*^9, 3.8600464548035917`*^9, 
  3.86004980091403*^9, 3.8600925099844303`*^9, 3.860133772069646*^9, 
  3.8601353697602105`*^9, 3.860218358521701*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"385ba0bb-8e96-4507-bdee-de5f70fc4b23"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizations", "Section",
 CellChangeTimes->{{3.8600927975358667`*^9, 
  3.860092815749118*^9}},ExpressionUUID->"8e6431b2-ca14-4580-97bf-\
49ce679b7e40"],

Cell["\<\
Having cleaned the data, we would now like to gain more insights on the data. \
Hence, we perform visualisations to interpret the data easily.\
\>", "Text",
 CellChangeTimes->{{3.8600928539113865`*^9, 
  3.860092929277784*^9}},ExpressionUUID->"8b5fb8f9-9d8b-4858-a480-\
75b92abffbc7"],

Cell[CellGroupData[{

Cell["Distribution Types of the data:", "Subsubsection",
 CellChangeTimes->{{3.860134087409732*^9, 
  3.8601341147620373`*^9}},ExpressionUUID->"25423d2d-c207-436e-99e6-\
70228adb7035"],

Cell["\<\
Histograms were plotted to understand the distribution types of the numerical \
data present in the dataset.\
\>", "Text",
 CellChangeTimes->{{3.860092967174226*^9, 3.8600930036270337`*^9}, 
   3.8600930392161765`*^9},ExpressionUUID->"79e631e3-1b62-42f9-9098-\
4a4356ef2d04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"All", ",", "\"\<culmen_length_mm\>\""}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Histogram of bill length\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8600028527902155`*^9, 3.8600029000310354`*^9}, {
  3.8600030016873474`*^9, 3.860003088332458*^9}, {3.8600031676626635`*^9, 
  3.8600031867730637`*^9}, {3.860003219077752*^9, 3.8600032213102245`*^9}, {
  3.8600032588852024`*^9, 3.86000337126075*^9}, {3.8600448334865437`*^9, 
  3.8600448802640657`*^9}, {3.8600940720957685`*^9, 3.860094109506525*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"a8eef42e-c673-4a6c-bebd-c0589cd6325d"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.588], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.588], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{32., 0}, {34., 3.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{18.45863425115092, 40.240391621332805`}, {
           80.82908812138558, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 3]& ,
        TagBoxNote->"3"],
       StyleBox["3", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[3, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{34., 0}, {36., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{39.79039162133281, 61.57214899151464}, {
           15.80922476877545, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{36., 0}, {38., 40.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{61.12214899151464, 
           82.90390636169647}, {-69.52934588152539, 93.47031249999998}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 40]& ,
        TagBoxNote->"40"],
       StyleBox["40", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[40, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{38., 0}, {40., 38.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{82.45390636169648, 
           104.23566373187839`}, {-61.40186296244909, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 38]& ,
        TagBoxNote->"38"],
       StyleBox["38", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[38, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{40., 0}, {42., 36.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{103.78566373187837`, 
           125.56742110206028`}, {-53.274380043372815`, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 36]& ,
        TagBoxNote->"36"],
       StyleBox["36", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[36, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{42., 0}, {44., 31.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{125.11742110206026`, 
           146.8991784722421}, {-32.95567274568215, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 31]& ,
        TagBoxNote->"31"],
       StyleBox["31", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[31, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{44., 0}, {46., 37.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{146.4491784722421, 
           168.23093584242395`}, {-57.33812150291095, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 37]& ,
        TagBoxNote->"37"],
       StyleBox["37", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[37, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{46., 0}, {48., 44.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{167.78093584242393`, 
           189.5626932126058}, {-85.78431171967789, 93.47031249999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 44]& ,
        TagBoxNote->"44"],
       StyleBox["44", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[44, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{48., 0}, {50., 37.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{189.11269321260582`, 
           210.89445058278773`}, {-57.33812150291095, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 37]& ,
        TagBoxNote->"37"],
       StyleBox["37", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[37, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{50., 0}, {52., 39.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{210.4444505827877, 
           232.2262079529696}, {-65.46560442198724, 93.47031249999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 39]& ,
        TagBoxNote->"39"],
       StyleBox["39", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[39, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{52., 0}, {54., 11.}, "RoundingRadius" -> 0]},
          ImageSizeCache->{{231.7762079529696, 253.5579653231514}, {
           48.31915644508052, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 11]& ,
        TagBoxNote->"11"],
       StyleBox["11", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[11, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{54., 0}, {56., 5.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{253.10796532315135`, 274.8897226933333}, {
           72.7016052023093, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{58., 0}, {60., 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.7714800635151, 317.5532374336969}, {
           84.89282958092369, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{31.44, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox["\"Histogram of bill length\"", TraditionalForm],
  PlotRange->{{32., 60.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8600028735091267`*^9, 3.860002901639382*^9}, 
   3.8600031881144123`*^9, 3.860003222145799*^9, 3.8600032621707373`*^9, 
   3.8600032943159266`*^9, {3.860003360947414*^9, 3.860003374726617*^9}, 
   3.8600427609660625`*^9, 3.860042990139243*^9, {3.860044842017197*^9, 
   3.8600448834155316`*^9}, 3.8600464560257263`*^9, 3.86004980220835*^9, 
   3.8600923109447556`*^9, 3.8600940497738276`*^9, 3.8600941103927827`*^9, 
   3.860133775467866*^9, 3.86013537392945*^9, 3.8602183677261176`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d16a50a2-ef9c-4d82-9b36-c807cfc98807"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"All", ",", "\"\<culmen_depth_mm\>\""}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Histogram of Culmen Depth\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8600033834415855`*^9, 3.860003407325821*^9}, {
  3.8600941153139944`*^9, 3.860094133694875*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"307fb2cd-9f26-4bd2-8604-77eaf4142e3a"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.623], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.623], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{13., 0}, {14., 21.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{18.45863425115092, 52.09136793810044}, {
           39.37892523409661, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 21]& ,
        TagBoxNote->"21"],
       StyleBox["21", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[21, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{14., 0}, {15., 39.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{51.64136793810044, 
           85.27410162505001}, {-6.599406708106287, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 39]& ,
        TagBoxNote->"39"],
       StyleBox["39", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[39, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{15., 0}, {16., 43.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{84.82410162505002, 
           118.45683531199961`}, {-16.816813806373588`, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 43]& ,
        TagBoxNote->"43"],
       StyleBox["43", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[43, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{16., 0}, {17., 37.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{118.0068353119996, 
           151.63956899894913`}, {-1.4907031589726216`, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 37]& ,
        TagBoxNote->"37"],
       StyleBox["37", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[37, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{17., 0}, {18., 67.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{151.1895689989491, 
           184.82230268589876`}, {-78.12125639597744, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 67]& ,
        TagBoxNote->"67"],
       StyleBox["67", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[67, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{18., 0}, {19., 70.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{184.37230268589875`, 
           218.00503637284828`}, {-85.7843117196779, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 70]& ,
        TagBoxNote->"70"],
       StyleBox["70", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[70, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{19., 0}, {20., 42.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{217.55503637284826`, 
           251.1877700597979}, {-14.262462031806763`, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 42]& ,
        TagBoxNote->"42"],
       StyleBox["42", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[42, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{20., 0}, {21., 17.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{250.73777005979787`, 284.37050374674743`}, {
           49.596332332363914`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 17]& ,
        TagBoxNote->"17"],
       StyleBox["17", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[17, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{21., 0}, {22., 6.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{283.9205037467474, 317.5532374336969}, {
           77.69420185259901, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{12.82, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox["\"Histogram of Culmen Depth\"", TraditionalForm],
  PlotRange->{{13., 22.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8600034089264035`*^9, 3.8600427626829596`*^9, 
  3.86004299145157*^9, 3.8600464572602015`*^9, 3.860049803128978*^9, 
  3.86009231297919*^9, 3.860094135961893*^9, 3.8601337770517273`*^9, 
  3.860135375440086*^9, 3.8602183690055304`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"100ad12f-e589-4afe-a585-db7b3e57c148"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"All", ",", "\"\<flipper_length_mm\>\""}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Histogram of Flipper Length\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.860003413137116*^9, 3.860003436820565*^9}, {
  3.8600941403810987`*^9, 3.8600941561113997`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"46b3b117-4a0f-4c0a-bf4f-9bedcb387ae7"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.595], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.595], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{170., 0}, {175., 2.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{18.458634251151146`, 41.88129603442391}, {
           87.25242139613944, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{175., 0}, {180., 6.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{41.431296034423916`, 64.85395781769668}, {
           75.71663918841828, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{180., 0}, {185., 24.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{64.40395781769669, 87.82661960096948}, {
           23.80561925367313, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 24]& ,
        TagBoxNote->"24"],
       StyleBox["24", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[24, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{185., 0}, {190., 45.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{87.37661960096946, 
           110.79928138424225`}, {-36.757237336862886`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 45]& ,
        TagBoxNote->"45"],
       StyleBox["45", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[45, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{190., 0}, {195., 62.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{110.34928138424223`, 
           133.771943167515}, {-85.7843117196778, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 62]& ,
        TagBoxNote->"62"],
       StyleBox["62", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[62, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{195., 0}, {200., 51.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{133.321943167515, 
           156.7446049507878}, {-54.060910648444604`, 93.47031250000006}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 51]& ,
        TagBoxNote->"51"],
       StyleBox["51", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[51, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{200., 0}, {205., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{156.29460495078777`, 179.71726673406056`}, {
           38.225347013324566`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{205., 0}, {210., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{179.26726673406054`, 202.68992851733333`}, {
           38.225347013324566`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{210., 0}, {215., 35.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{202.2399285173333, 
           225.66259030060607`}, {-7.917781817560041, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 35]& ,
        TagBoxNote->"35"],
       StyleBox["35", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[35, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{215., 0}, {220., 36.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{225.21259030060608`, 
           248.63525208387884`}, {-10.801727369490337`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 36]& ,
        TagBoxNote->"36"],
       StyleBox["36", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[36, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{220., 0}, {225., 24.}, "RoundingRadius" -> 0]},
          ImageSizeCache->{{248.18525208387882`, 271.60791386715175`}, {
           23.805619253673086`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 24]& ,
        TagBoxNote->"24"],
       StyleBox["24", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[24, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{225., 0}, {230., 11.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{271.1579138671517, 294.58057565042446`}, {
           61.29691142876683, 93.47031250000005}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 11]& ,
        TagBoxNote->"11"],
       StyleBox["11", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[11, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{230., 0}, {235., 8.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{294.1305756504245, 317.55323743369723`}, {
           69.94874808455769, 93.47031250000005}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 8]& ,
        TagBoxNote->"8"],
       StyleBox["8", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[8, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{168.7, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox["\"Histogram of Flipper Length\"", TraditionalForm],
  PlotRange->{{170., 235.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.860003438203307*^9, 3.8600427642483606`*^9, 
  3.8600429927256255`*^9, 3.860046458403765*^9, 3.860049804058245*^9, 
  3.860092314456153*^9, 3.860094158547947*^9, 3.860133778247939*^9, 
  3.8601353771766415`*^9, 3.8602183722344894`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"1276e265-791e-4483-b84c-7eef00024293"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{"All", ",", "\"\<body_mass_g\>\""}], "]"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Histogram of Body mass\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.860003441389494*^9, 3.8600034781805677`*^9}, {
  3.86009416179685*^9, 3.860094175096425*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"2c1396a3-f676-4b09-b9a6-849d16474856"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.63], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.63], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{2500., 0}, {3000., 9.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{18.45863425115092, 56.23920964896917}, {
           75.90072081939255, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 9]& ,
        TagBoxNote->"9"],
       StyleBox["9", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[9, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{3000., 0}, {3500., 62.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{55.78920964896917, 
           93.56978504678744}, {-24.914652410851303`, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 62]& ,
        TagBoxNote->"62"],
       StyleBox["62", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[62, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{3500., 0}, {4000., 94.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{93.11978504678746, 
           130.90036044460572`}, {-85.78431171967779, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 94]& ,
        TagBoxNote->"94"],
       StyleBox["94", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[94, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4000., 0}, {4500., 59.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{130.45036044460574`, 
           168.23093584242395`}, {-19.208121850648823`, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 59]& ,
        TagBoxNote->"59"],
       StyleBox["59", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[59, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{4500., 0}, {5000., 51.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{167.78093584242396`, 
           205.56151124024223`}, {-3.990707023442212, 93.47031250000002}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 51]& ,
        TagBoxNote->"51"],
       StyleBox["51", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[51, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5000., 0}, {5500., 34.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{205.11151124024224`, 242.8920866380605}, {
           28.34629948437187, 93.4703125}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 34]& ,
        TagBoxNote->"34"],
       StyleBox["34", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[34, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{5500., 0}, {6000., 29.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{242.4420866380605, 280.2226620358788}, {
           37.85718375137598, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 29]& ,
        TagBoxNote->"29"],
       StyleBox["29", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[29, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{6000., 0}, {6500., 4.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{279.77266203587874`, 317.553237433697}, {
           85.41160508639666, 93.47031250000003}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4]& ,
        TagBoxNote->"4"],
       StyleBox["4", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{2420., 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotLabel->FormBox["\"Histogram of Body mass\"", TraditionalForm],
  PlotRange->{{2500., 6500.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.86000347980977*^9, 3.860042765698077*^9, 
  3.8600429938989677`*^9, 3.8600464594837356`*^9, 3.860049806636505*^9, 
  3.8600923159127383`*^9, 3.8600941796271515`*^9, 3.860133779374627*^9, 
  3.8601353790141716`*^9, 3.860218373903483*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"69ca5a6a-e0a0-4e6f-a679-32f809ba0ca9"]
}, Open  ]],

Cell["\<\
All the distributions look like that of a normal distribution hence there is \
no need of transforming any feature in the dataset.\
\>", "Text",
 CellChangeTimes->{{3.860094209429064*^9, 
  3.8600942607358847`*^9}},ExpressionUUID->"5abc48a6-66cc-4e4a-ac11-\
ab72fb220389"],

Cell["\<\
Now we want to gain some general information about the data. Hence, we use \
some simple plots such as Bar-plots, Pie Charts and List Plots to gain some \
insights of the data.\
\>", "Text",
 CellChangeTimes->{{3.860094345223133*^9, 3.860094366907346*^9}, {
  3.860133477041768*^9, 
  3.860133572403427*^9}},ExpressionUUID->"74f72194-cbab-42e3-aaa0-\
d04a1308af7f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["General Insights of the data:", "Subsection",
 CellChangeTimes->{{3.860134121742753*^9, 
  3.860134153290419*^9}},ExpressionUUID->"1b10c966-669a-49fe-adbb-\
2bc6171e0f78"],

Cell["\<\
We first would want to know the number of penguins belonging to each species \
so that we can decide if we are dealing with a class imbalance problem. \
Hence, a bar chart was plotted to understand this. \
\>", "Text",
 CellChangeTimes->{{3.8601335744558105`*^9, 3.8601335841246414`*^9}, {
  3.860133641502584*^9, 
  3.8601337324608755`*^9}},ExpressionUUID->"194d6920-de5e-4a1e-8ea7-\
5a6ac46c9a80"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"species", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"data", "[", 
     RowBox[{"All", ",", "\"\<species\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"speciescount", "=", 
   RowBox[{"Counts", "[", "species", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keys", "=", 
   RowBox[{"Keys", "[", "speciescount", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8600044528255715`*^9, 3.8600044920239*^9}, {
  3.860004536565524*^9, 3.860004600194735*^9}, {3.86000467817997*^9, 
  3.860004687386935*^9}, {3.860004777400674*^9, 3.8600048335988655`*^9}, {
  3.8600050531318026`*^9, 3.860005054575963*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"89f63307-a306-43e5-8a5e-272d4dda35ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BarChart", "[", 
  RowBox[{"speciescount", ",", 
   RowBox[{"ChartLabels", "\[Rule]", "keys"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.860004863494771*^9, 3.8600049338866887`*^9}, {
  3.860005008012797*^9, 3.860005033175248*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"9d77c732-6686-4fc2-841f-1bc79cebe340"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{-0.4116533139111435, 0.}, {4.35360524399126, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6789999999999999], Thickness[Small]}], 
     {RGBColor[0.237736, 0.340215, 0.575113], EdgeForm[{Opacity[
      0.6789999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
             151.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{76.99889237681586, 
            133.36012184478136`}, {-93.80846353414006, 86.27753906250001}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 151]& ,
         TagBoxNote->"151"],
        StyleBox["151", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[151, {}], "Tooltip"]& ]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], EdgeForm[{Opacity[
      0.6789999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
             68.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{138.95701833284218`, 195.31824780080768`}, {
            4.9318557739468645`, 86.27753906250003}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 68]& ,
         TagBoxNote->"68"],
        StyleBox["68", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[68, {}], "Tooltip"]& ]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], EdgeForm[{Opacity[
      0.6789999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             123.}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{200.9151442888685, 
            257.276373756834}, {-60.49847629767703, 86.27753906250004}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 123]& ,
         TagBoxNote->"123"],
        StyleBox["123", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[123, {}], "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{-0.4116533139111435, 0.}, {4.430862345229425, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5487982520029133, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}], 
        LineBox[{{3.4512017479970867`, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {3.4512017479970867`, 
           0.}]}], {{}, {}, {}, {
          LineBox[{{1.4512017479970867`, 0.}, 
            Offset[{-7.347880794884119*^-16, -4.}, {1.4512017479970867`, 
             0.}]}], LineBox[{{1.5487982520029133`, 0.}, 
            Offset[{-7.347880794884119*^-16, -4.}, {1.5487982520029133`, 
             0.}]}], LineBox[{{2.4512017479970867`, 0.}, 
            Offset[{-7.347880794884119*^-16, -4.}, {2.4512017479970867`, 
             0.}]}], LineBox[{{2.5487982520029133`, 0.}, 
            Offset[{-7.347880794884119*^-16, -4.}, {2.5487982520029133`, 
             0.}]}]}, {}}}, 
       StyleBox[
        {Thickness[Tiny], 
         InsetBox["\<\"Adelie\"\>", Offset[{0, -2}, {1., 0.}], 
          ImageScaled[{Rational[1, 2], 1}], Automatic, {1, 0}], 
         InsetBox["\<\"Chinstrap\"\>", Offset[{0, -2}, {2., 0.}], 
          ImageScaled[{Rational[1, 2], 1}], Automatic, {1, 0}], 
         InsetBox["\<\"Gentoo\"\>", Offset[{0, -2}, {3., 0.}], 
          ImageScaled[{Rational[1, 2], 1}], Automatic, {1, 0}]}, 
        "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.4116533139111435, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{3.8601353848069706`*^9, 3.860218381041752*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"36bd9566-2c60-4aa0-812a-ec56d8728890"]
}, Open  ]],

Cell["\<\
There is class - imbalance in chinstrap species but it might not cause a \
problem during classification because the samples are good enough for \
classification.\
\>", "Text",
 CellChangeTimes->{{3.860133919921319*^9, 
  3.8601340532991085`*^9}},ExpressionUUID->"dec40b8b-1855-4de5-9b48-\
39ca1a610a5c"],

Cell["\<\
Next we would want to know how many females or male penguins are present in \
this data. Hence, a pie chart was plotted to understand if the data had equal \
number of male and female species.  \
\>", "Text",
 CellChangeTimes->{{3.860133808566896*^9, 
  3.860133903959833*^9}},ExpressionUUID->"9a3ada0d-3060-4244-b3f6-\
025f759ccd42"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gender", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"data", "[", 
     RowBox[{"All", ",", "\"\<sex\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"gendercount", "=", 
   RowBox[{"Counts", "[", "gender", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"keys", "=", 
   RowBox[{"Keys", "[", "gendercount", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"PieChart", "[", 
  RowBox[{"gendercount", ",", 
   RowBox[{"ChartLabels", "\[Rule]", "keys"}], ",", 
   RowBox[{"ChartStyle", "\[Rule]", "\"\<DarkRainbow\>\""}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.8600427332920465`*^9, 3.860042735129263*^9}, {
  3.860042775428835*^9, 3.8600428795266733`*^9}, {3.8600430369843254`*^9, 
  3.860043066858734*^9}, {3.860043258947506*^9, 3.8600432815503917`*^9}, {
  3.860044486910636*^9, 3.860044579053852*^9}, {3.8600446145970793`*^9, 
  3.860044635609126*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"5b2bfbdf-3e61-4a21-9d80-0a4e9c56cda6"],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   DynamicModuleBox[{DynamicChart`click$10454$10502 = False, 
    DynamicChart`click$10464$10502 = False, DynamicChart`click$10470$10502 = 
    False}, {
     {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[0.5]}], {{{}, {
         {RGBColor[0.237736, 0.340215, 0.575113], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {0.055115660589294624`, 
                    3.141592653589793}]},
                   
                   ImageSizeCache->{{28.28578643762691, 
                    295.5133181865008}, {-135.7142135623731, \
-0.585786437626922}}],
                  "DelayedMouseEffectStyle"], {}},
                StatusArea[#, 168]& ,
                TagBoxNote->"168"],
               StyleBox["168", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[168, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10454$10502, 
                 FEPrivate`Not[DynamicChart`click$10454$10502]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$10454$10502, {{{1., 0.}, {0., 
               1.}}, {-0.005510868473632388, 0.1999240614049903}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$10454$10502}]],
           "DelayedClickEffect"]}, 
         {RGBColor[0.624866, 0.673302, 0.264296], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-2.976245671821909, 
                    0.055115660589294624`}]},
                   
                   ImageSizeCache->{{30.090185997446753`, 
                    295.71421356237306`}, {-10.702324257454109`, 
                    131.71421356237306`}}],
                  "DelayedMouseEffectStyle"], {}},
                StatusArea[#, 165]& ,
                TagBoxNote->"165"],
               StyleBox["165", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[165, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10464$10502, 
                 FEPrivate`Not[DynamicChart`click$10464$10502]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$10464$10502, {{{1., 0.}, {0., 1.}}, {
               0.02200164419881592, -0.19878613546358992`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$10464$10502}]],
           "DelayedClickEffect"]}, 
         {RGBColor[0.72987, 0.239399, 0.230961], EdgeForm[{GrayLevel[0], 
          Opacity[0.5]}], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 
                    1., {-3.141592653589793, -2.976245671821909}]},
                   
                   ImageSizeCache->{{28.28578643762691, 
                    163.41421356237308`}, {-3.4142135623731313`, 
                    21.190077856514247`}}],
                  "DelayedMouseEffectStyle"], {}},
                StatusArea[#, 9]& ,
                TagBoxNote->"9"],
               StyleBox["9", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[9, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10470$10502, 
                 FEPrivate`Not[DynamicChart`click$10470$10502]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$10470$10502, {{{1., 0.}, {0., 
               1.}}, {-0.19931689860133397`, -0.016515869094466534`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$10470$10502}]],
           "DelayedClickEffect"]}}}, {}}, {}}, {{{
        TagBox[GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             
             TagBox[{{}, {{}, 
                InsetBox["\<\"MALE\"\>", \
{-0.018369561578774625, 0.6664135380166343}]}},
              StatusArea[#, 168]& ,
              TagBoxNote->"168"],
             StyleBox["168", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[168, {}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10454$10502, 
               FEPrivate`Not[DynamicChart`click$10454$10502]], PassEventsDown -> 
             True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
          FEPrivate`If[
           DynamicChart`click$10454$10502, {{{1., 0.}, {0., 
             1.}}, {-0.005510868473632388, 0.1999240614049903}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}], 
           TrackedSymbols :> {DynamicChart`click$10454$10502}]],
         "DelayedClickEffect"], 
        TagBox[GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             
             TagBox[{{}, {{}, 
                InsetBox["\<\"FEMALE\"\>", \
{0.07333881399605305, -0.6626204515452996}]}},
              StatusArea[#, 165]& ,
              TagBoxNote->"165"],
             StyleBox["165", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[165, {}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10464$10502, 
               FEPrivate`Not[DynamicChart`click$10464$10502]], PassEventsDown -> 
             True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
          FEPrivate`If[
           DynamicChart`click$10464$10502, {{{1., 0.}, {0., 1.}}, {
             0.02200164419881592, -0.19878613546358992`}}, {{1, 0}, {0, 
            1}}, {{1, 0}, {0, 1}}], 
           TrackedSymbols :> {DynamicChart`click$10464$10502}]],
         "DelayedClickEffect"], 
        TagBox[GeometricTransformationBox[
          TagBox[
           TagBox[
            TooltipBox[
             
             TagBox[{{}, {{}, 
                InsetBox["\<\"Unknown\"\>", \
{-0.6643896620044465, -0.05505289698155511}]}},
              StatusArea[#, 9]& ,
              TagBoxNote->"9"],
             StyleBox["9", {}, StripOnInput -> False]],
            Annotation[#, 
             Style[9, {}], "Tooltip"]& ],
           
           EventHandlerTag[{
            "MouseClicked" :> FEPrivate`Set[DynamicChart`click$10470$10502, 
               FEPrivate`Not[DynamicChart`click$10470$10502]], PassEventsDown -> 
             True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
          FEPrivate`If[
           DynamicChart`click$10470$10502, {{{1., 0.}, {0., 
             1.}}, {-0.19931689860133397`, -0.016515869094466534`}}, {{1, 
            0}, {0, 1}}, {{1, 0}, {0, 1}}], 
           TrackedSymbols :> {DynamicChart`click$10470$10502}]],
         "DelayedClickEffect"]}, {}}, {}}, {}, {}},
    DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
  ContentSelectable->False,
  DisplayFunction->Identity,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-1., 1.}, {-1., 1.}},
  PlotRangePadding->Scaled[0.09166666666666669]]], "Output",
 CellChangeTimes->{{3.86004278794059*^9, 3.8600428351501603`*^9}, {
   3.860042874116823*^9, 3.8600428809379168`*^9}, 3.8600430014627776`*^9, 
   3.8600432698475275`*^9, 3.860044580165554*^9, {3.8600446167885666`*^9, 
   3.860044651428007*^9}, 3.860046464800207*^9, 3.8600498107202387`*^9, 
   3.8600923216916103`*^9, 3.8601337903219757`*^9, 3.8601353884391994`*^9, 
   3.8602183920440984`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"67cf53c3-991a-498d-b59b-977cc34c8fc6"]
}, Open  ]],

Cell["\<\
It was observed that the male and female populations are almost balanced and \
9 samples are unknown. \
\>", "Text",
 CellChangeTimes->{{3.8601342039626074`*^9, 3.860134262967782*^9}, {
  3.8601375046937485`*^9, 
  3.8601375094221992`*^9}},ExpressionUUID->"15f1ab48-4761-4bfd-89fd-\
ee5536e2e9db"],

Cell["\<\
A histogram was plotted to understand if each of the species had equal number \
of male and female species. It is evident from the graphs that the penguins \
that belonged to species Adelie has equal number of male and female species \
with 5 observations being unknown. Chinstrap penguins had equal number of \
male and female species as well  whereas Gentoo penguins had a slightly \
higher number of male species than female species with 4 observations \
belonging to unknown.\
\>", "Text",
 CellChangeTimes->{{3.8601375370708165`*^9, 3.8601375512658567`*^9}, {
  3.860137733190899*^9, 
  3.860137949796492*^9}},ExpressionUUID->"e2b753e5-44a5-4b1a-b5f8-\
17c47bc42e4a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"speciesbygender", "=", " ", 
   RowBox[{"data", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<species\>\"", ",", "\"\<sex\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"speciesbygender", " ", "=", " ", 
   RowBox[{"speciesbygender", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<sex\>\"", "->", 
       RowBox[{"Replace", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<FEMALE\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<MALE\>\"", "->", "2"}], ",", 
          RowBox[{"\"\<Unknown\>\"", "->", "3"}]}], "}"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"speciesbygender", "[", 
  RowBox[{
   RowBox[{"GroupBy", "[", "\"\<species\>\"", "]"}], ",", "Histogram", ",", 
   "\"\<sex\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.86013550113303*^9, 3.8601355232477303`*^9}, 
   3.8601357235826015`*^9, {3.860135896060912*^9, 3.860136037523813*^9}, {
   3.860136115683852*^9, 3.860136226261342*^9}, {3.860136271698043*^9, 
   3.86013628486579*^9}, {3.860136318454423*^9, 3.8601365091678696`*^9}, {
   3.8601365664278507`*^9, 3.860136607841037*^9}, {3.860136644517228*^9, 
   3.8601366612564898`*^9}, {3.86013669609903*^9, 3.8601367171713495`*^9}, {
   3.8601367937637835`*^9, 3.86013682969243*^9}, 3.8601368688238506`*^9, {
   3.860138037087795*^9, 3.860138080054698*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b2282cd1-9712-407e-993c-3a652cdbad85"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Adelie" -> Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6649999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6649999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{0.5, 0}, {1.5, 73.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 73], 
                Style[73, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{1.5, 0}, {2.5, 73.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 73], 
                Style[73, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{2.5, 0}, {3.5, 5.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 5], 
                Style[5, {}]]}}}, {}, {}}}, {{}, {}, {}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {0.44, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{0.5, 3.5}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], "Chinstrap" -> 
       Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6719999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6719999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{0.5, 0}, {1.5, 34.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 34], 
                Style[34, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{1.5, 0}, {2.5, 34.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 34], 
                Style[34, {}]]}}}, {}, {}}}, {{}, {}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {0.46, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{0.5, 2.5}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], "Gentoo" -> 
       Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6649999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6649999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{0.5, 0}, {1.5, 58.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 58], 
                Style[58, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{1.5, 0}, {2.5, 61.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 61], 
                Style[61, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{2.5, 0}, {3.5, 4.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 4], 
                Style[4, {}]]}}}, {}, {}}}, {{}, {}, {}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {0.44, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{0.5, 3.5}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`AtomShape[60]]], 3, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["Adelie", "Chinstrap", "Gentoo"]], 
       TypeSystem`Atom[Graphics], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`AtomShape[60]]], 3, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["Adelie", "Chinstrap", "Gentoo"]], 
       TypeSystem`Atom[Graphics], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 3, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Adelie", 
                  Style[
                  "Adelie", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Adelie"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Adelie"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5, 0}, {1.5, 73.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 73]& , 
                    TagBoxNote -> "73"], 
                    StyleBox["73", {}, StripOnInput -> False]], Annotation[#, 
                    Style[73, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5, 0}, {2.5, 73.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 73]& , 
                    TagBoxNote -> "73"], 
                    StyleBox["73", {}, StripOnInput -> False]], Annotation[#, 
                    Style[73, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2.5, 0}, {3.5, 5.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 5]& , 
                    TagBoxNote -> "5"], 
                    StyleBox["5", {}, StripOnInput -> False]], Annotation[#, 
                    Style[5, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}, {}, {}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0.44, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                  PlotRange -> {{0.5, 3.5}, {All, All}}, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Adelie"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Chinstrap", 
                  Style[
                  "Chinstrap", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Chinstrap"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Chinstrap"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6719999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5, 0}, {1.5, 34.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 34]& , 
                    TagBoxNote -> "34"], 
                    StyleBox["34", {}, StripOnInput -> False]], Annotation[#, 
                    Style[34, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5, 0}, {2.5, 34.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 34]& , 
                    TagBoxNote -> "34"], 
                    StyleBox["34", {}, StripOnInput -> False]], Annotation[#, 
                    Style[34, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}, {}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0.46, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                  PlotRange -> {{0.5, 2.5}, {All, All}}, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Chinstrap"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Gentoo", 
                  Style[
                  "Gentoo", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Gentoo"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Gentoo"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5, 0}, {1.5, 58.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 58]& , 
                    TagBoxNote -> "58"], 
                    StyleBox["58", {}, StripOnInput -> False]], Annotation[#, 
                    Style[58, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5, 0}, {2.5, 61.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 61]& , 
                    TagBoxNote -> "61"], 
                    StyleBox["61", {}, StripOnInput -> False]], Annotation[#, 
                    Style[61, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2.5, 0}, {3.5, 4.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 4]& , 
                    TagBoxNote -> "4"], 
                    StyleBox["4", {}, StripOnInput -> False]], Annotation[#, 
                    Style[4, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}, {}, {}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0.44, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                  PlotRange -> {{0.5, 3.5}, {All, All}}, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Gentoo"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{211., {112.92062981973868`, 118.07937018026132`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{211., {112.92062981973868`, 118.07937018026132`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8601363450652094`*^9, 3.8601363871734023`*^9}, 
   3.860136458769326*^9, {3.8601365043304644`*^9, 3.8601365105656385`*^9}, 
   3.8601366108636136`*^9, {3.8601366519398146`*^9, 3.8601366626151857`*^9}, {
   3.8601367028691196`*^9, 3.8601367193950543`*^9}, 3.860136839582915*^9, 
   3.860136870090413*^9, 3.8601380509576054`*^9, 3.8601380810006924`*^9, 
   3.8602183976111307`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"999df66c-1a49-4bce-88c1-0cd4661e2579"]
}, Open  ]],

Cell["\<\
To gain a little more information on how the data was collected a histogram \
was plotted to understand if the observations of each species of the penguin \
was collected in different islands or not. We see that the observations from \
species Adelie has been collected from all the three islands whereas \
Chinstrap and Gentoo were collected from a single island (Torgersen or Biscoe \
or Dream).\
\>", "Text",
 CellChangeTimes->{{3.8601386098848124`*^9, 3.8601386401691895`*^9}, {
  3.8601386991382275`*^9, 
  3.8601388740213184`*^9}},ExpressionUUID->"56b1b526-7741-4f51-aca1-\
2b9eb54ae5f9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"islanddata", "=", " ", 
   RowBox[{"data", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<species\>\"", ",", "\"\<island\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"islanddata", " ", "=", 
   RowBox[{"islanddata", "[", 
    RowBox[{"All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<island\>\"", "->", 
       RowBox[{"Replace", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Torgersen\>\"", "->", "1"}], ",", 
          RowBox[{"\"\<Biscoe\>\"", "->", "2"}], ",", 
          RowBox[{"\"\<Dream\>\"", "->", "3"}]}], "}"}], "]"}]}], "}"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"islanddata", "[", 
  RowBox[{
   RowBox[{"GroupBy", "[", "\"\<species\>\"", "]"}], ",", "Histogram", ",", 
   "\"\<island\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.8601367273131437`*^9, 3.860136766203391*^9}, {
  3.8601382431415787`*^9, 3.8601382768372335`*^9}, {3.860138320069661*^9, 
  3.860138323952756*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f391c8c5-edd8-4d7a-a45e-0d19a010511a"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|"Adelie" -> Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6649999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6649999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{0.5, 0}, {1.5, 51.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 51], 
                Style[51, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{1.5, 0}, {2.5, 44.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 44], 
                Style[44, {}]]}, {
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{2.5, 0}, {3.5, 56.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 56], 
                Style[56, {}]]}}}, {}, {}}}, {{}, {}, {}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {0.44, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{0.5, 3.5}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], "Chinstrap" -> 
       Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6789999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6789999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{2., 0}, {4., 68.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 68], 
                Style[68, {}]]}}}, {}, {}}}, {{}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {1.96, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{2., 4.}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], "Gentoo" -> 
       Graphics[{{
           Directive[
            EdgeForm[
             Directive[
              Thickness[Small], 
              Opacity[0.6789999999999999]]], 
            RGBColor[
            0.987148, 0.8073604000000001, 0.49470040000000004`]], {{}, {
             Directive[
              EdgeForm[
               Directive[
                Thickness[Small], 
                Opacity[0.6789999999999999]]], 
              RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
               Tooltip[
                StatusArea[{
                  Charting`DelayedMouseEffect[
                   Rectangle[{2., 0}, {4., 123.}, "RoundingRadius" -> 0], {
                   "Style", 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}]}]}, 123], 
                Style[123, {}]]}}}, {}, {}}}, {{}}}, {
         AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
          AxesLabel -> {None, None}, AxesOrigin -> {1.96, 0}, 
          FrameLabel -> {{None, None}, {None, None}}, 
          FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
          GridLines -> {None, None}, GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]], PlotRange -> {{2., 4.}, {All, All}}, 
          PlotRangePadding -> {{
             Scaled[0.02], 
             Scaled[0.02]}, {
             Scaled[0.02], 
             Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`AtomShape[60]]], 3, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["Adelie", "Chinstrap", "Gentoo"]], 
       TypeSystem`Atom[Graphics], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[94.5], 
         TypeSystem`PackageScope`AtomShape[60]]], 3, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        TypeSystem`Enumeration["Adelie", "Chinstrap", "Gentoo"]], 
       TypeSystem`Atom[Graphics], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 3, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Adelie", 
                  Style[
                  "Adelie", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Adelie"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Adelie"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6649999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{0.5, 0}, {1.5, 51.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 51]& , 
                    TagBoxNote -> "51"], 
                    StyleBox["51", {}, StripOnInput -> False]], Annotation[#, 
                    Style[51, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{1.5, 0}, {2.5, 44.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 44]& , 
                    TagBoxNote -> "44"], 
                    StyleBox["44", {}, StripOnInput -> False]], Annotation[#, 
                    Style[44, {}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2.5, 0}, {3.5, 56.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 56]& , 
                    TagBoxNote -> "56"], 
                    StyleBox["56", {}, StripOnInput -> False]], Annotation[#, 
                    Style[56, {}], 
                    "Tooltip"]& ]}}}, {}, {}}}, {{}, {}, {}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0.44, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], 
                  PlotRange -> {{0.5, 3.5}, {All, All}}, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Adelie"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Chinstrap", 
                  Style[
                  "Chinstrap", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Chinstrap"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Chinstrap"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6789999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6789999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    RectangleBox[{2., 0}, {4., 68.}, "RoundingRadius" -> 0]}],
                     "DelayedMouseEffectStyle"]}, StatusArea[#, 68]& , 
                    TagBoxNote -> "68"], 
                    StyleBox["68", {}, StripOnInput -> False]], Annotation[#, 
                    Style[68, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.96, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], PlotRange -> {{2., 4.}, {All, All}},
                   PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Chinstrap"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Gentoo", 
                  Style[
                  "Gentoo", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Gentoo"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Gentoo"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{94.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6789999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 
                    0.49470040000000004`]], {{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Thickness[Small], 
                    Opacity[0.6789999999999999]]], 
                    RGBColor[
                    0.987148, 0.8073604000000001, 0.49470040000000004`]], {{
                    TagBox[
                    TooltipBox[
                    TagBox[{
                    TagBox[
                    DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[1.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    RectangleBox[{2., 0}, {4., 123.}, "RoundingRadius" -> 
                    0]}], "DelayedMouseEffectStyle"]}, StatusArea[#, 123]& , 
                    TagBoxNote -> "123"], 
                    StyleBox["123", {}, StripOnInput -> False]], Annotation[#, 
                    Style[123, {}], "Tooltip"]& ]}}}, {}, {}}}, {{}}}, {
                 PlotRangeClipping -> True, Frame -> True, FrameStyle -> 
                  GrayLevel[0.85], Ticks -> None, FrameTicks -> None, Axes -> 
                  None, ImageSize -> 112, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {1.96, 0}, 
                  FrameLabel -> {{None, None}, {None, None}}, 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], PlotRange -> {{2., 4.}, {All, All}},
                   PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Gentoo"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{211., {112.92062981973868`, 118.07937018026132`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{211., {112.92062981973868`, 118.07937018026132`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8601367618245826`*^9, 3.8601367670645056`*^9}, 
   3.8601368613332767`*^9, {3.860138313238943*^9, 3.860138324747954*^9}, 
   3.860218400607411*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"ccd54673-71a2-433c-884c-fad2828ce2e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Outlier Detection:", "Subsubsection",
 CellChangeTimes->{{3.860134743287902*^9, 
  3.8601347589275217`*^9}},ExpressionUUID->"e0ecd1fc-67c9-4570-9b65-\
d172469ccb93"],

Cell["\<\
Next we plot box plots to see if there are any outliers in the data.\
\>", "Text",
 CellChangeTimes->{{3.8601346908595295`*^9, 
  3.8601347192054358`*^9}},ExpressionUUID->"87b82f34-c2a0-43b0-8742-\
06129e1443fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GraphicsColumn", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Normal", "[", 
         RowBox[{"data", "[", 
          RowBox[{"All", ",", "3"}], "]"}], "]"}], ",", 
        RowBox[{"Normal", "[", 
         RowBox[{"data", "[", 
          RowBox[{"All", ",", "4"}], "]"}], "]"}], ",", 
        RowBox[{"Normal", "[", 
         RowBox[{"data", "[", 
          RowBox[{"All", ",", "5"}], "]"}], "]"}]}], "}"}], ",", 
      RowBox[{
      "PlotLabel", "->", " ", 
       "\"\<Box Plots of culmen length,depth and flipper length\>\""}]}], 
     "]"}], ",", 
    RowBox[{"BoxWhiskerChart", "[", 
     RowBox[{
      RowBox[{"Normal", "[", 
       RowBox[{"data", "[", 
        RowBox[{"All", ",", "6"}], "]"}], "]"}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Box plot of body mass\>\""}]}], 
     "]"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8600470105217013`*^9, 3.860047089646541*^9}, {
   3.8600471570709653`*^9, 3.86004716014545*^9}, {3.860047237692669*^9, 
   3.8600472609002533`*^9}, {3.8600473366307917`*^9, 3.8600473405511017`*^9}, 
   3.860047552067145*^9, {3.860048324517003*^9, 3.8600484051696053`*^9}, {
   3.8600484399214506`*^9, 3.8600484619374075`*^9}, {3.860048527031378*^9, 
   3.860048538602934*^9}, {3.8600486564184957`*^9, 3.8600486584228907`*^9}, {
   3.8600487241440816`*^9, 3.8600488209225435`*^9}, 3.860049043926117*^9, {
   3.860134301493131*^9, 3.8601343946093445`*^9}, {3.8601344248428855`*^9, 
   3.8601346479452734`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a3da6bf1-b56e-4d6d-9ed2-128726eb8dc6"],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4756035092865898, 2.2049999999999983`}, {
         3.52439649071341, 241.895}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{0.7509076238812251, 48.5}, {1.2490923761187749`,
                   48.5}, {1.2490923761187749`, 39.2}, {0.7509076238812251, 
                  39.2}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{1.2490923761187749`, 44.45}, {0.7509076238812251, 
                   44.45}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1., 39.2}, {1., 32.1}}, {{1., 48.5}, {1., 
                   59.6}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1.1245461880593874`, 32.1}, {0.8754538119406126, 
                   32.1}}, {{1.1245461880593874`, 59.6}, {0.8754538119406126, 
                   59.6}}}]}, {}}]},
              
              ImageSizeCache->{{64.88743818232105, 
               103.72037608453692`}, {-44.288162658209785`, \
-25.835831697480597`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "59.6`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "48.5`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "44.45`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "39.2`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "32.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 59.6}, {
                Style["75%", Bold], 48.5}, {
                Style["median", Bold], 44.45}, {
                Style["25%", Bold], 39.2}, {
                Style["min", Bold], 32.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{1.7509076238812251`, 18.7}, {2.249092376118775, 
                  18.7}, {2.249092376118775, 15.6}, {1.7509076238812251`, 
                  15.6}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{2.249092376118775, 17.3}, {1.7509076238812251`, 
                   17.3}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{2., 15.6}, {2., 13.1}}, {{2., 18.7}, {2., 
                   21.5}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{2.124546188059387, 13.1}, {1.8754538119406126`, 
                   13.1}}, {{2.124546188059387, 21.5}, {1.8754538119406126`, 
                   21.5}}}]}, {}}]},
              
              ImageSizeCache->{{137.15884074082737`, 
               175.99177864304326`}, {-22.64195407090244, \
-15.041134501710513`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "21.5`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "18.7`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "17.3`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "15.6`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "13.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 21.5}, {
                Style["75%", Bold], 18.7}, {
                Style["median", Bold], 17.3}, {
                Style["25%", Bold], 15.6}, {
                Style["min", Bold], 13.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{2.750907623881225, 213}, {
                   3.249092376118775, 213}, {3.249092376118775, 190}, {
                   2.750907623881225, 190}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{3.249092376118775, 197}, {
                    2.750907623881225, 197}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  LineBox[{{{3., 190}, {3., 172}}, {{3., 213}, {3., 231}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{3.124546188059387, 172}, {
                    2.875453811940613, 172}}, {{3.124546188059387, 231}, {
                    2.875453811940613, 231}}}]}, {}}]},
              
              ImageSizeCache->{{209.43024329933365`, 
               248.26318120154957`}, {-141.6676942032093, \
-105.31889157580864`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "231"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "213"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], "197"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "190"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "172"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 231}, {
                Style["75%", Bold], 213}, {
                Style["median", Bold], 197}, {
                Style["25%", Bold], 190}, {
                Style["min", Bold], 172}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.6259983862693477, 2.2049999999999983`},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.7509076238812251, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          3.249092376118775, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.7509076238812251, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          3.249092376118775, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{25.246093219611808`, 0.5}, {3., 17.863281249999986`}},
      PlotLabel->FormBox[
       "\"Box Plots of culmen length,depth and flipper length\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{1., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
         0.7509076238812251, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         3.249092376118775, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {184.89202615704085, -118.72406319678281}, 
     ImageScaled[{0.5, 0.5}], {352.175287918173, 222.60761849396778}], 
    InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.19605693430634064`, 2520.}, {2.1960569343063403`, 
         6480.}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{0.8039430656936596, 4750}, {
                   1.1960569343063403`, 4750}, {1.1960569343063403`, 3550}, {
                   0.8039430656936596, 3550}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{1.1960569343063403`, 4050}, {
                    0.8039430656936597, 4050}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1., 3550}, {1., 2700}}, {{1., 4750}, {
                    1., 6300}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1.0980284671531702`, 2700}, {
                    0.9019715328468298, 2700}}, {{
                    1.0980284671531702`, 6300}, {
                    0.9019715328468298, 6300}}}]}, {}}]},
              
              ImageSizeCache->{{137.10205124083734`, 
               176.04856814303332`}, {-141.66769420320966`, \
-15.041134501710545`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "6300"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "4750"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "4050"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "3550"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "2700"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 6300}, {
                Style["75%", Bold], 4750}, {
                Style["median", Bold], 4050}, {
                Style["25%", Bold], 3550}, {
                Style["min", Bold], 2700}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.7843373722630256, 2520.},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.8039430656936596, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          1.1960569343063403`, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.8039430656936596, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          1.1960569343063403`, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{25.246093219611808`, 0.5}, {3., 17.86328124999993}},
      PlotLabel->FormBox["\"Box plot of body mass\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{1., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
         0.8039430656936596, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         1.1960569343063403`, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {184.89202615704085, -356.1721895903484}, 
     ImageScaled[{0.5, 0.5}], {352.175287918173, 222.60761849396772}]}, {}},
  ImageSize->{
    UpTo[360], 
    UpTo[445]},
  PlotRange->{{0, 369.7840523140817}, {-474.8962527871312, 0}},
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{3.86021841880118*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"7f82922e-e46d-4cbf-a03e-dcae0c479d70"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{0.4756035092865898, 2.2049999999999983`}, {
         3.52439649071341, 241.895}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{0.7509076238812251, 48.5}, {1.2490923761187749`,
                   48.5}, {1.2490923761187749`, 39.2}, {0.7509076238812251, 
                  39.2}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{1.2490923761187749`, 44.45}, {0.7509076238812251, 
                   44.45}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1., 39.2}, {1., 32.1}}, {{1., 48.5}, {1., 
                   59.6}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1.1245461880593874`, 32.1}, {0.8754538119406126, 
                   32.1}}, {{1.1245461880593874`, 59.6}, {0.8754538119406126, 
                   59.6}}}]}, {}}]},
              
              ImageSizeCache->{{64.88743818232105, 
               103.72037608453692`}, {-44.288162658209785`, \
-25.835831697480597`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "59.6`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "48.5`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "44.45`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "39.2`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "32.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 59.6}, {
                Style["75%", Bold], 48.5}, {
                Style["median", Bold], 44.45}, {
                Style["25%", Bold], 39.2}, {
                Style["min", Bold], 32.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{1.7509076238812251`, 18.7}, {2.249092376118775, 
                  18.7}, {2.249092376118775, 15.6}, {1.7509076238812251`, 
                  15.6}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{2.249092376118775, 17.3}, {1.7509076238812251`, 
                   17.3}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{2., 15.6}, {2., 13.1}}, {{2., 18.7}, {2., 
                   21.5}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{2.124546188059387, 13.1}, {1.8754538119406126`, 
                   13.1}}, {{2.124546188059387, 21.5}, {1.8754538119406126`, 
                   21.5}}}]}, {}}]},
              
              ImageSizeCache->{{137.15884074082737`, 
               175.99177864304326`}, {-22.64195407090244, \
-15.041134501710513`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "21.5`"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "18.7`"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "17.3`"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "15.6`"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "13.1`"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 21.5}, {
                Style["75%", Bold], 18.7}, {
                Style["median", Bold], 17.3}, {
                Style["25%", Bold], 15.6}, {
                Style["min", Bold], 13.1}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], "Tooltip"]& ]}, 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{2.750907623881225, 213}, {
                   3.249092376118775, 213}, {3.249092376118775, 190}, {
                   2.750907623881225, 190}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{3.249092376118775, 197}, {
                    2.750907623881225, 197}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  LineBox[{{{3., 190}, {3., 172}}, {{3., 213}, {3., 231}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{3.124546188059387, 172}, {
                    2.875453811940613, 172}}, {{3.124546188059387, 231}, {
                    2.875453811940613, 231}}}]}, {}}]},
              
              ImageSizeCache->{{209.43024329933365`, 
               248.26318120154957`}, {-141.6676942032093, \
-105.31889157580864`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "231"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "213"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], "197"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "190"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "172"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 231}, {
                Style["75%", Bold], 213}, {
                Style["median", Bold], 197}, {
                Style["25%", Bold], 190}, {
                Style["min", Bold], 172}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{{}, {}}, {}}, {{{}, {}}, {}}, \
{{{}, {}}, {}}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.6259983862693477, 2.2049999999999983`},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.7509076238812251, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          3.249092376118775, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.7509076238812251, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          3.249092376118775, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{25.246093219611808`, 0.5}, {3., 17.863281249999986`}},
      PlotLabel->FormBox[
       "\"Box Plots of culmen length,depth and flipper length\"", 
        TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{1., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {2., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {3., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
         0.7509076238812251, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         3.249092376118775, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {184.89202615704085, -118.72406319678281}, 
     ImageScaled[{0.5, 0.5}], {352.175287918173, 222.60761849396778}], 
    InsetBox[
     GraphicsBox[{
       {Opacity[0], 
        PointBox[{{-0.19605693430634064`, 2520.}, {2.1960569343063403`, 
         6480.}}]}, 
       {RGBColor[0.982864, 0.7431472, 0.3262672], CapForm[None], {}, 
        {RGBColor[0.982864, 0.7431472, 0.3262672], 
         {RGBColor[0.982864, 0.7431472, 0.3262672], 
          TagBox[
           TooltipBox[
            TagBox[
             DynamicBox[{
               FEPrivate`If[
                CurrentValue["MouseOver"], 
                EdgeForm[{
                  GrayLevel[0.5], 
                  AbsoluteThickness[1.5], 
                  Opacity[0.66]}], {}, {}], 
               GraphicsGroupBox[{Antialiasing -> False, 
                 
                 PolygonBox[{{0.8039430656936596, 4750}, {
                   1.1960569343063403`, 4750}, {1.1960569343063403`, 3550}, {
                   0.8039430656936596, 3550}}], {}, {{}, {}}, {}, {
                  GrayLevel[0], 
                  GrayLevel[1], 
                  
                  LineBox[{{1.1960569343063403`, 4050}, {
                    0.8039430656936597, 4050}}]}, {}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1., 3550}, {1., 2700}}, {{1., 4750}, {
                    1., 6300}}}]}, {
                  GrayLevel[0], 
                  GrayLevel[0.5], 
                  
                  LineBox[{{{1.0980284671531702`, 2700}, {
                    0.9019715328468298, 2700}}, {{
                    1.0980284671531702`, 6300}, {
                    0.9019715328468298, 6300}}}]}, {}}]},
              
              ImageSizeCache->{{137.10205124083734`, 
               176.04856814303332`}, {-141.66769420320966`, \
-15.041134501710545`}}],
             "DelayedMouseEffectStyle"],
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["\"max\"", Bold, StripOnInput -> False], "6300"}, {
                 StyleBox["\"75%\"", Bold, StripOnInput -> False], "4750"}, {
                 StyleBox["\"median\"", Bold, StripOnInput -> False], 
                 "4050"}, {
                 StyleBox["\"25%\"", Bold, StripOnInput -> False], "3550"}, {
                 StyleBox["\"min\"", Bold, StripOnInput -> False], "2700"}}, 
               GridBoxAlignment -> {"Columns" -> {Center, ".", {Left}}}, 
               AutoDelete -> False, GridBoxDividers -> {"Columns" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}, "Rows" -> {
                   Directive[
                    GrayLevel[0.3]], {
                    Directive[
                    GrayLevel[0.3]]}, 
                   Directive[
                    GrayLevel[0.3]]}}, 
               GridBoxFrame -> {
                "ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> GrayLevel[0]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> Directive[
                 AbsoluteThickness[1], 
                 Dashing[{}]]], "Grid"], {}, StripOnInput -> False]],
           Annotation[#, 
            Style[
             Grid[{{
                Style["max", Bold], 6300}, {
                Style["75%", Bold], 4750}, {
                Style["median", Bold], 4050}, {
                Style["25%", Bold], 3550}, {
                Style["min", Bold], 2700}}, Dividers -> {{
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}, {
                 Directive[
                  GrayLevel[0.3]], {
                  Directive[
                   GrayLevel[0.3]]}, 
                 Directive[
                  GrayLevel[0.3]]}}, Alignment -> {{Center, ".", {Left}}}, 
              Frame -> GrayLevel[0], BaseStyle -> Directive[
                AbsoluteThickness[1], 
                Dashing[{}]]], {}], 
            "Tooltip"]& ]}}, {}, {}}, {{{{{{}, {}}, {}}, {}}, {}}, {}}, {}},
      AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
      Axes->{False, False},
      AxesLabel->{None, None},
      AxesOrigin->{0.7843373722630256, 2520.},
      DisplayFunction->Identity,
      Frame->True,
      FrameLabel->{{None, None}, {None, None}},
      FrameTicks->{{Automatic, Automatic}, {{{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.8039430656936596, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          1.1960569343063403`, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, {{1., 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
          0.8039430656936596, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
          1.1960569343063403`, 
           FormBox[
            TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}}},
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImagePadding->{{25.246093219611808`, 0.5}, {3., 17.86328124999993}},
      PlotLabel->FormBox["\"Box plot of body mass\"", TraditionalForm],
      PlotRangePadding->{{
         Scaled[0.05], 
         Scaled[0.05]}, {
         Scaled[0.05], 
         Scaled[0.05]}},
      Ticks->{{{1., 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0.008, 0}}, {
         0.8039430656936596, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}, {
         1.1960569343063403`, 
          FormBox[
           TemplateBox[{0}, "Spacer1"], TraditionalForm], {0, 0}}}, 
        Automatic}], {184.89202615704085, -356.1721895903484}, 
     ImageScaled[{0.5, 0.5}], {352.175287918173, 222.60761849396772}]}, {}},
  ImageSize->{
    UpTo[360], 
    UpTo[445]},
  PlotRange->{{0, 369.7840523140817}, {-474.8962527871312, 0}},
  PlotRangePadding->{6, 5}]], "Input",
 CellChangeTimes->{{3.860144518082712*^9, 
  3.860144521513318*^9}},ExpressionUUID->"73b98eec-1a61-476b-9829-\
fc33c620a2c4"],

Cell["\<\
We see that there are no points lying outside the whiskers hence there are no \
outliers.\
\>", "Text",
 CellChangeTimes->{{3.8601347677976494`*^9, 
  3.860134803094982*^9}},ExpressionUUID->"68ba9342-f76e-4b18-a68f-\
5fed2d004a60"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Feature Relation:", "Subsubsection",
 CellChangeTimes->{{3.860138889198489*^9, 
  3.86013891392577*^9}},ExpressionUUID->"5c509b77-4c68-4939-b83b-\
ce938326948f"],

Cell["\<\
Since we want to use body measurements of the penguin to predict the type of \
species we see if there is any correlation between the numerical data.\
\>", "Text",
 CellChangeTimes->{{3.860144516474007*^9, 3.860144573590082*^9}, {
  3.860144669217873*^9, 3.8601446770346336`*^9}, {3.860144720860491*^9, 
  3.8601447426254025`*^9}},ExpressionUUID->"5624c3a8-f943-420d-a5da-\
c69832feac9a"],

Cell["\<\
We take the body measurement columns starting from index 3 to index 6 and \
form a correlation matrix. The first column and row corresponds to \
culmen_length_mm. The second column and row corresponds to culmen_depth_mm. \
The third column and row corresponds to flipper_length_mm. The last column \
and row corresponds to body_mass_g.\
\>", "Text",
 CellChangeTimes->{{3.8601448506294703`*^9, 3.8601448976042285`*^9}, {
  3.860145139242005*^9, 3.8601451531093135`*^9}, {3.86014518633331*^9, 
  3.860145191455242*^9}, {3.860145491419635*^9, 
  3.8601455862372007`*^9}},ExpressionUUID->"8a46a677-47c7-45cd-87a6-\
f271ddbe54f2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"numericdata", "=", 
   RowBox[{"Values", "[", 
    RowBox[{"Normal", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", 
       RowBox[{"3", ";;", "6"}]}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Correlation", "[", "numericdata", "]"}], "//", "MatrixForm", 
  " "}]}], "Input",
 CellChangeTimes->{{3.860061445842763*^9, 3.8600615483051095`*^9}, {
  3.8600616024710064`*^9, 3.860061603681061*^9}, {3.8601453693556075`*^9, 
  3.8601454340970697`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"45fa0a52-f2d1-4bac-81d0-115a37170cad"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1.`", 
      RowBox[{"-", "0.23505287035553268`"}], "0.6561813407464279`", 
      "0.5951098244376298`"},
     {
      RowBox[{"-", "0.23505287035553268`"}], "1.0000000000000007`", 
      RowBox[{"-", "0.5838512164654125`"}], 
      RowBox[{"-", "0.4719156211860664`"}]},
     {"0.6561813407464279`", 
      RowBox[{"-", "0.5838512164654125`"}], "1.0000000000000013`", 
      "0.8712017673060114`"},
     {"0.5951098244376298`", 
      RowBox[{"-", "0.4719156211860664`"}], "0.8712017673060114`", "1.`"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.860061605276984*^9, 3.8600923289158573`*^9, {3.8601453721720133`*^9, 
   3.8601453976804953`*^9}, 3.8601454374558535`*^9, 3.8602184263542557`*^9},
 CellLabel->
  "Out[30]//MatrixForm=",ExpressionUUID->"a63952bf-7783-422a-aef1-\
c0dbe3e2662e"]
}, Open  ]],

Cell["\<\
We see that culmen_length_mm has a positive correlation of 0.65 and 0.6 with \
flipper_length_mm and body_mass_g respectively.  We see a high correlation of \
0.87 in between flipper_length_mm and body_mass_g. This means if the \
flipper_length increases then the body_mass also increases.

Culmen_depth_mm and flipper_length_mm are negatively correlated to each \
other. For plotting purposes we take only these observations since the rest \
of the correlations are weak.  \
\>", "Text",
 CellChangeTimes->{{3.860145617259306*^9, 3.860145778821945*^9}, {
  3.8601458147416525`*^9, 3.8601459240153313`*^9}, {3.8601459882666187`*^9, 
  3.860145994839716*^9}, {3.8601462401400237`*^9, 
  3.860146348141735*^9}},ExpressionUUID->"0c925738-e6db-4f29-9e66-\
ede0d4451007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<species\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<culmen_length_mm\>\"", ",", "\"\<flipper_length_mm\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"PlotLegends", "->", "\"\<Expressions\>\""}], ",", 
   RowBox[{"AxesLabel", "->", "Automatic"}], ",", 
   RowBox[{"ImageSize", "->", "Large"}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", "\"\<Flipper Length vs Culmen Length\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.860049727019369*^9, 3.860049782967105*^9}, {
   3.860049910647378*^9, 3.86004996136522*^9}, 3.860050009219242*^9, {
   3.8600500661632423`*^9, 3.8600500768912916`*^9}, {3.860050163651134*^9, 
   3.860050172165541*^9}, {3.860146094954511*^9, 3.8601461135835376`*^9}, {
   3.860146361821021*^9, 3.8601463667438583`*^9}, {3.8601464606768785`*^9, 
   3.86014647366539*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"d9670f64-2db1-4c23-bf63-1f376fc727b0"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxtVruN20AQXThWA5fRiRq4BlZLyU4ucnaZYEAkdYkDN8AClB/kaKNrwA2w
ALmAyxipATdgifPejGfsBYTFYHd+b94+6uPXb18OH1JKr7ffff91ua1Tm9N9
1U72CXbuc3df663Y+yH/ON/WcxG7GeT8DfenPj/e13eLt9w/t+q/5Ftt1H/Z
0079l3jX4vPTHjvxP6GeCfYT4s89bMSfkO+J9fao3+qRPMhfB6n/Ef6px/4Z
9wZfz3SQeO9W3+L+G/4V+R5azb/4d63eF/xwf8/60d+MeeStnkt85jv48zHO
j/gXtd35yHlttV/pvyg+bn7j4Ouf2N9O8y/1X+Bf0d+19Xhm4ofzzvgl91gv
8Fh90vyyF8VT8lk9kR+ys5/Oxyff1qh/DvE0P/FF/eNG/SUe/NMRfjbPBc6f
nCf9Q3zOm++B+NSAZ8Y83vl+UP+b4efuNwGPNPj5JvZr59LXxsc7Wf+O3/pe
iTf9s55LvWE+l8CnK+ZbQ37G73Zaj+Pr3Ht+J/KxKP4yP/N3+lDJf/I36Bv9
T6ZXgnfR/A5/6sO6aP0Sv2g+OW/VdnqpeCFfPnr8K/iVbP6Rr7F/977SC/Cw
fE7fR84b81P9IL/5/jbBJv+OXg/nLuhl0K9m8PwgH1XPB6+f5M8qfl9Mv31/
fA/g1xz4yPwPwf/S+vvPxg9X39gHPoT3WcP7q//Ox+E1sR7Oq/P6kYHvmfyI
34ugz9SbKejrGL6X1Nf8gj3qqeEj8YviJ/esf4f/Puox+brx+Gq/4Pdf+v7/
eZleuv71vYO/I+dn+d28UsCD+c6hf/5/0P8DRfF0/G7C92sf8G+O+Q8GT5Ed

         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJx1U7ttwzAQFVJngXROkwW8wBW2RefTpEsnBAhJuUmRBbSGU6nyAlnAAygD
pHPlBbxAJL13R5CACRgU/Xj33rs73r9/vn7cVFW1Gn/TPi+pBR+R+xZ7F8VP
68DzIspyWj8b4kG+9+N6e8S5jzjviR+j/A7jumV+8Xm+XvmINwWfxj/Xxj/n
/yMujO8UD8xHPYsWei+qh7hsDZ/5Hko9Lzx7xC9ri4c/Z3qBr+0+8hM/6X3i
TaCfVE/UL/nP9Kse1Vu11OHsnOkb+WY/XuOJf62Mf+a7ezL/yJ/0oZ7ka1rW
O/kFv/KxP8MV/bIjfzFfx6QPfM7uQ5/mC4xP84j4jZ1LHP5TfzF/Ok/qj3zd
jv+rX9bvTNzmV/up85/yoz7UY/1M9SvrC39X3ov27+AsHvd13uln4H2hnov6
4zx71q8PuT59X2f2/6TztC7yO/OT1dP6k97nP5++/x0=
         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJx1VbFtw0AMfKT2Au6cJgtogS8iyZaTJp07I0AM2BKQImWaH8ALKJWrLOAF
NIAzgDtXXiALRBJ5JEg4DxjCm0/+8Xjk37++v7zdhRA++9/w/Tn1a1LGMKz1
jr5hQd+uiV9tv1Zz2kdnj3Uc/U/sf2F7LOV8NqxjIfEpHu6r42ZY3zntZzva
bzTe6P/xyHg4fmI8oeb/C7GP5zO2HzjetRA8dB/bZ+wfcrGP+Fr417SfloLP
8NHB7vjYF7f5AJ4Hn18ue1MP8S8kX8pH7XT/P/VJ4LcUvMSv8m3xbrmez3y+
Yftc4hl+E+f7lEt+ZEe9wS/wO/5kn8ue7kd9Gsav9TN21D9Cr9Aj8nP6AD84
38cn/gvBT/XX+lF+pfN3+e8dvonGp/+hH8aTCvGnemr+Bm9ifbVqJ345fnD8
gE/oFfo9a3+Q/pacX2P7A/14hb4bGw/916E/OL8ut3hXjO+C+9k/QD8O31T7
zfNlzgfoTfHRV/uT6qH69/W0+9rpG/WtBA/Nr9Lag/Jv9JMwv3A/24+YL+hH
nRcGf4J+qtv5RfBVSXyy6/20R39Af67+wBeBT/uJ8tF5Yfp9vbX8ir5h5/O/
S8FHfOu8snw3dj5hvm3cfDvz/Jf3pJL7zPuB+THB/HD9Hpy+vX4P4M+9f1PV
I+Ffit3wOwN+9z602j8337ds4c5rPYlPfc/+AARl6Cc=
         "]]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"culmen_length_mm\"", TraditionalForm], 
       FormBox["\"flipper_length_mm\"", TraditionalForm]}, 
     AxesOrigin -> {31.527083333333408`, 168.7222222222226}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Flipper Length vs Culmen Length\"", TraditionalForm], 
     PlotRange -> {{31.527083333333408`, 59.6}, {168.7222222222226, 231.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8600501861111574`*^9, 3.8600923305106745`*^9, 
  3.8601461162650394`*^9, 3.8601464760414147`*^9, 3.860218429927188*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"13422719-4879-4e9e-ae8a-354e521a38d3"]
}, Open  ]],

Cell["\<\
The penguins species Adelie has small culmen length and small flipper length. \
The Chinstrap species has a bigger culmen length as Adelie but the flipper \
length is the same as Adelie. Gentoo has a bigger bill length than Adelie  \
and almost the same bill length of Chinstrap species. However, the flipper \
length is higher than the other two species. \
\>", "Text",
 CellChangeTimes->{{3.860146496251684*^9, 3.860146675485261*^9}, {
  3.8601467119085736`*^9, 3.8601467600222807`*^9}, {3.8601467974475746`*^9, 
  3.860146803143141*^9}},ExpressionUUID->"8a7725f1-4e06-47b5-9bb2-\
d83d0d9a72bc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<species\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<culmen_length_mm\>\"", ",", "\"\<body_mass_g\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"PlotLegends", "->", "\"\<Expressions\>\""}], ",", 
   RowBox[{"AxesLabel", "->", "Automatic"}], ",", 
   RowBox[{"ImageSize", "->", "Large"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Body mass vs Culmen Length\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.860050206608569*^9, 3.8600502295381174`*^9}, {
  3.860146125285203*^9, 3.8601461322170362`*^9}, {3.860146853549697*^9, 
  3.860146887073038*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"2d20969c-226f-4cbc-b4ca-085f08f64a9e"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxdVj1oFFEQXiRYHfamis0WYiEEgpW8vb2LzVWpErAKeqQzcAiCIClSXpFC
lDtSyv6cd97epbU4UqW4WIkQsbIQey2Chfhu55v3/N7C8hjmzd8338zunf1n
O09vRFH01r6r83Jpn35qotXTmci5gFxNTHf1xC2Rn5RmOLDPXlPk3yPRZ7h/
PDabq6cHeWcs9weQ07mp4zUSkeP3ckZtOYeV+PsB/xclyz/HYt9HPlEpcsfn
KzL8359B9vaSf+ryr0+D+K9nkv8m7P+UiPNIzoMgv5OR+LuCvIH6fyUun1p/
G/G+fRD7boBv5u9LvqjvI/Axvl7xj3inBeut//rU/mm/Brj/ItBfwF+v5fRS
f9PVT/3bqjh/G0/qa7t86/yXTedf8ML9u3Pk6/MXfz6+1An9gwJ82RbZ9rM+
j6A/zBEP/q9nzI9z9HeB+w9z9q/8jduuPvK3i3oa8LesED9x9uIP9u+mqA/6
IhM8z2Bv+Sf2KeOl/a4mjE8rYzw74NNVwvhlLYcP3d8I5sXmR/11/kP+wP+9
EduvVczvzzn6C/0++rMwLr7ki3ptfwlfW7/Yo79bFce3eAk//H4gvuo8/8dv
4WOT8W3A3kx5P+g89aB/POf9pvPYx32d/6zp8CH8tZ7Y24t/yLuq9/ND+9Lh
lXD+/YB/EfQnI8bT4k/16/x1vb3gkTK+ut//Qt9H/yx/BV/gsxbwfx18PYL9
8znvw5sF70vtn+6vrxnzw82D/x7R/lT+aP6fCs4vn7P+O/q3BL+uZxwvKnl/
nQXzr3zag/7LlPOz+BAfXgXzGc6P7lPtz2nBeFl+iB737X6h/bGNfAZ+/mh/
WH7Tfn6D79ci3F8p2+t+Nbq/Upev5N92+Yl/n6/4h/xyxvifB/W7+Uf+2j+t
9xbi635331f4s/yh+8p/rT/WeTeuPukf9OsT7tdhzngcB/8rw4r/H9z/CmT9
fii/9f9J9brvF74//wB6uMdk
         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxdk61PA0EQxS8EiURQFBgUgqQJekV7H6UYFLUN1CJqqkhFFQqBKRoajn5w
hQSFOEUqjj+gCbpBYUCh2N78di/bTS6bubfz3pvZ2d3mxcn5mud5Ff0t93yp
QOX76VB2L5K9M1Gt5RoQ90aqvFwvvsRXQ3Xb16tRk3h7LHEf/HOiPjK9NuA/
i12++hg98MPExb9Gkl8HT+Cfg1+S3w3seeHDz92T+P3Bzzf1qcjiud4e8Swm
/9jy5fll+H8fqS+U+GAKXpV4B30Ffm3Ogz8MqCdy62kEK/o12w/Hr+bL9zS0
+Y4/7Tevp0X+O/7aFXhj0SsdSZwZfvztw99Fbz2h36FbX4peh/vNiDcnrv/0
GX3wrXv+g99M0YNfz4v447yZtzZ+3ri/lPvU8+rgr6Z+4uaU+Vvpn9Ez9afg
Zj4XoeWTfOK/mPmPXL9z3/ZH7rOYr9X+Sn3Ub+fJd/UHoc2X88W8SL+L9yfz
XfiR+ov+Of569GfB/Sv8pVXbH+FHX78vp59mHkrF+/sHSKQYVQ==
         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxtlL1rFFEUxQexi022MWkEQSyshAW7yBTZj2wiBItAINWCg12EEBtTBKsU
YSqbiJWFWIXdmedGUk1ltf4BBsFUW6XaNKkks3t/9z3u04HhcTnvfp1z73vY
33356k6SJO/qf3b+HNffvU6azL4PQzmTNTlXR+nHk/rb7ord/xef+4/xX/om
Z4r9Y5g2Z1/ZFrsqiAe+6dJs9n1pif10KHYG/sCJ/96q2E8KOQ+p55R8Vdvj
8/tN8IuRxJuAvx6QL+DSD/mfDaS+E/BP38Ve7kT1g08ceMTHMfmOSsuH9vcY
+7ykv5a/b/S4Un/i3aX+CXgDfZap5ybSp+ZH+uX+e/jOyLdT2HrPyT9+Ifbn
M/Cu1UP5rfWe4xvE26KfZtvnk3qw/w7+z982/r9Pyd/1fEr9+I8HFs+ZhzT0
KzjxHsFfFfQ39+v6hf+251v0x3aO/uBvqvm6Flf+an1FP+LH+ms9h4Fv0bPl
+zP1Hmk94H32qRnrG/oz8+rg91eoT+ZvXexGtB/1PIgd+DfxdP8q8K/sTxXm
SfQM9Ul+/HPdz47tT+f3KuJr09n7Oq8bcX7wG/g/Jv+bM6tnXlj7eTTfi6pv
T84e81ESfx9c92vi7Pzk8JeBX6p/y9cneoE7Z+tf0P3vef4MvqV8gS9F718e
6dOAH30/plF9ym/J/RV9j0I9Zt8XC8uv7rfuwxR9r9d9/8I38XZLy/dB9D7t
F/b9P9D54f3fIX7Zi/zh94/uX4gv9YV9NPNd6y984e/ne83m1/m/r/NFfxcR
vwvEz4jv56/j+TX9KV+6z29Hdj5Vn+vw3t4CRtgQKA==
         "]]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"culmen_length_mm\"", TraditionalForm], 
       FormBox["\"body_mass_g\"", TraditionalForm]}, 
     AxesOrigin -> {31.527083333333408`, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Body mass vs Culmen Length\"", TraditionalForm], 
     PlotRange -> {{31.527083333333408`, 59.6}, {0, 6300.}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.860050215756625*^9, 3.8600502304737563`*^9}, 
   3.8600923327968616`*^9, 3.8601461329555287`*^9, 3.8601468886681943`*^9, 
   3.860218432689674*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"3e56ce55-df31-41ae-9586-1718ce7aed83"]
}, Open  ]],

Cell["\<\
Chinstrap has higher culmen length as established previously but it has a \
lower body mass than the other species. Adelie has small culmen length \
however it has a slightly higher body mass than Chinstrap. Gentoo has high \
culmen length and high body mass.\
\>", "Text",
 CellChangeTimes->{{3.860146911921864*^9, 3.8601470853743887`*^9}, {
  3.8601479497026653`*^9, 
  3.860147975207559*^9}},ExpressionUUID->"52c3d4e4-0405-45ce-927c-\
fa295332d034"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"data", "[", 
    RowBox[{
     RowBox[{"GroupBy", "[", 
      RowBox[{"Key", "[", "\"\<species\>\"", "]"}], "]"}], ",", "All", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<flipper_length_mm\>\"", ",", "\"\<body_mass_g\>\""}], 
      "}"}]}], "]"}], ",", 
   RowBox[{"PlotLegends", "->", "\"\<Expressions\>\""}], ",", 
   RowBox[{"AxesLabel", "->", "Automatic"}], ",", 
   RowBox[{"ImageSize", "->", "Large"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Flipper Length vs Body mass\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.86005990019198*^9, 3.8600599531277437`*^9}, {
  3.8601471362367926`*^9, 3.860147165203163*^9}, {3.8601472151661754`*^9, 
  3.8601472312107363`*^9}, {3.860147811527608*^9, 3.860147848094222*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"d5e38a3c-ace2-4fb5-b385-dbd778ce22dc"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJx1lj1LXGEQhV8kpMwPsLo2FiFFKkkVXoiksrJKkeIiGlcb0wSEgGzhD0gR
EggpbiFx/Up2tU1x2cpCrIKFWCyp/AEWwUJivOe5MMfswjIM886c+Tgzu1ML
a/NLEymlz7fff/LuU73Jd3LuoJF5uZF96WWnkYs7jSykX+02stb7zf0c4s3v
R/8Xh9F/ei/6f+lH/GPhdRXvUvFq6Un2keVbK/7TgfCWo39p+VfSP+p90vtr
xc+yd5RfvdTID7sxv4L6LR/wL77H921/7f1I9p970U69XeF/7cV4xM/SmRf6
OvjWX+rFTn+ovyt9hvrH1EO+zN/jP9b8mR/5gwc+839GfWPm+XY75vNnEOMP
NZ9S+nN7z/zhz4zx75XqoV8n/f/7p5VGbv0Qnuy9bzE+/CM+/WIfmD/9m5U/
/JszPnn/vD/wMXVifsyD+NgvbP5P4LfeP7D6f9FPvV8YRDv4tfGLebZ8GcMv
31fug/fzHn+tv/hn1V/5Psn++jD6t/tr+w8+/clWT23+lfGpsv3xfuWVGK+S
Dv+YL/cHPtF/8m/3bzX6e3+p/wb+i3894wfzR5/kfim/d+of9+thL+IxP/p5
Tnyb18j47vxhP04VH/5sc1+k/+ae2n0An/njf2Tzdb6eiT9d32/ZN2ze8AOd
e1ra/pIv/Eiqj/sCH17afWT/RsZv8v8EnuwnVh/+eTX615ZvZfkVpoP/3vg3
tP8H9BN85sf9fCR853dh+4+OHbxpu9ftfZIOX+Evvx/gbdq9Ai9ZfP//UBhf
S9uvQvXd9vcvNT6GtQ==
         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJxtU6tOA1EUvCH9BARBbT0Chb6isqoKuWmgD0xtVVNRVVXBB6ygBGiBXQQK
cRWp6CdUrERVVVX1cWdIzqSbbCYnM+d9brXZa9yfOedq+/+A8ev4I9zOIg5h
9z8iJrBHc/DtiGPoM/CX7xED7BX8fSvi3avV16FPYd/k1v9vbvPn0HvYA9hJ
W/TdiE+fiAd+PTvNs54F62vZePTfvNl6rwurT6AvoZ9QD/vl+XQ/qeaXebiu
jUeb/qX0n4H/LWx+h/jsf5lb/or1gq+Q70h/ch/kz7nvh4jhC3nBX0xtfY+F
1fNeWM//vcH/R+5T7/Vb9t9E/CD7GCKf9s/7DBKP/W5lfit5H5xPKvel8+V+
eU+l5Fd/L/vm/fP9Baknk/ml8n5L6L3E53wSeV/cT0Xe557fAYmMr2E=
         "]]}, {
        Directive[
         PointSize[0.007333333333333334], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        PointBox[CompressedData["
1:eJx1VaFOA0EU3BAcCgwoUhIUCoUrOYFCEQSqomlCAlyTYsBw4oKqqkIiLihU
03JtIahVKL6AkFBVVXUKRSi9mSZvuGvSbF7m3r55b2Z3txqt49Ml59zN7P+3
zn/1i2C+3vXz1Tfz9WCUrwHwBvAgtPgY+MbQfv+G77m/f0KM/KNBvlaA7/bt
fpvAPeId5Dvkd4fFeIL4Q/if9VAvLMb3gCfA718sP/L3wCfgVzaPdmr5aH+v
afH3jKep7Xe5Z/E14f+N/WOdD+JbmXcN/YzPLR/q//Bs96MejKk3+ztBfl3q
OeA/PRtPBP/sgl+J/96Zj/07ogf7pb7bqc1f6N8s5j+V+Q8GNj9DPfavOPXl
/tRT+TCf83bSH/G24Dx/rmn7ddJfIvy8+g/59A/1oh/0/P87X8AfR5bvwk+i
h+qVSH+MpzIv3g+uhB/rV0r8fwn/Us+O8Nunv4GvCr/DocWveP+gPv0by/4x
8DHvw9DyC0Qf5q/I+etKPs9XLP7V+k709eLfALjOt8r6oeVTx/3A+dDfPN/0
T1bSP+ffEv6R+IPz5feRvCc1eT8i8f8Xz5/kO/Ub6lP/RPzthR/9uC7vI9+P
iszLi/84/6rcL5ncX9c8T8CpD/nN9P4FMVM6tA==
         "]]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {
       FormBox["\"flipper_length_mm\"", TraditionalForm], 
       FormBox["\"body_mass_g\"", TraditionalForm]}, 
     AxesOrigin -> {170.7708333333337, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> Large, 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, PlotLabel -> 
     FormBox["\"Flipper Length vs Body mass\"", TraditionalForm], 
     PlotRange -> {{170.7708333333337, 231.}, {0, 6300.}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""}, "PointLegend",
       DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.007333333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.560181, 0.691569, 0.194885]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm], ",", 
               TagBox[#3, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{
  3.860059913483306*^9, 3.8600599542350736`*^9, 3.860092334209518*^9, {
   3.8601478209850054`*^9, 3.860147848583104*^9}, 3.8602184349315906`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"dc938348-e6b8-4970-a2e6-55a0cc4a8caa"]
}, Open  ]],

Cell["\<\
We can see a clear trend that as the flipper length increases the body mass \
starts increasing.\
\>", "Text",
 CellChangeTimes->{{3.860147577994265*^9, 3.860147581585005*^9}, {
   3.8601476514547787`*^9, 3.8601477112600403`*^9}, {3.8601478769229574`*^9, 
   3.8601479027749596`*^9}, 
   3.860148100965433*^9},ExpressionUUID->"5982701a-4580-4c8e-9aca-\
2b84772a3704"],

Cell["\<\
Having built the above insights from the data we now move on to classifying \
the data based on body measurements of the penguins\
\>", "Text",
 CellChangeTimes->{{3.8601483180589266`*^9, 
  3.8601483631458874`*^9}},ExpressionUUID->"cd5ced53-ea28-46dc-ad33-\
7abd418ec623"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classification Models", "Section",
 CellChangeTimes->{{3.8601481987380424`*^9, 3.8601482019139643`*^9}, {
  3.860148272461238*^9, 
  3.8601482824263945`*^9}},ExpressionUUID->"80efdaa6-e5db-42f4-981f-\
f27ea6f9726d"],

Cell["\<\
Since we have multiple species, our classifying models should perform multi - \
label classification. The models that were built in this project were Naive \
Bayes Classifier, Random Forest, Nearest Neighbours, Neural Networks and \
Support Vector Machines with the aim of building a classifier that is the \
best fit for the data and improving the accuracy.\
\>", "Text",
 CellChangeTimes->{{3.8601483701570854`*^9, 
  3.860148629337515*^9}},ExpressionUUID->"dbcad691-32c5-4fc3-b7c8-\
f615dff2d39a"],

Cell["\<\
Since we have all the species grouped together, it is not fair to divide the \
data into test and train data. Hence, we shuffle the data and then split them \
to train and test data.\
\>", "Text",
 CellChangeTimes->{{3.860148642345521*^9, 3.8601486952537427`*^9}, {
  3.860148743642583*^9, 
  3.8601487679315834`*^9}},ExpressionUUID->"814bef02-a12c-40d8-ad76-\
82552393b7a4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"RandomSample", "[", "data", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{"data", ",", "5"}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Looking", " ", "at", " ", "a", " ", "few", " ", "observations", " ", "to",
     " ", "check", " ", "if", " ", "the", " ", "data", " ", "has", " ", 
    "been", " ", "shuffled"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8600621515079985`*^9, 3.860062158707795*^9}, {
  3.860075253557616*^9, 3.86007526044081*^9}, {3.8601488351311655`*^9, 
  3.860148877330658*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"2191fba8-c2de-4823-9be7-d3f9001f5a5c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "species" -> "Adelie", "island" -> "Dream", "culmen_length_mm" -> 41.5,
         "culmen_depth_mm" -> 18.5, "flipper_length_mm" -> 201, "body_mass_g" -> 
        4000, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Biscoe", "culmen_length_mm" -> 41.,
         "culmen_depth_mm" -> 20., "flipper_length_mm" -> 203, "body_mass_g" -> 
        4725, "sex" -> "MALE"|>, <|
       "species" -> "Gentoo", "island" -> "Biscoe", "culmen_length_mm" -> 
        49.3, "culmen_depth_mm" -> 15.7, "flipper_length_mm" -> 217, 
        "body_mass_g" -> 5850, "sex" -> "MALE"|>, <|
       "species" -> "Adelie", "island" -> "Dream", "culmen_length_mm" -> 39.5,
         "culmen_depth_mm" -> 16.7, "flipper_length_mm" -> 178, "body_mass_g" -> 
        3250, "sex" -> "FEMALE"|>, <|
       "species" -> "Gentoo", "island" -> "Biscoe", "culmen_length_mm" -> 
        46.8, "culmen_depth_mm" -> 16.1, "flipper_length_mm" -> 215, 
        "body_mass_g" -> 5500, "sex" -> "MALE"|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[63.], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie", "Gentoo"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Biscoe", "Dream"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 5], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "species"} -> 
        1, {All, "island"} -> 1, {All, "culmen_length_mm"} -> 
        1, {All, "culmen_depth_mm"} -> 1, {All, "flipper_length_mm"} -> 
        1, {All, "body_mass_g"} -> 1, {All, "sex"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "species" -> TypeSystem`PackageScope`AtomShape[63.], "island" -> 
            TypeSystem`PackageScope`AtomShape[63.], "culmen_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "culmen_depth_mm" -> 
            TypeSystem`PackageScope`AtomShape[60], "flipper_length_mm" -> 
            TypeSystem`PackageScope`AtomShape[34], "body_mass_g" -> 
            TypeSystem`PackageScope`AtomShape[34], "sex" -> 
            TypeSystem`PackageScope`AtomShape[63.]|>], 
          DirectedInfinity[1], 7, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "species", "island", "culmen_length_mm", "culmen_depth_mm", 
         "flipper_length_mm", "body_mass_g", "sex"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["Adelie", "Gentoo"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["Biscoe", "Dream"]], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["FEMALE", "MALE"]]}], 5], "Path" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 7, "DataRowCount" -> 
     5, "DataColumnCount" -> 7, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["species", 
                  Style[
                  "species", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "species"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "species"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["island", 
                  Style[
                  "island", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "island"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "island"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_length_mm", 
                  Style[
                  "culmen_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["culmen_depth_mm", 
                  Style[
                  "culmen_depth_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "culmen_depth_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "culmen_depth_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["flipper_length_mm", 
                  Style[
                  "flipper_length_mm", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "flipper_length_mm"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "flipper_length_mm"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["body_mass_g", 
                  Style[
                  "body_mass_g", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "body_mass_g"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "body_mass_g"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["sex", 
                  Style[
                  "sex", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "sex"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "sex"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Dream", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["18.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["201"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4000"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Biscoe", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["203"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4725"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Gentoo", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Biscoe", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["49.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["15.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["217"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5850"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Adelie", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Dream", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["39.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["178"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3250"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FEMALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Gentoo", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["species"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Biscoe", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["island"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["46.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["16.1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["culmen_depth_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["215"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["flipper_length_mm"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5500"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["body_mass_g"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["MALE", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["sex"]}, "Item", False], "Mouse"], 
              ImageSize -> {{63., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{627., {82.92062981973868, 88.07937018026132}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{627., {82.92062981973868, 88.07937018026132}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.860062159767824*^9, 3.860075261448625*^9, 
  3.860092335917169*^9, 3.8601488801584396`*^9, 3.8601511994962463`*^9, 
  3.860151269637602*^9, 3.860218440134976*^9, 3.860218553590548*^9, 
  3.860218595540436*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"0e6f3a42-29e3-4549-8154-6efe16fa683c"]
}, Open  ]],

Cell["\<\
Now we transform the data into associations such hat it can be used in the \
Classify[] function. We pair the numerical values available from the indices \
3 to 6 with the name of the species. A simple demonstration is given in the \
following piece of code.\
\>", "Text",
 CellChangeTimes->{{3.8601489485378237`*^9, 3.8601489780167656`*^9}, {
  3.8601490133657427`*^9, 
  3.860149090996992*^9}},ExpressionUUID->"92e2b45a-f6b4-4850-a5a3-\
621971615dff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ToString", "[", 
   RowBox[{
    RowBox[{"data", "[", "1", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
  RowBox[{"Values", "[", 
   RowBox[{"Normal", "[", 
    RowBox[{
     RowBox[{"data", "[", "1", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"3", ";;", "6"}], "]"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8600691430259495`*^9, 3.860069232188532*^9}, {
  3.860069293104183*^9, 3.8600692969598303`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"f557d0a8-407f-4afd-b437-619cebf10bb6"],

Cell[BoxData[
 RowBox[{"\<\"Adelie\"\>", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{"41.5`", ",", "18.5`", ",", "201", ",", "4000"}], 
   "}"}]}]], "Output",
 CellChangeTimes->{{3.8600691607147417`*^9, 3.8600692111993923`*^9}, {
   3.860069267860507*^9, 3.860069297476616*^9}, 3.8600923411493683`*^9, 
   3.86014909883351*^9, 3.8601512040674276`*^9, 3.860151275697702*^9, 
   3.860218442919116*^9, 3.860218556048175*^9, 3.8602185990202093`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"ab59307d-7eed-4a18-bff6-4f1ad9da18bd"]
}, Open  ]],

Cell["\<\
We implement the above code to iterate over the data and split the first half \
of the data to train and the rest to test data.\
\>", "Text",
 CellChangeTimes->{{3.8601491042481527`*^9, 3.860149109657156*^9}, {
  3.860149181279987*^9, 3.860149186063657*^9}, {3.860149242709321*^9, 
  3.8601492817760744`*^9}},ExpressionUUID->"6d75bdc1-2cfd-4e37-87d2-\
ee4a6a5270c2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"data", "[", "i", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{
           RowBox[{"data", "[", "i", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"3", ";;", "6"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{
          RowBox[{"Length", "[", "data", "]"}], "/", "2"}]}], "}"}]}], "]"}], 
     ",", 
     RowBox[{"First", "->", "Last"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"testingData", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"data", "[", "i", "]"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
        RowBox[{"Values", "[", 
         RowBox[{"Normal", "[", 
          RowBox[{
           RowBox[{"data", "[", "i", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"3", ";;", "6"}], "]"}], "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "data", "]"}], "/", "2"}], "+", "1"}], ",", 
         RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}], ",", 
     RowBox[{"First", "->", "Last"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8600693105040207`*^9, 3.8600693443083396`*^9}, {
  3.8600693791323557`*^9, 3.8600693949560833`*^9}, {3.8600694707023525`*^9, 
  3.860069480302397*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"87c03745-b443-4808-ae75-c94150c6acc0"],

Cell[CellGroupData[{

Cell["Naive Bayes Classifier:", "Subsection",
 CellChangeTimes->{{3.8601492907549343`*^9, 
  3.8601493124947853`*^9}},ExpressionUUID->"e9cb1620-472a-4727-a083-\
09fb71b14902"],

Cell["\<\
The naive Bayes classifier is used for classification purposes but it assumes \
that each observation is independent of each other .\
\>", "Text",
 CellChangeTimes->{{3.8601493698944583`*^9, 
  3.8601494380354137`*^9}},ExpressionUUID->"553874bd-97fc-4762-aec4-\
53bbc64af997"],

Cell[TextData[StyleBox["Train the model:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.860149444556881*^9, 3.8601494581241817`*^9}, {
  3.8602184612991834`*^9, 3.8602184624486628`*^9}, {3.860218561189228*^9, 
  3.860218562163858*^9}},ExpressionUUID->"020d666e-2277-4226-a81a-\
653545c08dcd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nb", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NaiveBayes\>\""}]}], "]"}], " ", 
  RowBox[{"(*", 
   RowBox[{
   "Training", " ", "data", " ", "is", " ", "used", " ", "to", " ", "train", 
    " ", "the", " ", "model"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8600694947065296`*^9, 3.8600695448262596`*^9}, {
  3.860149479813718*^9, 3.8601494913321466`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"5d3ab892-20d1-445d-b9a5-87b52fe40582"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NaiveBayes\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["171", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 171, "ClassNumber" -> 3, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 4|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 171, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.004085090746150243, -0.3612744103301966, 
                   0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                   0.984330125195285}, {
                   0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                   0.01600787497426431, 
                   0.001811504406973886, -0.00020032542764021215`}}, 
                  "Precisions" -> {1.4588368163658181`*^-6, 
                   0.0215411092967585, 0.05960642825620558, 
                   0.4279510542010826}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                   "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   2758349319774705302|>], "InputDimension" -> 0, 
                "OutputDimension" -> 4, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.045544, "MaxTrainingMemory" -> 206152, 
                  "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 29, 11, 56, 45.1720838`9.407444991562272}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                   "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                   0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[16.53064340630656, 0.593442758765043], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 31956639518117771|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {44.13157894736843, 16.94970760233918, 
              202.20467836257308`, 4241.666666666666}, 
             "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
              14.416088368344866`, 827.828308046025}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 7727414780429196297|>], 
           MachineLearning`MLProcessor[
           "DiscretizeNumericalVector", <|
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Boundaries" -> CompressedData["
1:eJwBcQGO/iFib1JlAgAAAAQAAAALAAAAvdp8UP0t/r+hRClc6h/3v9tCFiAr
CvC/pPib2zjQ4r8y1OYenG7Sv1RKlJf6Uqw/WAAMr8df1D/J4t52ZPjmPwZR
+ZkLne8/2Z2w3KI/9D+De+f2DQwGQItBJ6NQtv+/PlShmCyE9r/Jp0b2mKXx
v159SF7mfuS/dFNXRVs9yL+inz7zdhWzP1/3ZMa4ztg/wPVLe2e45D8z7bkk
ZanuP914jPUe4/Q/7W/i4jcaAUDxG6Ig01r/vzWiq2eX8/K/63IDQPpp7b+K
6Cwucsjov8iSYXty0t+/CpPNEAEy0r8SaDeRLZ3ZP8+anAS71ec/Y/9Yf1Bv
8D+fs/4faOH0P7gqomIF9/8/GgAuDK0N+79G2Eo/CVfyvyRsM58cKPC/+sV/
O2+z6L9WusLir8zfv/RS2h/mrrq/UuPzspxryT892Ti9TNDjPxWH9njgau8/
cy/e3jlc9z9l0ImtdZIBQAE9wu4=
              "], "Version" -> {13., 0}, "ID" -> 3201323870135304752, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NominalVector", "Weight" -> 4, 
                 "SetSize" -> {10, 10, 10, 10}|>|>, 
             "Index" -> {<|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
             "Version" -> {13., 0}, "ID" -> 5253547933290473945, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NominalVector", "Weight" -> 4|>|>|>]}, 
         "Invertibility" -> "Approximate", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             3699363863601728199, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {3}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`, 
        "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "ClassNumber" -> 3, 
      "ClassPriors" -> <|
       1 -> 0.40714285714285714`, 2 -> 0.19999999999999998`, 3 -> 
        0.39285714285714285`|>, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmVmYGBgAWIuIAaxU3dPDGcx/7af8UDpvfQ7MgcmzHq1OWue/IEb
NmvPnJf5iiH+NFHjaOHaHxjiEx4te3Jv2u/9MfXVCjlTGQ9Um6SeLpRkP7D6
b57vA0nWAyz1s/bmuXAduKy8blvapH/73QIemYVyChyAqYeJH73Qta31sPwB
1x2dVp7T/+3fy6l2q4jpN1wcpn4NO6vO2ZqfcHGXezmbr6/+ut9BZUHLx0iG
AzDxnrNV830Uf2CIw9yvu22F6MaL3/YTKz75kYDvjEVf9z9ZsPTC8mR2DPcf
i805+CqI+UBNRYtSHCcwPD5q79nCwXzgcTX/gxbXv/sXcm/J4z7LckDJpCWj
5AQ/hjgsPOsftJpZCv7aDwsH9PBHF1814UGn+hIGeDjAxP/3aSrIpn3fDwt/
dPNh7oeJw9yDbj4u9yz7o3fwktr//ej2wsIHFv6w9ACLd5h/BRb3XZXY+Acj
nIU6l+9ilfyBIR5iMa06seEzzniBhQ+6v2DuhLkHV7pFD09YPMLE/Tqe/394
j/HAtJ23EqK7PmOEA8xfjhP1PFadZ4Gnf5g7YekZFg6E/IsrHbKl6BxK7viy
HwA/cA43
       "], "FeatureNumber" -> 4, "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4)" -> <|
            "Type" -> "NominalVector", "Weight" -> 4, 
             "SetSize" -> {10, 10, 10, 10}|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NominalVector", "Weight" -> 4, 
                 "SetSize" -> {10, 10, 10, 10}|>|>, 
             "Index" -> {<|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>, <|
               1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,
                 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
             "Version" -> {13., 0}, "ID" -> 4343515758352330222, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|
              "Type" -> "NominalVector", "Weight" -> 4, 
               "SetSize" -> {10, 10, 10, 10}|>, "Key" -> "(f1f2f3f4)", 
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
             "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
      "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 0.6806539094376404|>], "Method" -> 
      "NaiveBayes", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "SmoothingParameter" -> <|"Value" -> 0.2, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[90305], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.099654`6.45003972897666, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
         Around[0.8956174477020223, 0.050792378949178096`], "EvaluationTime" -> 
         0.000037027217993946065`, "TestSize" -> 102, "ModelMemory" -> 18800.,
          "ModelUtility" -> 0.35515897557479237`, "TrainingSize" -> 137, 
         "TrainingTime" -> 0.007126427896022372, "TrainingMemory" -> 76068., 
         "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
           Around[0.20668534541688546`, 0.0924298020009858], 
           Around[0.28761275562402816`, 0.1527918878865977], 
           Around[0.49117068919643936`, 0.15627226917249395`]}, 
         "AccuracyHistory" -> {
           Around[0.9527603048448795, 0.03614055183286864], 
           Around[0.9241888762734511, 0.045091662166485635`], 
           Around[0.8099031619877368, 0.06684261051919119]}, 
         "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
         "FinalTrainingSize" -> 171|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NaiveBayes", 
           "Options" -> <|"SmoothingParameter" -> <|"Value" -> 0.2|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1115175746985122`, 0.2678244294000816], "Accuracy" -> 
              Around[0.6568971353422857, 0.06698693542904859], 
              "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 100,
               "ModelMemory" -> 16880, "ModelUtility" -> -0.845949944615125, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.00630957344480193, 
              "TrainingMemory" -> 49104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1115175746985122`, 0.18938047019621543`]}, 
              "AccuracyHistory" -> {
                Around[0.6568971353422857, 0.047366916292785645`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1024122161072472`, 0.3125452950084686], "Accuracy" -> 
              Around[0.823091022718389, 0.0452987435265992], "EvaluationTime" -> 
              0.000018332575833057537`, "TestSize" -> 141, "ModelMemory" -> 
              18800, "ModelUtility" -> -0.8458118049416049, "TrainingSize" -> 
              30, "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
              50784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.1024122161072472`, 0.22100289752843813`]}, 
              "AccuracyHistory" -> {
                Around[0.823091022718389, 0.032031048726888514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
              Around[0.8956174477020223, 0.050792378949178096`], 
              "EvaluationTime" -> 0.000037027217993946065`, "TestSize" -> 102,
               "ModelMemory" -> 18800., "ModelUtility" -> 
              0.35515897557479237`, "TrainingSize" -> 137, "TrainingTime" -> 
              0.007126427896022372, "TrainingMemory" -> 76068., 
              "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                Around[0.20668534541688546`, 0.0924298020009858], 
                Around[0.28761275562402816`, 0.1527918878865977], 
                Around[0.49117068919643936`, 0.15627226917249395`]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864], 
                Around[0.9241888762734511, 0.045091662166485635`], 
                Around[0.8099031619877368, 0.06684261051919119]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000037027217993946065`, "MeanCrossEntropy" -> 
             Around[0.3284895967457843, 0.11018745999211942`], "ModelMemory" -> 
             18800., "TrainingMemory" -> 76068., "TrainingTime" -> 
             0.015204603884362702`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Atom[Real], 1], 1]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
      "PreprocessorEvaluationTime" -> 3.3453125*^-6, "PreprocessorMemory" -> 
      76488, "InputDimension" -> 4, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8602222052531201`17.339187293763768*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.0015774730673549181`, 
          "ElapsedTimes" -> 0.0134263, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 0.007887365336774596, 
          "ElapsedTimes" -> 0.0156386, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 137, "TimeBudgets" -> 0.03943682668387295, 
          "ElapsedTimes" -> 0.0346806, "ExperimentCounts" -> 3|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
           803269050161587613|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
           3873503148790622222|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
           699058557945447889|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
           4483023431942159786|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.4170889, 
      "MaxTrainingMemory" -> 438888, "DataMemory" -> 26048, "FunctionMemory" -> 
      160408, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 29, 11, 56, 45.5367748`9.41093713433036}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.860069588218834*^9, 3.8600923447069125`*^9, 
  3.8601494988996935`*^9, 3.8601512142004538`*^9, 3.860151282685852*^9, 
  3.860218468453683*^9, 3.8602185642173815`*^9, 3.8602186055628967`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"96c56386-895d-43d5-b215-f5a284e8cd38"]
}, Open  ]],

Cell["\<\
A small description of how the Naive Bayes classifier works .\
\>", "Text",
 CellChangeTimes->{{3.8601495029059896`*^9, 
  3.8601495296124086`*^9}},ExpressionUUID->"a7d87299-c3ba-411e-a85d-\
ee4db348bf1e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"nb", ",", "\"\<MethodDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.860069583516876*^9, 3.860069610962638*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"9792bb2d-1580-4b4e-bf7a-208a3bde7ad8"],

Cell[BoxData[
 TagBox[
  PanelBox["\<\"The naive Bayes classifier assumes that features are \
generated independently given the class and uses Bayes' theorem to predict \
the class.\"\>",
   BaseStyle->{LineIndent -> 0}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{{3.860069594612857*^9, 3.8600696120034246`*^9}, 
   3.8601495325287*^9, 3.860151216630037*^9, 3.860151285756185*^9, 
   3.860218474590686*^9, 3.8602185710606613`*^9, 3.8602186095920005`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"98f08284-1711-4077-816c-0b67c8c6a5fc"]
}, Open  ]],

Cell["\<\
Information[] gives information of the classifier built. It shows us the \
learning curve and performance measure of the classifier on the training \
data. Here, we have training accuracy of 90%.\
\>", "Text",
 CellChangeTimes->{{3.8601495498740263`*^9, 3.860149667682008*^9}, {
  3.8601497354642444`*^9, 3.8601497370253735`*^9}, {3.8601512395674815`*^9, 
  3.8601512421817904`*^9}, {3.8601512899044704`*^9, 3.8601513029589734`*^9}, {
  3.8602184861917405`*^9, 3.860218488361375*^9}, {3.8602186395103645`*^9, 
  3.8602186398328943`*^9}},ExpressionUUID->"db8b4744-1666-46d9-9d0d-\
c44a46903c3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "nb", "]"}]], "Input",
 CellChangeTimes->{{3.860070856514903*^9, 3.860070858852786*^9}, {
  3.8601512296464825`*^9, 3.860151231387501*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"53984bdb-3a34-49ed-98ca-a9652c902699"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical"}, 
                  10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["Adelie"], 
                  TextCell["Adelie"]], 
                 InterpretationBox[
                  Cell["Chinstrap"], 
                  TextCell["Chinstrap"]], 
                 InterpretationBox[
                  Cell["Gentoo"], 
                  TextCell["Gentoo"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"90.", "5."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    89.5617447702022388967`3., 5.0792378949178100811`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "NaiveBayes",ExpressionUUID->
                   "dc27fe60-0e65-41b6-af26-60c10483c368"],
                  TextCell["NaiveBayes"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"SmoothingParameter\"", "0.2`"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"SmoothingParameter", 0.2}}, Alignment -> Left, 
                   Frame -> All, FrameStyle -> GrayLevel[0.84], 
                   Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.15`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"28.9`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.328489596745784318`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1101874599921194159`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.1081146767615454862`3.", "\", \"", 
                   "0.548864516730023122`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.1081146767615454862`3., 
                   ", ", 0.548864516730023122`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"163.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"171", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "417.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.10572626599167857`}, {
                    3.4011973816621555`, 0.0975007025903576}, {
                    4.919980925828125, -1.1132501105215489`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.10572626599167857`}}, {{3.4011973816621555`, 
                    0.0975007025903576}}, {{
                    4.919980925828125, -1.1132501105215489`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.1699664224157655}, {
                    2.0794415416798357`, 0.32160657683552735`}, {
                    2.0794415416798357`, 0.32160657683552735`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -0.2358908020164336}, {
                    3.4011973816621555`, 0.3470995031643076}, {
                    3.4011973816621555`, 0.3470995031643076}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.521875227321761}, {
                    4.919980925828125, -0.8239917704727541}, {
                    4.919980925828125, -0.8239917704727541}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.1809710203278392`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.1809710203278392`, 
                    0.10572626599167857`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.6568971353422857}, {
                    3.4011973816621555`, 0.823091022718389}, {
                    4.919980925828125, 0.8956174477020223}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.6568971353422857}}, {{3.4011973816621555`, 
                    0.823091022718389}}, {{4.919980925828125, 
                    0.8956174477020223}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.6388390898339864}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.6388390898339864, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.10572626599167857`}, {
                    3.4011973816621555`, 0.0975007025903576}, {
                    4.919980925828125, -1.1132501105215489`}}]}, 
                    Column[{
                    Style["NaiveBayes", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"SmoothingParameter", 0.2}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.10572626599167857`}}, {{
                    3.4011973816621555`, 0.0975007025903576}}, {{
                    4.919980925828125, -1.1132501105215489`}}}]}, 
                    Column[{
                    Style["NaiveBayes", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"SmoothingParameter", 0.2}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.1809710203278392`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.1809710203278392`, 
                    0.10572626599167857`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.10572626599167857`}, {
                    3.4011973816621555`, 0.0975007025903576}, {
                    4.919980925828125, -1.1132501105215489`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.10572626599167857`}}, {{3.4011973816621555`, 
                    0.0975007025903576}}, {{
                    4.919980925828125, -1.1132501105215489`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.1699664224157655}, {
                    2.0794415416798357`, 0.32160657683552735`}, {
                    2.0794415416798357`, 0.32160657683552735`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -0.2358908020164336}, {
                    3.4011973816621555`, 0.3470995031643076}, {
                    3.4011973816621555`, 0.3470995031643076}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.521875227321761}, {
                    4.919980925828125, -0.8239917704727541}, {
                    4.919980925828125, -0.8239917704727541}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.1809710203278392`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.1809710203278392`, 
                    0.10572626599167857`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.6568971353422857}, {
                    3.4011973816621555`, 0.823091022718389}, {
                    4.919980925828125, 0.8956174477020223}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.6568971353422857}}, {{3.4011973816621555`, 
                    0.823091022718389}}, {{4.919980925828125, 
                    0.8956174477020223}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.6388390898339864}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.6388390898339864, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.10572626599167857`}, {
                    3.4011973816621555`, 0.0975007025903576}, {
                    4.919980925828125, -1.1132501105215489`}}]}, 
                    Column[{
                    Style["NaiveBayes", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"SmoothingParameter", 0.2}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.10572626599167857`}}, {{
                    3.4011973816621555`, 0.0975007025903576}}, {{
                    4.919980925828125, -1.1132501105215489`}}}]}, 
                    Column[{
                    Style["NaiveBayes", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"SmoothingParameter", 0.2}}, Alignment -> Left, 
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                    Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.1809710203278392`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.1809710203278392`, 
                    0.10572626599167857`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{297., {111., 113.89273131957421`}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 171, "ClassNumber" -> 3, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical"|>, 
            "f2" -> <|"Type" -> "Numerical"|>, 
            "f3" -> <|"Type" -> "Numerical"|>, 
            "f4" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 4|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                 Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                 Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                 False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
          "Perfect", "StructurePreserving" -> False, "Missing" -> 
          "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 171, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                   "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 4, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.045544, "MaxTrainingMemory" -> 206152, 
                   "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                   "LanguageVersion" -> {13., 0}, "Date" -> 
                   DateObject[{
                    2022, 4, 29, 11, 56, 45.1720838`9.407444991562272}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                   "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                   "Windows", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                  "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[16.53064340630656, 0.593442758765043], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
              "ID" -> 31956639518117771|>], 
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {44.13157894736843, 16.94970760233918, 
               202.20467836257308`, 4241.666666666666}, 
              "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
               14.416088368344866`, 827.828308046025}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 7727414780429196297|>], 
            MachineLearning`MLProcessor[
            "DiscretizeNumericalVector", <|
             "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Boundaries" -> CompressedData["
1:eJwBcQGO/iFib1JlAgAAAAQAAAALAAAAvdp8UP0t/r+hRClc6h/3v9tCFiAr
CvC/pPib2zjQ4r8y1OYenG7Sv1RKlJf6Uqw/WAAMr8df1D/J4t52ZPjmPwZR
+ZkLne8/2Z2w3KI/9D+De+f2DQwGQItBJ6NQtv+/PlShmCyE9r/Jp0b2mKXx
v159SF7mfuS/dFNXRVs9yL+inz7zdhWzP1/3ZMa4ztg/wPVLe2e45D8z7bkk
ZanuP914jPUe4/Q/7W/i4jcaAUDxG6Ig01r/vzWiq2eX8/K/63IDQPpp7b+K
6Cwucsjov8iSYXty0t+/CpPNEAEy0r8SaDeRLZ3ZP8+anAS71ec/Y/9Yf1Bv
8D+fs/4faOH0P7gqomIF9/8/GgAuDK0N+79G2Eo/CVfyvyRsM58cKPC/+sV/
O2+z6L9WusLir8zfv/RS2h/mrrq/UuPzspxryT892Ti9TNDjPxWH9njgau8/
cy/e3jlc9z9l0ImtdZIBQAE9wu4=
               "], "Version" -> {13., 0}, "ID" -> 3201323870135304752, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4, 
                  "SetSize" -> {10, 10, 10, 10}|>|>, 
              "Index" -> {<|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
              "Version" -> {13., 0}, "ID" -> 5253547933290473945, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4|>|>|>]}, 
          "Invertibility" -> "Approximate", "StructurePreserving" -> False, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>},
               "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
              3699363863601728199, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {3}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`,
          "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {3, 4}, 0., {
       1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
     "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
     "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "ClassNumber" -> 3, 
       "ClassPriors" -> <|
        1 -> 0.40714285714285714`, 2 -> 0.19999999999999998`, 3 -> 
         0.39285714285714285`|>, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmVmYGBgAWIuIAaxU3dPDGcx/7af8UDpvfQ7MgcmzHq1OWue/IEb
NmvPnJf5iiH+NFHjaOHaHxjiEx4te3Jv2u/9MfXVCjlTGQ9Um6SeLpRkP7D6
b57vA0nWAyz1s/bmuXAduKy8blvapH/73QIemYVyChyAqYeJH73Qta31sPwB
1x2dVp7T/+3fy6l2q4jpN1wcpn4NO6vO2ZqfcHGXezmbr6/+ut9BZUHLx0iG
AzDxnrNV830Uf2CIw9yvu22F6MaL3/YTKz75kYDvjEVf9z9ZsPTC8mR2DPcf
i805+CqI+UBNRYtSHCcwPD5q79nCwXzgcTX/gxbXv/sXcm/J4z7LckDJpCWj
5AQ/hjgsPOsftJpZCv7aDwsH9PBHF1814UGn+hIGeDjAxP/3aSrIpn3fDwt/
dPNh7oeJw9yDbj4u9yz7o3fwktr//ej2wsIHFv6w9ACLd5h/BRb3XZXY+Acj
nIU6l+9ilfyBIR5iMa06seEzzniBhQ+6v2DuhLkHV7pFD09YPMLE/Tqe/394
j/HAtJ23EqK7PmOEA8xfjhP1PFadZ4Gnf5g7YekZFg6E/IsrHbKl6BxK7viy
HwA/cA43
        "], "FeatureNumber" -> 4, "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "(f1f2f3f4)" -> <|
             "Type" -> "NominalVector", "Weight" -> 4, 
              "SetSize" -> {10, 10, 10, 10}|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4, 
                  "SetSize" -> {10, 10, 10, 10}|>|>, 
              "Index" -> {<|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>, <|
                1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                 8, 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
              "Version" -> {13., 0}, "ID" -> 4343515758352330222, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|
               "Type" -> "NominalVector", "Weight" -> 4, 
                "SetSize" -> {10, 10, 10, 10}|>, "Key" -> "(f1f2f3f4)", 
              "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
              "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
          "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
       "Calibrator" -> 
       MachineLearning`CalibratorFunction[
        "TemperatureScaling", <|"Theta" -> 0.6806539094376404|>], "Method" -> 
       "NaiveBayes", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "SmoothingParameter" -> <|"Value" -> 0.2, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "PanelCell" -> CellObject[90305], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       0.099654`6.45003972897666, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
          Around[0.8956174477020223, 0.050792378949178096`], "EvaluationTime" -> 
          0.000037027217993946065`, "TestSize" -> 102, "ModelMemory" -> 
          18800., "ModelUtility" -> 0.35515897557479237`, "TrainingSize" -> 
          137, "TrainingTime" -> 0.007126427896022372, "TrainingMemory" -> 
          76068., "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
            Around[0.20668534541688546`, 0.0924298020009858], 
            Around[0.28761275562402816`, 0.1527918878865977], 
            Around[0.49117068919643936`, 0.15627226917249395`]}, 
          "AccuracyHistory" -> {
            Around[0.9527603048448795, 0.03614055183286864], 
            Around[0.9241888762734511, 0.045091662166485635`], 
            Around[0.8099031619877368, 0.06684261051919119]}, 
          "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
          "FinalTrainingSize" -> 171|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 3], 
           TypeSystem`Vector[TypeSystem`AnyType, 3], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "NaiveBayes", 
            "Options" -> <|"SmoothingParameter" -> <|"Value" -> 0.2|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.1115175746985122`, 0.2678244294000816], "Accuracy" -> 
               Around[0.6568971353422857, 0.06698693542904859], 
               "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
               100, "ModelMemory" -> 16880, 
               "ModelUtility" -> -0.845949944615125, "TrainingSize" -> 8, 
               "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
               49104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.1115175746985122`, 0.18938047019621543`]}, 
               "AccuracyHistory" -> {
                 Around[0.6568971353422857, 0.047366916292785645`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[1.1024122161072472`, 0.3125452950084686], "Accuracy" -> 
               Around[0.823091022718389, 0.0452987435265992], 
               "EvaluationTime" -> 0.000018332575833057537`, "TestSize" -> 
               141, "ModelMemory" -> 18800, 
               "ModelUtility" -> -0.8458118049416049, "TrainingSize" -> 30, 
               "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
               50784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.1024122161072472`, 0.22100289752843813`]}, 
               "AccuracyHistory" -> {
                 Around[0.823091022718389, 0.032031048726888514`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
               Around[0.8956174477020223, 0.050792378949178096`], 
               "EvaluationTime" -> 0.000037027217993946065`, "TestSize" -> 
               102, "ModelMemory" -> 18800., "ModelUtility" -> 
               0.35515897557479237`, "TrainingSize" -> 137, "TrainingTime" -> 
               0.007126427896022372, "TrainingMemory" -> 76068., 
               "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                 Around[0.20668534541688546`, 0.0924298020009858], 
                 Around[0.28761275562402816`, 0.1527918878865977], 
                 Around[0.49117068919643936`, 0.15627226917249395`]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864], 
                 Around[0.9241888762734511, 0.045091662166485635`], 
                 Around[0.8099031619877368, 0.06684261051919119]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000037027217993946065`, "MeanCrossEntropy" -> 
              Around[0.3284895967457843, 0.11018745999211942`], "ModelMemory" -> 
              18800., "TrainingMemory" -> 76068., "TrainingTime" -> 
              0.015204603884362702`|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Assoc[
              TypeSystem`Atom[String], 
              TypeSystem`Atom[Real], 1], 1]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             3], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
       "PreprocessorEvaluationTime" -> 3.3453125*^-6, "PreprocessorMemory" -> 
       76488, "InputDimension" -> 4, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8602222052531201`17.339187293763768*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 8, "TimeBudgets" -> 0.0015774730673549181`, 
           "ElapsedTimes" -> 0.0134263, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 30, "TimeBudgets" -> 0.007887365336774596, 
           "ElapsedTimes" -> 0.0156386, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 137, "TimeBudgets" -> 0.03943682668387295, 
           "ElapsedTimes" -> 0.0346806, "ExperimentCounts" -> 3|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
            803269050161587613|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
            3873503148790622222|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
            699058557945447889|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
            4483023431942159786|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.4170889, 
       "MaxTrainingMemory" -> 438888, "DataMemory" -> 26048, "FunctionMemory" -> 
       160408, "LanguageVersion" -> {13., 0}, "Date" -> 
       DateObject[{2022, 4, 29, 11, 56, 45.5367748`9.41093713433036}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.8600708612535725`*^9, {3.8601512199898124`*^9, 3.860151233041259*^9}, 
   3.860151292969325*^9, 3.8602184774976435`*^9, 3.8602185736473293`*^9, 
   3.8602186125675364`*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"d8a2756f-0bfc-433e-8551-bc8a5c80508f"]
}, Open  ]],

Cell["\<\
The trained model is used to make predictions on the test data. The test \
accuracy is around 94%. After running the code for multiple times sometimes  \
the test accuracy is more than train accuracy and hence it could be slightly \
overfitting the data.\
\>", "Text",
 CellChangeTimes->{{3.8601496718820033`*^9, 3.860149687748499*^9}, {
  3.86015067776474*^9, 3.8601506924179754`*^9}, {3.860150764823225*^9, 
  3.860150825823241*^9}, {3.860151313796398*^9, 3.8601513215032787`*^9}, {
  3.86021865639555*^9, 
  3.860218681602399*^9}},ExpressionUUID->"4087f377-3620-48df-8d20-\
9f72b45665e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurenb", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"nb", ",", "testingData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860069653593439*^9, 3.8600697393908014`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"8a4bd43f-6d34-4392-a0ce-572eca7800d6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NaiveBayes",ExpressionUUID->
                 "51654da8-d3d6-466b-96e2-0b8a56444881"],
                TextCell["NaiveBayes"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "171"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"94.7", "1.7"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    94.7368421052631504153`3., 1.7126088775157275457`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"49.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    48.5380116959064267235`3., 3.8331852752130370909`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.895482411366200215`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0238263655119047568`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8478296803423907013`3.", "\", \"", 
                   "0.9431351423900097286`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8478296803423907013`3., 
                   ", ", 0.9431351423900097286`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.1103926988063648196`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.02660415749024337`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0571843838258780796`3.", "\", \"", 
                   "0.1636010137868515457`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0571843838258780796`3., 
                   ", ", 0.1636010137868515457`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.84`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"9.9`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.9032453473554591, 
                  0.5161135770036153, 0.004817143442636193}}, {{
                  0.9327570508315879, 0.864350570395974, 
                  0.6545489414040733}, {0.8836892762286434, 
                  0.6613645041963245, 0.20859674460445082`}, {
                  0.9454776786371761, 0.9124185511294354, 
                  0.7795779030583816}}, {{1., 0.42, 0.}, {0.9200364230259998, 
                  0.8162825896625125, 0.5295199797497654}, {1., 1., 1.}}}, {{
                  0, 0}, {3, 3}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["78", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "78", "\" examples of \"", "\"Adelie\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9629629629629629`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9397590361445783`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9512195121951218`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{78, " examples of ", "Adelie", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9629629629629629}], 
                    Row[{"Recall = ", 0.9397590361445783}], 
                    Row[{"FScore = ", 0.9512195121951218}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.037037037037037035`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "Chinstrap", 
                    " misclassified as ", "Adelie"}], 
                    Row[{"Column fraction = ", 0.037037037037037035`}], 
                    Row[{"Row fraction = ", 0.09090909090909091}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14705882352941177`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.060240963855421686`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "Adelie", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.14705882352941177`}], 
                    Row[{"Row fraction = ", 0.060240963855421686`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["29", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "29", "\" examples of \"", "\"Chinstrap\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8529411764705882`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8787878787878788`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8656716417910448`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{29, " examples of ", "Chinstrap", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8529411764705882}], 
                    Row[{"Recall = ", 0.8787878787878788}], 
                    Row[{"FScore = ", 0.8656716417910448}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Adelie", " misclassified as ", 
                    "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.017857142857142856`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.030303030303030304`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "Chinstrap", " misclassified as ",
                     "Gentoo"}], 
                    Row[{"Column fraction = ", 0.017857142857142856`}], 
                    Row[{"Row fraction = ", 0.030303030303030304`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["55", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" examples of \"", "\"Gentoo\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9821428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9909909909909909`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{55, " examples of ", "Gentoo", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9821428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9909909909909909}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9397590361445783`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{83, " example", "s", " of class ", "Adelie"}], 
                    Row[{"Recall = ", 0.9397590361445783}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8787878787878788`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{33, " example", "s", " of class ", "Chinstrap"}], 
                    Row[{"Recall = ", 0.8787878787878788}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " of class ", "Gentoo"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9629629629629629`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{81, " example", "s", " classified as ", "Adelie"}], 
                    Row[{"Precision = ", 0.9629629629629629}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "34", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8529411764705882`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{34, " example", "s", " classified as ", 
                    "Chinstrap"}], 
                    Row[{"Precision = ", 0.8529411764705882}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "56", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9821428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{56, " example", "s", " classified as ", "Gentoo"}], 
                    Row[{"Precision = ", 0.9821428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{2.5, 
                    FormBox[
                    RotationBox["\"Adelie\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"Chinstrap\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"Gentoo\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{2.5, 
                    FormBox["83", TraditionalForm]}, {1.5, 
                    FormBox["33", TraditionalForm]}, {0.5, 
                    FormBox["55", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["34", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["56", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"Adelie\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"Chinstrap\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"Gentoo\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->196.8,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> 
    ClassifierFunction[<|
      "ExampleNumber" -> 171, "ClassNumber" -> 3, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 4|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 171, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                    "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045544, "MaxTrainingMemory" -> 206152,
                     "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 29, 11, 56, 45.1720838`9.407444991562272}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[16.53064340630656, 0.593442758765043], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 31956639518117771|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {44.13157894736843, 16.94970760233918, 
                 202.20467836257308`, 4241.666666666666}, 
                "StandardDeviation" -> {5.642730392182068, 
                 1.9473891434192623`, 14.416088368344866`, 827.828308046025}, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 7727414780429196297|>], 
              MachineLearning`MLProcessor[
              "DiscretizeNumericalVector", <|
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Boundaries" -> CompressedData["
1:eJwBcQGO/iFib1JlAgAAAAQAAAALAAAAvdp8UP0t/r+hRClc6h/3v9tCFiAr
CvC/pPib2zjQ4r8y1OYenG7Sv1RKlJf6Uqw/WAAMr8df1D/J4t52ZPjmPwZR
+ZkLne8/2Z2w3KI/9D+De+f2DQwGQItBJ6NQtv+/PlShmCyE9r/Jp0b2mKXx
v159SF7mfuS/dFNXRVs9yL+inz7zdhWzP1/3ZMa4ztg/wPVLe2e45D8z7bkk
ZanuP914jPUe4/Q/7W/i4jcaAUDxG6Ig01r/vzWiq2eX8/K/63IDQPpp7b+K
6Cwucsjov8iSYXty0t+/CpPNEAEy0r8SaDeRLZ3ZP8+anAS71ec/Y/9Yf1Bv
8D+fs/4faOH0P7gqomIF9/8/GgAuDK0N+79G2Eo/CVfyvyRsM58cKPC/+sV/
O2+z6L9WusLir8zfv/RS2h/mrrq/UuPzspxryT892Ti9TNDjPxWH9njgau8/
cy/e3jlc9z9l0ImtdZIBQAE9wu4=
                 "], "Version" -> {13., 0}, "ID" -> 3201323870135304752, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 4, 
                    "SetSize" -> {10, 10, 10, 10}|>|>, 
                "Index" -> {<|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
                "Version" -> {13., 0}, "ID" -> 5253547933290473945, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 4|>|>|>]}, 
            "Invertibility" -> "Approximate", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                3699363863601728199, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 
           0.20689655172413793`, "Gentoo" -> 0.39655172413793105`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "ClassNumber" -> 3, 
         "ClassPriors" -> <|
          1 -> 0.40714285714285714`, 2 -> 0.19999999999999998`, 3 -> 
           0.39285714285714285`|>, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmVmYGBgAWIuIAaxU3dPDGcx/7af8UDpvfQ7MgcmzHq1OWue/IEb
NmvPnJf5iiH+NFHjaOHaHxjiEx4te3Jv2u/9MfXVCjlTGQ9Um6SeLpRkP7D6
b57vA0nWAyz1s/bmuXAduKy8blvapH/73QIemYVyChyAqYeJH73Qta31sPwB
1x2dVp7T/+3fy6l2q4jpN1wcpn4NO6vO2ZqfcHGXezmbr6/+ut9BZUHLx0iG
AzDxnrNV830Uf2CIw9yvu22F6MaL3/YTKz75kYDvjEVf9z9ZsPTC8mR2DPcf
i805+CqI+UBNRYtSHCcwPD5q79nCwXzgcTX/gxbXv/sXcm/J4z7LckDJpCWj
5AQ/hjgsPOsftJpZCv7aDwsH9PBHF1814UGn+hIGeDjAxP/3aSrIpn3fDwt/
dPNh7oeJw9yDbj4u9yz7o3fwktr//ej2wsIHFv6w9ACLd5h/BRb3XZXY+Acj
nIU6l+9ilfyBIR5iMa06seEzzniBhQ+6v2DuhLkHV7pFD09YPMLE/Tqe/394
j/HAtJ23EqK7PmOEA8xfjhP1PFadZ4Gnf5g7YekZFg6E/IsrHbKl6BxK7viy
HwA/cA43
          "], "FeatureNumber" -> 4, "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4)" -> <|
               "Type" -> "NominalVector", "Weight" -> 4, 
                "SetSize" -> {10, 10, 10, 10}|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NominalVector", "Weight" -> 4|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 4, 
                    "SetSize" -> {10, 10, 10, 10}|>|>, 
                "Index" -> {<|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>, <|
                  1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 
                   8, 9 -> 9, 10 -> 10|>}, "MissingCode" -> 0, 
                "Version" -> {13., 0}, "ID" -> 4343515758352330222, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 4|>|>|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "NominalVector", "Weight" -> 4, 
                  "SetSize" -> {10, 10, 10, 10}|>, "Key" -> "(f1f2f3f4)", 
                "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
                "Missing" -> "Allowed"|>]}, "Invertibility" -> "Perfect", 
            "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
         "Calibrator" -> 
         MachineLearning`CalibratorFunction[
          "TemperatureScaling", <|"Theta" -> 0.6806539094376404|>], "Method" -> 
         "NaiveBayes", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "SmoothingParameter" -> <|"Value" -> 0.2, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[90305], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.099654`6.45003972897666, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
            Around[0.8956174477020223, 0.050792378949178096`], 
            "EvaluationTime" -> 0.000037027217993946065`, "TestSize" -> 102, 
            "ModelMemory" -> 18800., "ModelUtility" -> 0.35515897557479237`, 
            "TrainingSize" -> 137, "TrainingTime" -> 0.007126427896022372, 
            "TrainingMemory" -> 76068., "ExperimentCount" -> 3, 
            "MeanCrossEntropyHistory" -> {
              Around[0.20668534541688546`, 0.0924298020009858], 
              Around[0.28761275562402816`, 0.1527918878865977], 
              Around[0.49117068919643936`, 0.15627226917249395`]}, 
            "AccuracyHistory" -> {
              Around[0.9527603048448795, 0.03614055183286864], 
              Around[0.9241888762734511, 0.045091662166485635`], 
              Around[0.8099031619877368, 0.06684261051919119]}, 
            "Configuration" -> {"NaiveBayes", "SmoothingParameter" -> 0.2}, 
            "FinalTrainingSize" -> 171|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Vector[TypeSystem`AnyType, 3], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NaiveBayes", 
              "Options" -> <|
               "SmoothingParameter" -> <|"Value" -> 0.2|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1115175746985122`, 0.2678244294000816], "Accuracy" -> 
                 Around[0.6568971353422857, 0.06698693542904859], 
                 "EvaluationTime" -> 0.000025118864315095795`, "TestSize" -> 
                 100, "ModelMemory" -> 16880, 
                 "ModelUtility" -> -0.845949944615125, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.00630957344480193, "TrainingMemory" -> 
                 49104, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1115175746985122`, 0.18938047019621543`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6568971353422857, 0.047366916292785645`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1024122161072472`, 0.3125452950084686], "Accuracy" -> 
                 Around[0.823091022718389, 0.0452987435265992], 
                 "EvaluationTime" -> 0.000018332575833057537`, "TestSize" -> 
                 141, "ModelMemory" -> 18800, 
                 "ModelUtility" -> -0.8458118049416049, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.007943282347242814, "TrainingMemory" -> 
                 50784, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1024122161072472`, 0.22100289752843813`]}, 
                 "AccuracyHistory" -> {
                   Around[0.823091022718389, 0.032031048726888514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3284895967457843, 0.11018745999211942`], "Accuracy" -> 
                 Around[0.8956174477020223, 0.050792378949178096`], 
                 "EvaluationTime" -> 0.000037027217993946065`, "TestSize" -> 
                 102, "ModelMemory" -> 18800., "ModelUtility" -> 
                 0.35515897557479237`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.007126427896022372, "TrainingMemory" -> 76068., 
                 "ExperimentCount" -> 3, "MeanCrossEntropyHistory" -> {
                   Around[0.20668534541688546`, 0.0924298020009858], 
                   Around[0.28761275562402816`, 0.1527918878865977], 
                   Around[0.49117068919643936`, 0.15627226917249395`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864], 
                   Around[0.9241888762734511, 0.045091662166485635`], 
                   Around[0.8099031619877368, 0.06684261051919119]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000037027217993946065`, 
                "MeanCrossEntropy" -> 
                Around[0.3284895967457843, 0.11018745999211942`], 
                "ModelMemory" -> 18800., "TrainingMemory" -> 76068., 
                "TrainingTime" -> 0.015204603884362702`|>, "Index" -> 1|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Assoc[
                TypeSystem`Atom[String], 
                TypeSystem`Atom[Real], 1], 1]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171,
          "PreprocessorEvaluationTime" -> 3.3453125*^-6, "PreprocessorMemory" -> 
         76488, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8602222052531201`17.339187293763768*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.0015774730673549181`, 
             "ElapsedTimes" -> 0.0134263, "ExperimentCounts" -> 1|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.007887365336774596, 
             "ElapsedTimes" -> 0.0156386, "ExperimentCounts" -> 1|>, <|
            "TrainingSizes" -> 137, "TimeBudgets" -> 0.03943682668387295, 
             "ElapsedTimes" -> 0.0346806, "ExperimentCounts" -> 3|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
              803269050161587613|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
              3873503148790622222|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
              699058557945447889|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
              4483023431942159786|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.4170889, 
         "MaxTrainingMemory" -> 438888, "DataMemory" -> 26048, 
         "FunctionMemory" -> 160408, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 29, 11, 56, 45.5367748`9.41093713433036}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{46.7, 17.9, 195, 3300}, {45.4, 18.7, 188, 3525}, {
        45.2, 17.8, 198, 3950}, {46.1, 18.2, 178, 3250}, {
        45.7, 17., 195, 3650}, {49.8, 17.3, 198, 3675}, {
        46.5, 17.9, 192, 3500}, {46.9, 16.6, 192, 2700}, {
        53.5, 19.9, 205, 4500}, {50.6, 19.4, 193, 3800}, {
        49.3, 19.9, 203, 4050}, {49., 19.5, 210, 3950}, {
        47.5, 16.8, 199, 3900}, {49.6, 18.2, 193, 3775}, {
        50.9, 19.1, 196, 3550}, {50.2, 18.8, 202, 3800}, {
        47., 17.3, 185, 3700}, {45.7, 17.3, 193, 3600}, {
        52., 19., 197, 4150}, {46.4, 18.6, 190, 3450}, {
        52.2, 18.8, 197, 3450}, {52., 20.7, 210, 4800}, {
        50.8, 18.5, 201, 4450}, {51.4, 19., 201, 3950}, {
        58., 17.8, 181, 3700}, {46.6, 17.8, 193, 3800}, {
        49.5, 19., 200, 3800}, {50.2, 18.7, 198, 3775}, {
        45.6, 19.4, 194, 3525}, {51.7, 20.3, 194, 3775}, {
        50.7, 19.7, 203, 4050}, {46.2, 17.5, 187, 3650}, {
        46.4, 17.8, 191, 3700}, {46., 21.5, 194, 4200}, {
        41.1, 18.2, 192, 4050}, {39.6, 17.2, 196, 3550}, {
        42.9, 17.6, 196, 4700}, {42., 20.2, 190, 4250}, {
        37.3, 20.5, 199, 3775}, {40.5, 17.9, 187, 3200}, {
        33.1, 16.1, 178, 2900}, {36.6, 18.4, 184, 3475}, {
        37.8, 20., 190, 4250}, {34.1, 18.1, 193, 3475}, {
        42.2, 18.5, 180, 3550}, {37.8, 17.3, 180, 3700}, {
        39.2, 19.6, 195, 4675}, {39.6, 20.7, 191, 3900}, {
        40.3, 18., 195, 3250}, {37.3, 16.8, 192, 3000}, {
        38.6, 17., 188, 2900}, {41.4, 18.6, 191, 3700}, {
        38.2, 18.1, 185, 3950}, {42.1, 19.1, 195, 4000}, {
        39.1, 18.7, 181, 3750}, {38.2, 20., 190, 3900}, {
        32.1, 15.5, 188, 3050}, {40.9, 16.8, 191, 3700}, {
        38.1, 17.6, 187, 3425}, {38.6, 21.2, 191, 3800}, {
        38.1, 18.6, 190, 3700}, {41.1, 19.1, 188, 4100}, {
        39.6, 18.8, 190, 4600}, {37.5, 18.9, 179, 2975}, {
        36.2, 16.1, 187, 3550}, {41.4, 18.5, 202, 3875}, {
        39.7, 18.4, 190, 3900}, {35.9, 19.2, 189, 3800}, {
        39.2, 21.1, 196, 4150}, {36., 17.1, 187, 3700}, {
        37.9, 18.6, 172, 3150}, {36., 18.5, 186, 3100}, {
        39.2, 18.6, 190, 4250}, {36.2, 17.2, 187, 3150}, {
        38.3, 19.2, 189, 3950}, {37.7, 18.7, 180, 3600}, {
        37.2, 19.4, 184, 3900}, {38.8, 17.6, 191, 3275}, {
        39.7, 18.9, 184, 3550}, {37.8, 18.1, 193, 3750}, {
        37.6, 17., 185, 3600}, {39.7, 17.9, 193, 4250}, {
        37.2, 18.1, 178, 3900}, {38.8, 20., 190, 3950}, {
        41.1, 18.6, 189, 3325}, {39., 17.1, 191, 3050}, {
        39., 18.7, 185, 3650}, {36.7, 19.3, 193, 3450}, {
        41.1, 19., 182, 3425}, {40.7, 17., 190, 3725}, {
        42.3, 21.2, 191, 4150}, {35.5, 16.2, 195, 3350}, {
        38.6, 17.2, 199, 3750}, {42.5, 20.7, 197, 4500}, {
        39.5, 17.4, 186, 3800}, {41.1, 18.1, 205, 4300}, {
        35.6, 17.5, 191, 3175}, {44.1, 18., 210, 4000}, {
        40.6, 18.8, 193, 3800}, {40.3, 18.5, 196, 4350}, {
        42.8, 18.5, 195, 4250}, {36.3, 19.5, 190, 3800}, {
        38.9, 17.8, 181, 3625}, {40.9, 18.9, 184, 3900}, {
        36.8, 18.5, 193, 3500}, {40.2, 20.1, 200, 3975}, {
        36.5, 18., 182, 3150}, {36.4, 17., 195, 3325}, {
        40.6, 19., 199, 4000}, {41.3, 20.3, 194, 3550}, {
        37., 16.9, 185, 3000}, {37.5, 18.5, 199, 4475}, {
        45.8, 18.9, 197, 4150}, {43.1, 19.2, 197, 3500}, {
        39.8, 19.1, 184, 4650}, {37.8, 17.1, 186, 3300}, {
        50., 15.9, 224, 5350}, {45.7, 13.9, 214, 4400}, {
        46.1, 15.1, 215, 5100}, {50.8, 17.3, 228, 5600}, {
        44., 13.6, 208, 4350}, {46.4, 15., 216, 4700}, {
        48.6, 16., 230, 5800}, {50.5, 15.9, 222, 5550}, {
        48.4, 16.3, 220, 5400}, {44.5, 14.3, 216, 4100}, {
        46.2, 14.4, 214, 4650}, {46.9, 14.6, 222, 4875}, {
        49.5, 16.1, 224, 5650}, {46.2, 14.1, 217, 4375}, {
        43.4, 14.4, 218, 4600}, {45.2, 14.8, 212, 5200}, {
        50., 15.3, 220, 5550}, {42.8, 14.2, 209, 4700}, {
        46.5, 13.5, 210, 4550}, {47.2, 13.7, 214, 4925}, {
        50., 16.3, 230, 5700}, {48.4, 14.4, 203, 4625}, {
        45.3, 13.8, 208, 4200}, {55.1, 16., 230, 5850}, {
        45.2, 15.8, 215, 5300}, {50.8, 15.7, 226, 5200}, {
        49.4, 15.8, 216, 4925}, {45.4, 14.6, 211, 4800}, {
        48.1, 15.1, 209, 5500}, {49.2, 15.2, 221, 6300}, {
        47.5, 14.2, 209, 4600}, {49.6, 15., 216, 4750}, {
        46.4, 15.6, 221, 5000}, {47.5, 14., 212, 4875}, {
        53.4, 15.8, 219, 5500}, {50., 15.2, 218, 5700}, {
        48.7, 14.1, 210, 4450}, {50.4, 15.3, 224, 5550}, {
        46.1, 13.2, 211, 4500}, {47.3, 15.3, 222, 5250}, {
        43.5, 15.2, 213, 4650}, {49.8, 15.9, 229, 5950}, {
        42.7, 13.7, 208, 3950}, {45.1, 14.4, 210, 4400}, {
        47.7, 15., 216, 4750}, {47.2, 15.5, 215, 4975}, {
        45.5, 13.9, 210, 4200}, {51.1, 16.3, 220, 6000}, {
        47.5, 15., 218, 4950}, {47.6, 14.5, 215, 5400}, {
        48.8, 16.2, 222, 6000}, {45.5, 13.7, 214, 4650}, {
        46.2, 14.5, 209, 4800}, {47.8, 15., 215, 5650}, {
        49.9, 16.1, 213, 5400}}, 
      "Output" -> {
       "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo"}|>, 
    "Predictions" -> {
     "Chinstrap", "Adelie", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Adelie", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Gentoo", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Chinstrap", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie",
       "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap", "Adelie",
       "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Chinstrap", "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo",
       "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo"}, "LogProbabilities" -> CompressedData["
1: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

     "], "CountMatrix" -> {{78, 5, 0, 0}, {3, 29, 1, 0}, {0, 0, 55, 0}}, 
    "IndicesMatrix" -> {{{35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
       48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
        67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 
       84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 
       103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116}, {34, 
       66, 91, 98, 113}, {}, {}}, {{2, 18, 29}, {1, 3, 4, 5, 6, 7, 8, 9, 10, 
       11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31,
        32, 33}, {22}, {}}, {{}, {}, {117, 118, 119, 120, 121, 122, 123, 124, 
       125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 
       139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 
       153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 
       167, 168, 169, 170, 171}, {}}}, 
    "ExtendedClasses" -> {"Adelie", "Chinstrap", "Gentoo"}, "Weights" -> 
    SparseArray[Automatic, {171}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00010166023391812865`, "SingleEvaluationTime" -> 
    0.0048465125, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{
  3.86006974014825*^9, 3.8601510722602158`*^9, 3.8601512561405582`*^9, {
   3.860151310214137*^9, 3.8601513238954496`*^9}, 3.8602184947857623`*^9, 
   3.860218577368455*^9, 3.86021861682137*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"346931ca-99f2-4e36-9357-5c3256ee046e"]
}, Open  ]],

Cell["\<\
A confusion matrix is plotted to show how many of them were correctly \
predicted and how many of them were misclassified. Since we have a \
class-imbalance problem it is better to look at the F-score then the accuracy.\
\>", "Text",
 CellChangeTimes->{{3.8601509843804064`*^9, 
  3.8601510637466364`*^9}},ExpressionUUID->"bf80700a-ee99-4484-9bb8-\
da8aef42494f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"measurenb", "/@", 
   RowBox[{"{", "\"\<FScore\>\"", "}"}]}], " ", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.860069750165059*^9, 3.860069761141594*^9}, {
  3.8600698906216297`*^9, 3.860069898206357*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"4a24c5b5-44da-448b-aaa0-b870b817c3b1"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Adelie\"\>", "\[Rule]", "0.9512195121951219`"}], ",", 
        RowBox[{"\<\"Chinstrap\"\>", "\[Rule]", "0.8656716417910447`"}], ",", 
        RowBox[{"\<\"Gentoo\"\>", "\[Rule]", "0.990990990990991`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.8600697619695196`*^9, 3.8600698994451694`*^9, {3.86015106758045*^9, 
   3.860151075706292*^9}, 3.860151330897035*^9, 3.8602186856441545`*^9},
 CellLabel->
  "Out[61]//TableForm=",ExpressionUUID->"2da9bf0d-8de0-410d-ad7b-\
15c70a807154"]
}, Open  ]],

Cell["\<\
The F measures tell that Gentoo is predicted accurately 99 % of the time, \
Adelie is predicted accurately 89% of the time and Chinstrap is predicted \
accurately 76% of the time. \
\>", "Text",
 CellChangeTimes->{{3.8601511346486425`*^9, 3.860151193789759*^9}, {
  3.8601513375591354`*^9, 
  3.860151358898989*^9}},ExpressionUUID->"d0a93d7d-93e8-4226-aea9-\
08d0045a4795"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"measurenb", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"{", 
     RowBox[{"377", ",", "269"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8600699376147566`*^9, 3.86006994079566*^9}, {
  3.8600700589160533`*^9, 3.8600701185228543`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"de764d4e-6c6e-4a87-a0ef-cdebf6bc2220"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9302423322774742}, {0., 0.9473684210526315}}], 
          LineBox[{{0., 0.9473684210526315}, {0., 0.9644945098277888}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9302423322774742}, {0., 0.9473684210526315}}], 
          LineBox[{{0., 0.9473684210526315}, {0., 0.9644945098277888}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.0660229143017248, 0.9871794871794872}, {
           0.08771929824561403, 0.9871794871794872}}], 
          LineBox[{{0.08771929824561403, 0.9871794871794872}, {
           0.10941568218950326`, 0.9871794871794872}}]}, {
          LineBox[{{0.08771929824561403, 0.978143306402071}, {
           0.08771929824561403, 0.9871794871794872}}], 
          LineBox[{{0.08771929824561403, 0.9871794871794872}, {
           0.08771929824561403, 0.9962156679569034}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.11910154029128585`, 0.9931506849315068}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.17329612052742757`, 0.9931506849315068}}]}, {
          LineBox[{{0.14619883040935672`, 0.9863013698630134}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.14619883040935672`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.16821929279929257`, 0.9927007299270073}, {
           0.19883040935672514`, 0.9927007299270073}}], 
          LineBox[{{0.19883040935672514`, 0.9927007299270073}, {
           0.2294415259141577, 0.9927007299270073}}]}, {
          LineBox[{{0.19883040935672514`, 0.9854014598540144}, {
           0.19883040935672514`, 0.9927007299270073}}], 
          LineBox[{{0.19883040935672514`, 0.9927007299270073}, {
           0.19883040935672514`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 0.9921875}, {0.25146198830409355`, 
           0.9921875}}], 
          LineBox[{{0.25146198830409355`, 0.9921875}, {0.28473703254256205`, 
           0.9921875}}]}, {
          LineBox[{{0.25146198830409355`, 0.9843749999999998}, {
           0.25146198830409355`, 0.9921875}}], 
          LineBox[{{0.25146198830409355`, 0.9921875}, {0.25146198830409355`, 
           1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3085694259921937, 1.}, {0.34502923976608185`, 1.}}], 
          LineBox[{{0.34502923976608185`, 1.}, {0.38148905353997, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4645763828988186, 1.}, {0.5029239766081871, 1.}}], 
          LineBox[{{0.5029239766081871, 1.}, {0.5412715703175557, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5174447588572202, 1.}, {0.5555555555555556, 1.}}], 
          LineBox[{{0.5555555555555556, 1.}, {0.593666352253891, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5648027917289328, 1.}, {0.6023391812865497, 1.}}], 
          LineBox[{{0.6023391812865497, 1.}, {0.6398755708441667, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660855, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309905, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7030690027410657, 1.}, {0.7368421052631579, 1.}}], 
          LineBox[{{0.7368421052631579, 1.}, {0.7706152077852501, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7705584740858422, 1.}, {0.8011695906432749, 1.}}], 
          LineBox[{{0.8011695906432749, 1.}, {0.8317807072007075, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8776357697422821, 1.}, {0.9005847953216374, 1.}}], 
          LineBox[{{0.9005847953216374, 1.}, {0.9235338209009927, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9302423322774742, 1.}, {0.9473684210526315, 1.}}], 
          LineBox[{{0.9473684210526315, 1.}, {0.9644945098277888, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9644945098277888}, 
             Offset[{3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9644945098277888}, 
             Offset[{-3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9302423322774742}, 
             Offset[{3, 0}, {0., 0.9302423322774742}]}, {{0., 
             0.9302423322774742}, 
             Offset[{-3, 0}, {0., 0.9302423322774742}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9644945098277888}, 
             Offset[{3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9644945098277888}, 
             Offset[{-3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9302423322774742}, 
             Offset[{3, 0}, {0., 0.9302423322774742}]}, {{0., 
             0.9302423322774742}, 
             Offset[{-3, 0}, {0., 0.9302423322774742}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.10941568218950326`, 0.9871794871794872}, 
             Offset[{0, 3}, {0.10941568218950326`, 0.9871794871794872}]}, {{
             0.10941568218950326`, 0.9871794871794872}, 
             Offset[{0, -3}, {0.10941568218950326`, 0.9871794871794872}]}, {{
             0.0660229143017248, 0.9871794871794872}, 
             Offset[{0, 3}, {0.0660229143017248, 0.9871794871794872}]}, {{
             0.0660229143017248, 0.9871794871794872}, 
             Offset[{0, -3}, {0.0660229143017248, 0.9871794871794872}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.08771929824561403, 0.9962156679569034}, 
             Offset[{3, 0}, {0.08771929824561403, 0.9962156679569034}]}, {{
             0.08771929824561403, 0.9962156679569034}, 
             Offset[{-3, 0}, {0.08771929824561403, 0.9962156679569034}]}, {{
             0.08771929824561403, 0.978143306402071}, 
             Offset[{3, 0}, {0.08771929824561403, 0.978143306402071}]}, {{
             0.08771929824561403, 0.978143306402071}, 
             Offset[{-3, 0}, {0.08771929824561403, 0.978143306402071}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.11910154029128585`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.11910154029128585`, 
              0.9931506849315068}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{3, 0}, {0.14619883040935672`, 0.9863013698630134}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{-3, 0}, {0.14619883040935672`, 
              0.9863013698630134}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2294415259141577, 0.9927007299270073}, 
             Offset[{0, 3}, {0.2294415259141577, 0.9927007299270073}]}, {{
             0.2294415259141577, 0.9927007299270073}, 
             Offset[{0, -3}, {0.2294415259141577, 0.9927007299270073}]}, {{
             0.16821929279929257`, 0.9927007299270073}, 
             Offset[{0, 3}, {0.16821929279929257`, 0.9927007299270073}]}, {{
             0.16821929279929257`, 0.9927007299270073}, 
             Offset[{0, -3}, {0.16821929279929257`, 
              0.9927007299270073}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.19883040935672514`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.19883040935672514`, 1.0000000000000002`}]}, {{
             0.19883040935672514`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.19883040935672514`, 1.0000000000000002`}]}, {{
             0.19883040935672514`, 0.9854014598540144}, 
             Offset[{3, 0}, {0.19883040935672514`, 0.9854014598540144}]}, {{
             0.19883040935672514`, 0.9854014598540144}, 
             Offset[{-3, 0}, {0.19883040935672514`, 
              0.9854014598540144}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 0.9921875}, 
             Offset[{0, 3}, {0.28473703254256205`, 0.9921875}]}, {{
             0.28473703254256205`, 0.9921875}, 
             Offset[{0, -3}, {0.28473703254256205`, 0.9921875}]}, {{
             0.21818694406562505`, 0.9921875}, 
             Offset[{0, 3}, {0.21818694406562505`, 0.9921875}]}, {{
             0.21818694406562505`, 0.9921875}, 
             Offset[{0, -3}, {0.21818694406562505`, 0.9921875}]}}], {{{1., 
           0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.25146198830409355`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.25146198830409355`, 1.0000000000000002`}]}, {{
             0.25146198830409355`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.25146198830409355`, 1.0000000000000002`}]}, {{
             0.25146198830409355`, 0.9843749999999998}, 
             Offset[{3, 0}, {0.25146198830409355`, 0.9843749999999998}]}, {{
             0.25146198830409355`, 0.9843749999999998}, 
             Offset[{-3, 0}, {0.25146198830409355`, 
              0.9843749999999998}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.38148905353997, 1.}, 
             Offset[{0, 3}, {0.38148905353997, 1.}]}, {{0.38148905353997, 1.},
              Offset[{0, -3}, {0.38148905353997, 1.}]}, {{0.3085694259921937, 
             1.}, Offset[{0, 3}, {0.3085694259921937, 1.}]}, {{
             0.3085694259921937, 1.}, 
             Offset[{0, -3}, {0.3085694259921937, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5412715703175557, 1.}, 
             Offset[{0, 3}, {0.5412715703175557, 1.}]}, {{0.5412715703175557, 
             1.}, Offset[{0, -3}, {0.5412715703175557, 1.}]}, {{
             0.4645763828988186, 1.}, 
             Offset[{0, 3}, {0.4645763828988186, 1.}]}, {{0.4645763828988186, 
             1.}, Offset[{0, -3}, {0.4645763828988186, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.593666352253891, 1.}, 
             Offset[{0, 3}, {0.593666352253891, 1.}]}, {{0.593666352253891, 
             1.}, Offset[{0, -3}, {0.593666352253891, 1.}]}, {{
             0.5174447588572202, 1.}, 
             Offset[{0, 3}, {0.5174447588572202, 1.}]}, {{0.5174447588572202, 
             1.}, Offset[{0, -3}, {0.5174447588572202, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6398755708441667, 1.}, 
             Offset[{0, 3}, {0.6398755708441667, 1.}]}, {{0.6398755708441667, 
             1.}, Offset[{0, -3}, {0.6398755708441667, 1.}]}, {{
             0.5648027917289328, 1.}, 
             Offset[{0, 3}, {0.5648027917289328, 1.}]}, {{0.5648027917289328, 
             1.}, Offset[{0, -3}, {0.5648027917289328, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309905, 1.}, 
             Offset[{0, 3}, {0.7311885453309905, 1.}]}, {{0.7311885453309905, 
             1.}, Offset[{0, -3}, {0.7311885453309905, 1.}]}, {{
             0.6606243201660855, 1.}, 
             Offset[{0, 3}, {0.6606243201660855, 1.}]}, {{0.6606243201660855, 
             1.}, Offset[{0, -3}, {0.6606243201660855, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7706152077852501, 1.}, 
             Offset[{0, 3}, {0.7706152077852501, 1.}]}, {{0.7706152077852501, 
             1.}, Offset[{0, -3}, {0.7706152077852501, 1.}]}, {{
             0.7030690027410657, 1.}, 
             Offset[{0, 3}, {0.7030690027410657, 1.}]}, {{0.7030690027410657, 
             1.}, Offset[{0, -3}, {0.7030690027410657, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8317807072007075, 1.}, 
             Offset[{0, 3}, {0.8317807072007075, 1.}]}, {{0.8317807072007075, 
             1.}, Offset[{0, -3}, {0.8317807072007075, 1.}]}, {{
             0.7705584740858422, 1.}, 
             Offset[{0, 3}, {0.7705584740858422, 1.}]}, {{0.7705584740858422, 
             1.}, Offset[{0, -3}, {0.7705584740858422, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9235338209009927, 1.}, 
             Offset[{0, 3}, {0.9235338209009927, 1.}]}, {{0.9235338209009927, 
             1.}, Offset[{0, -3}, {0.9235338209009927, 1.}]}, {{
             0.8776357697422821, 1.}, 
             Offset[{0, 3}, {0.8776357697422821, 1.}]}, {{0.8776357697422821, 
             1.}, Offset[{0, -3}, {0.8776357697422821, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9644945098277888, 1.}, 
             Offset[{0, 3}, {0.9644945098277888, 1.}]}, {{0.9644945098277888, 
             1.}, Offset[{0, -3}, {0.9644945098277888, 1.}]}, {{
             0.9302423322774742, 1.}, 
             Offset[{0, 3}, {0.9302423322774742, 1.}]}, {{0.9302423322774742, 
             1.}, Offset[{0, -3}, {0.9302423322774742, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQBmIQDQPtMscLZcLf2zP+Zf0ifuG9PYzvk24492jJNvuC
n9Pyf057b5+lvXLtkm2H7Ov+/Pj4+Ph7e5PpF2Pcik/af+azCDI58t6+HmKA
PdjQA+/twdrFLkP4DB/s/RNtW7+KXIPzIfpv2v8Hg/f2kmdTgUJ34PIQ8x7A
+UUgdx1/COengQ14DOdHgC14Auf7pZhPvOvyDM53ruR9ajrlOZxvPOt0ht7i
l3C+6tapV8KCXsP5EPe8gfNBuq8HvIPzYeEF4z943cjAw78JHn6w8EXVh+CP
hi9p4QsA2RL/LQ==
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{22, 2, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 
          9, 8, 7, 6, 5, 4, 3}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
         19, 20, 21}]}}}], {{}, {}}}, {{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9302423322774742}, {0., 0.9473684210526315}}], 
          LineBox[{{0., 0.9473684210526315}, {0., 0.9644945098277888}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9302423322774742}, {0., 0.9473684210526315}}], 
          LineBox[{{0., 0.9473684210526315}, {0., 0.9644945098277888}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.0660229143017248, 0.9871794871794872}, {
           0.08771929824561403, 0.9871794871794872}}], 
          LineBox[{{0.08771929824561403, 0.9871794871794872}, {
           0.10941568218950326`, 0.9871794871794872}}]}, {
          LineBox[{{0.08771929824561403, 0.978143306402071}, {
           0.08771929824561403, 0.9871794871794872}}], 
          LineBox[{{0.08771929824561403, 0.9871794871794872}, {
           0.08771929824561403, 0.9962156679569034}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.11910154029128585`, 0.9931506849315068}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.17329612052742757`, 0.9931506849315068}}]}, {
          LineBox[{{0.14619883040935672`, 0.9863013698630134}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.14619883040935672`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.16821929279929257`, 0.9927007299270073}, {
           0.19883040935672514`, 0.9927007299270073}}], 
          LineBox[{{0.19883040935672514`, 0.9927007299270073}, {
           0.2294415259141577, 0.9927007299270073}}]}, {
          LineBox[{{0.19883040935672514`, 0.9854014598540144}, {
           0.19883040935672514`, 0.9927007299270073}}], 
          LineBox[{{0.19883040935672514`, 0.9927007299270073}, {
           0.19883040935672514`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 0.9921875}, {0.25146198830409355`, 
           0.9921875}}], 
          LineBox[{{0.25146198830409355`, 0.9921875}, {0.28473703254256205`, 
           0.9921875}}]}, {
          LineBox[{{0.25146198830409355`, 0.9843749999999998}, {
           0.25146198830409355`, 0.9921875}}], 
          LineBox[{{0.25146198830409355`, 0.9921875}, {0.25146198830409355`, 
           1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3085694259921937, 1.}, {0.34502923976608185`, 1.}}], 
          LineBox[{{0.34502923976608185`, 1.}, {0.38148905353997, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4645763828988186, 1.}, {0.5029239766081871, 1.}}], 
          LineBox[{{0.5029239766081871, 1.}, {0.5412715703175557, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5174447588572202, 1.}, {0.5555555555555556, 1.}}], 
          LineBox[{{0.5555555555555556, 1.}, {0.593666352253891, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5648027917289328, 1.}, {0.6023391812865497, 1.}}], 
          LineBox[{{0.6023391812865497, 1.}, {0.6398755708441667, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660855, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309905, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7030690027410657, 1.}, {0.7368421052631579, 1.}}], 
          LineBox[{{0.7368421052631579, 1.}, {0.7706152077852501, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7705584740858422, 1.}, {0.8011695906432749, 1.}}], 
          LineBox[{{0.8011695906432749, 1.}, {0.8317807072007075, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8776357697422821, 1.}, {0.9005847953216374, 1.}}], 
          LineBox[{{0.9005847953216374, 1.}, {0.9235338209009927, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9302423322774742, 1.}, {0.9473684210526315, 1.}}], 
          LineBox[{{0.9473684210526315, 1.}, {0.9644945098277888, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9644945098277888}, 
             Offset[{3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9644945098277888}, 
             Offset[{-3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9302423322774742}, 
             Offset[{3, 0}, {0., 0.9302423322774742}]}, {{0., 
             0.9302423322774742}, 
             Offset[{-3, 0}, {0., 0.9302423322774742}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9644945098277888}, 
             Offset[{3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9644945098277888}, 
             Offset[{-3, 0}, {0., 0.9644945098277888}]}, {{0., 
             0.9302423322774742}, 
             Offset[{3, 0}, {0., 0.9302423322774742}]}, {{0., 
             0.9302423322774742}, 
             Offset[{-3, 0}, {0., 0.9302423322774742}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.10941568218950326`, 0.9871794871794872}, 
             Offset[{0, 3}, {0.10941568218950326`, 0.9871794871794872}]}, {{
             0.10941568218950326`, 0.9871794871794872}, 
             Offset[{0, -3}, {0.10941568218950326`, 0.9871794871794872}]}, {{
             0.0660229143017248, 0.9871794871794872}, 
             Offset[{0, 3}, {0.0660229143017248, 0.9871794871794872}]}, {{
             0.0660229143017248, 0.9871794871794872}, 
             Offset[{0, -3}, {0.0660229143017248, 0.9871794871794872}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.08771929824561403, 0.9962156679569034}, 
             Offset[{3, 0}, {0.08771929824561403, 0.9962156679569034}]}, {{
             0.08771929824561403, 0.9962156679569034}, 
             Offset[{-3, 0}, {0.08771929824561403, 0.9962156679569034}]}, {{
             0.08771929824561403, 0.978143306402071}, 
             Offset[{3, 0}, {0.08771929824561403, 0.978143306402071}]}, {{
             0.08771929824561403, 0.978143306402071}, 
             Offset[{-3, 0}, {0.08771929824561403, 0.978143306402071}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.11910154029128585`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.11910154029128585`, 
              0.9931506849315068}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{3, 0}, {0.14619883040935672`, 0.9863013698630134}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{-3, 0}, {0.14619883040935672`, 
              0.9863013698630134}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2294415259141577, 0.9927007299270073}, 
             Offset[{0, 3}, {0.2294415259141577, 0.9927007299270073}]}, {{
             0.2294415259141577, 0.9927007299270073}, 
             Offset[{0, -3}, {0.2294415259141577, 0.9927007299270073}]}, {{
             0.16821929279929257`, 0.9927007299270073}, 
             Offset[{0, 3}, {0.16821929279929257`, 0.9927007299270073}]}, {{
             0.16821929279929257`, 0.9927007299270073}, 
             Offset[{0, -3}, {0.16821929279929257`, 
              0.9927007299270073}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.19883040935672514`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.19883040935672514`, 1.0000000000000002`}]}, {{
             0.19883040935672514`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.19883040935672514`, 1.0000000000000002`}]}, {{
             0.19883040935672514`, 0.9854014598540144}, 
             Offset[{3, 0}, {0.19883040935672514`, 0.9854014598540144}]}, {{
             0.19883040935672514`, 0.9854014598540144}, 
             Offset[{-3, 0}, {0.19883040935672514`, 
              0.9854014598540144}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 0.9921875}, 
             Offset[{0, 3}, {0.28473703254256205`, 0.9921875}]}, {{
             0.28473703254256205`, 0.9921875}, 
             Offset[{0, -3}, {0.28473703254256205`, 0.9921875}]}, {{
             0.21818694406562505`, 0.9921875}, 
             Offset[{0, 3}, {0.21818694406562505`, 0.9921875}]}, {{
             0.21818694406562505`, 0.9921875}, 
             Offset[{0, -3}, {0.21818694406562505`, 0.9921875}]}}], {{{1., 
           0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.25146198830409355`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.25146198830409355`, 1.0000000000000002`}]}, {{
             0.25146198830409355`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.25146198830409355`, 1.0000000000000002`}]}, {{
             0.25146198830409355`, 0.9843749999999998}, 
             Offset[{3, 0}, {0.25146198830409355`, 0.9843749999999998}]}, {{
             0.25146198830409355`, 0.9843749999999998}, 
             Offset[{-3, 0}, {0.25146198830409355`, 
              0.9843749999999998}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.38148905353997, 1.}, 
             Offset[{0, 3}, {0.38148905353997, 1.}]}, {{0.38148905353997, 1.},
              Offset[{0, -3}, {0.38148905353997, 1.}]}, {{0.3085694259921937, 
             1.}, Offset[{0, 3}, {0.3085694259921937, 1.}]}, {{
             0.3085694259921937, 1.}, 
             Offset[{0, -3}, {0.3085694259921937, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5412715703175557, 1.}, 
             Offset[{0, 3}, {0.5412715703175557, 1.}]}, {{0.5412715703175557, 
             1.}, Offset[{0, -3}, {0.5412715703175557, 1.}]}, {{
             0.4645763828988186, 1.}, 
             Offset[{0, 3}, {0.4645763828988186, 1.}]}, {{0.4645763828988186, 
             1.}, Offset[{0, -3}, {0.4645763828988186, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.593666352253891, 1.}, 
             Offset[{0, 3}, {0.593666352253891, 1.}]}, {{0.593666352253891, 
             1.}, Offset[{0, -3}, {0.593666352253891, 1.}]}, {{
             0.5174447588572202, 1.}, 
             Offset[{0, 3}, {0.5174447588572202, 1.}]}, {{0.5174447588572202, 
             1.}, Offset[{0, -3}, {0.5174447588572202, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6398755708441667, 1.}, 
             Offset[{0, 3}, {0.6398755708441667, 1.}]}, {{0.6398755708441667, 
             1.}, Offset[{0, -3}, {0.6398755708441667, 1.}]}, {{
             0.5648027917289328, 1.}, 
             Offset[{0, 3}, {0.5648027917289328, 1.}]}, {{0.5648027917289328, 
             1.}, Offset[{0, -3}, {0.5648027917289328, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309905, 1.}, 
             Offset[{0, 3}, {0.7311885453309905, 1.}]}, {{0.7311885453309905, 
             1.}, Offset[{0, -3}, {0.7311885453309905, 1.}]}, {{
             0.6606243201660855, 1.}, 
             Offset[{0, 3}, {0.6606243201660855, 1.}]}, {{0.6606243201660855, 
             1.}, Offset[{0, -3}, {0.6606243201660855, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7706152077852501, 1.}, 
             Offset[{0, 3}, {0.7706152077852501, 1.}]}, {{0.7706152077852501, 
             1.}, Offset[{0, -3}, {0.7706152077852501, 1.}]}, {{
             0.7030690027410657, 1.}, 
             Offset[{0, 3}, {0.7030690027410657, 1.}]}, {{0.7030690027410657, 
             1.}, Offset[{0, -3}, {0.7030690027410657, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8317807072007075, 1.}, 
             Offset[{0, 3}, {0.8317807072007075, 1.}]}, {{0.8317807072007075, 
             1.}, Offset[{0, -3}, {0.8317807072007075, 1.}]}, {{
             0.7705584740858422, 1.}, 
             Offset[{0, 3}, {0.7705584740858422, 1.}]}, {{0.7705584740858422, 
             1.}, Offset[{0, -3}, {0.7705584740858422, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9235338209009927, 1.}, 
             Offset[{0, 3}, {0.9235338209009927, 1.}]}, {{0.9235338209009927, 
             1.}, Offset[{0, -3}, {0.9235338209009927, 1.}]}, {{
             0.8776357697422821, 1.}, 
             Offset[{0, 3}, {0.8776357697422821, 1.}]}, {{0.8776357697422821, 
             1.}, Offset[{0, -3}, {0.8776357697422821, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9644945098277888, 1.}, 
             Offset[{0, 3}, {0.9644945098277888, 1.}]}, {{0.9644945098277888, 
             1.}, Offset[{0, -3}, {0.9644945098277888, 1.}]}, {{
             0.9302423322774742, 1.}, 
             Offset[{0, 3}, {0.9302423322774742, 1.}]}, {{0.9302423322774742, 
             1.}, Offset[{0, -3}, {0.9302423322774742, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[
           {GrayLevel[1], EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], 
            AbsoluteThickness[1.]}], 
            DiskBox[{0, 0}, Offset[{2., 2.}, {0., 0.}]]}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBWJGIGZiQADep6ZTrge8s0fn+6Qbzj1ass2+4Oe0/J/T
3ttnaa9cu2TbIfu6Pz8+Pj7+3t5k+sUYt+KT9p/5LIJMjry3r2f8y/pF/ALE
nAPv7cHaxS5Dzf1g759o2/pV5BqcD9F/0/4/GLy3lzybChS6A5eHmPcAzi+S
OV4oc/whnJ8GNuAxnB8BtuAJnO+XYj7xrsszON+5EuSz53C+8azTGXqLX8L5
qlunXgkLeg3nQ9zzBs5HDacP9hDvvofzATJFe5I=
       "]]}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9473684210526315}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.947", "0.017"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9473684210526315, 0.017126088775157276`]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.029969946252774743`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9473684210526315, 0.017126088775157276`]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.029969946252774743`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9473684210526315}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.947", "0.017"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9473684210526315, 0.017126088775157276`]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.49563439997195613`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9473684210526315, 0.017126088775157276`]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.49563439997195613`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.08771929824561403, 0.9871794871794872}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.987", "0.009"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9871794871794872, 0.00903618077741615]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.088", "0.022"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.08771929824561403, 0.021696383943889223`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.6957369521269878`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9871794871794872, 0.00903618077741615]}], 
          Row[{"RejectionRate = ", 
            Around[0.08771929824561403, 0.021696383943889223`]}], 
          Row[{IndeterminateThreshold, " = ", 0.6957369521269878}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.14619883040935672`, 0.9931506849315068}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.993", "0.007"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9931506849315068, 0.006849315068493372]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.146", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.14619883040935672`, 0.027097290118070865`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8331383968552062`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9931506849315068, 0.006849315068493372]}], 
          Row[{"RejectionRate = ", 
            Around[0.14619883040935672`, 0.027097290118070865`]}], 
          Row[{IndeterminateThreshold, " = ", 0.8331383968552062}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.19883040935672514`, 0.9927007299270073}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.993", "0.007"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9927007299270073, 0.007299270072992919]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.199", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.19883040935672514`, 0.03061111655743256]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9412307501351218`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9927007299270073, 0.007299270072992919]}], 
          Row[{"RejectionRate = ", 
            Around[0.19883040935672514`, 0.03061111655743256]}], 
          Row[{IndeterminateThreshold, " = ", 0.9412307501351218}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.25146198830409355`, 0.9921875}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.992", "0.008"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9921875, 0.00781250000000022]]}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.251", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.25146198830409355`, 0.0332750442384685]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9615096930093165`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9921875, 0.00781250000000022]}], 
          Row[{"RejectionRate = ", 
            Around[0.25146198830409355`, 0.0332750442384685]}], 
          Row[{IndeterminateThreshold, " = ", 0.9615096930093165}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.2982456140350877, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.298", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.2982456140350877, 0.03508771929824568]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9777512408268196`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.2982456140350877, 0.03508771929824568]}], 
          Row[{IndeterminateThreshold, " = ", 0.9777512408268196}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.34502923976608185`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.35", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.34502923976608185`, 0.03645981377388813]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.983940544670118`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.34502923976608185`, 0.03645981377388813]}], 
          Row[{IndeterminateThreshold, " = ", 0.983940544670118}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.39766081871345027`, 0.9999999999999999}}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9999999999999999`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.40", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.39766081871345027`, 0.03753638955761696]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9898353765345927`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9999999999999999}], 
          Row[{"RejectionRate = ", 
            Around[0.39766081871345027`, 0.03753638955761696]}], 
          Row[{IndeterminateThreshold, " = ", 0.9898353765345927}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.4502923976608187, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.45", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.4502923976608187, 0.038158273659132456`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9929527812503731`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.4502923976608187, 0.038158273659132456`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9929527812503731}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5029239766081871, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.50", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5029239766081871, 0.03834759370936853]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9945356375363711`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5029239766081871, 0.03834759370936853]}], 
          Row[{IndeterminateThreshold, " = ", 0.9945356375363711}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5555555555555556, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.56", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5555555555555556, 0.03811079669833542]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.995885979580823`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5555555555555556, 0.03811079669833542]}], 
          Row[{IndeterminateThreshold, " = ", 0.995885979580823}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6023391812865497, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6023391812865497, 0.037536389557617005`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9962099200160468`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6023391812865497, 0.037536389557617005`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9962099200160468}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6549707602339181, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.65", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6549707602339181, 0.0364598137738882]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9978151230447831`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6549707602339181, 0.0364598137738882]}], 
          Row[{IndeterminateThreshold, " = ", 0.9978151230447831}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.695906432748538, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.696", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.695906432748538, 0.03528211258245245]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9990767457380049`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.695906432748538, 0.03528211258245245]}], 
          Row[{IndeterminateThreshold, " = ", 0.9990767457380049}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.7368421052631579, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.737", "0.034"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.7368421052631579, 0.03377310252209216]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9997281221055179`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.7368421052631579, 0.03377310252209216]}], 
          Row[{IndeterminateThreshold, " = ", 0.9997281221055179}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8011695906432749, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.801", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8011695906432749, 0.03061111655743269]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998385823938538`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8011695906432749, 0.03061111655743269]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998385823938538}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998862341591205`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998862341591205}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9005847953216374, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.901", "0.023"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9005847953216374, 0.022949025579355267`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999932626074635`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.9005847953216374, 0.022949025579355267`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999932626074635}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9473684210526315, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.947", "0.017"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9473684210526315, 0.01712608877515728]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.999995401290855`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.9473684210526315, 0.01712608877515728]}], 
          Row[{IndeterminateThreshold, " = ", 0.999995401290855}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9941520467836257, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"1.`", "\[Infinity]"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[1., 
                DirectedInfinity[1]]]}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9941520467836257, 0.00584795321637449]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.999997679499104`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[1., 
             DirectedInfinity[1]]}], 
          Row[{"RejectionRate = ", 
            Around[0.9941520467836257, 0.00584795321637449]}], 
          Row[{IndeterminateThreshold, " = ", 0.999997679499104}]}], 
        "Tooltip"]& ]}}, {{}, {}}}},
  AspectRatio->Full,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9793836805555579},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->{377, 269},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1.0000000000000002`}, {0.9793836805555579, 
    1.0000000000000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.860069942574366*^9, {3.8600700919161325`*^9, 3.8600701196949344`*^9}, 
   3.860152733833846*^9, 3.860218691805374*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"550760e3-0b3b-4f10-b83a-64063760e636"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RandomForest :", "Subsection",
 CellChangeTimes->{{3.860152738653386*^9, 
  3.8601527572170043`*^9}},ExpressionUUID->"fb2e1392-7b6d-4356-8db2-\
45fbcacb510c"],

Cell["\<\
The random forest is used for classification purposes and creates multiple \
number of decision trees which are trained on a subset of variables instead \
of the whole dataset itself.\
\>", "Text",
 CellChangeTimes->{{3.8601534762001095`*^9, 
  3.8601536097190595`*^9}},ExpressionUUID->"eb950121-60e5-4214-be68-\
272fc5ef3dc2"],

Cell[TextData[StyleBox["Train the model :",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.860153619442463*^9, 3.8601536259771595`*^9}, {
  3.860218696237381*^9, 
  3.8602186971813016`*^9}},ExpressionUUID->"1341500d-43cf-42de-9d02-\
6088ad47f436"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<RandomForest\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8600722164485474`*^9, 3.8600722442641315`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"b1c5ad09-e6d9-4c23-8b5b-804571724aa5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"RandomForest\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["171", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 171, "ClassNumber" -> 3, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 4|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 171, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.004085090746150243, -0.3612744103301966, 
                   0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                   0.984330125195285}, {
                   0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                   0.01600787497426431, 
                   0.001811504406973886, -0.00020032542764021215`}}, 
                  "Precisions" -> {1.4588368163658181`*^-6, 
                   0.0215411092967585, 0.05960642825620558, 
                   0.4279510542010826}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                   "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   2758349319774705302|>], "InputDimension" -> 0, 
                "OutputDimension" -> 4, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0449013, "MaxTrainingMemory" -> 206512, 
                  "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 29, 11, 58, 19.0360667`9.032152155179894}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                   "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                   0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[16.53064340630656, 0.593442758765043], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 31956639518117771|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {44.13157894736843, 16.94970760233918, 
              202.20467836257308`, 4241.666666666666}, 
             "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
              14.416088368344866`, 827.828308046025}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             3699363863601728199, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {3}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`, 
        "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 2, 3, 1}], 
          "NumericalThresholds" -> {
           0.40052372217178345`, -0.003632115665823221, -0.1817372441291809, \
-0.2345462143421173, 0.6702232360839844, 0.7286646366119385}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {
            6, -7}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 4, 3, 1, 4, 4}], 
          "NumericalThresholds" -> {-0.15905006229877472`, 
           0.19624653458595276`, -0.14864923059940338`, -0.5322490930557251, 
           0.06101970002055168, 0.1969815045595169}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {-5, 
            6}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 4}], 
          "NumericalThresholds" -> {0.4329911172389984, 
           0.33804574608802795`, -0.3739287853240967, -0.1817372441291809, \
-0.22926859557628632`}, "Children" -> 
          RawArray["Integer16",{{2, -6}, {3, -5}, {4, 
            5}, {-1, -2}, {-3, -4}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 2, 2}], 
          "NumericalThresholds" -> {
           0.2599742114543915, -1.0588701963424683`, -0.2594331204891205, \
-0.11852464079856873`, 1.1534889936447144`, 0.030830062925815582`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 
            5}, {-2, -3}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 3, 1, 1, 4, 3, 2}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.2867753803730011, -1.0588701963424683`, \
-0.6326241493225098, -0.33493781089782715`, -0.7131550312042236, 
           0.5450530052185059, -1.265474796295166}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {8, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 3, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 1, 4}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.5076515674591064, -0.16346807777881622`, \
-0.5872708559036255, -0.003632115665823221, 0.07088766992092133}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {
            4, -3}, {-1, -2}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 3, 2, 1, 1, 4, 3, 3, 3}], 
          "NumericalThresholds" -> {0.33804574608802795`, -0.5043469071388245,
            0.07437744736671448, 
           0.19303394854068756`, -0.5872708559036255, -0.29485198855400085`, \
-0.29287630319595337`, -0.4391448497772217, 0.6702232360839844}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
            7, 8}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 3, 1, 2, 2, 3, 1}], 
          "NumericalThresholds" -> {-0.39171749353408813`, \
-0.5043469071388245, -0.49849870800971985`, 0.03529045730829239, 
           0.2919829487800598, 0.40052372217178345`, -0.003632115665823221}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 5}, {-2, -3}, {-4, -5}, {
            7, -8}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 1, 1, 2, 1, 1, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 4}], 
          "NumericalThresholds" -> {
           0.40052372217178345`, -0.33493781089782715`, -0.1817372441291809, 
           0.1969815045595169, 0.18677492439746857`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 
            4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 2, 1, 4, 4, 3, 2}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.1893724501132965, -0.3739287853240967, \
-0.10423124581575394`, -0.40808823704719543`, 
           0.6702232360839844, -1.4072691202163696`}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {5, -5}, {-3, -4}, {
            7, -8}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 3, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 2, 1, 2, 1, 3}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.49786800146102905`, -0.4754878282546997, 
           0.2919829487800598, 0.1732868254184723, 0.8014727234840393, 
           1.1261008977890015`, 1.7796212434768677`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {
            6, -6}, {-4, -5}, {-7, 8}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 3, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 3, 1, 2, 2}], 
          "NumericalThresholds" -> {
           0.06400976330041885, -0.10423124581575394`, 
           0.947303056716919, -0.16346807777881622`, -1.051071286201477, \
-0.8158313632011414, 1.3689048290252686`, 0.030830062925815582`}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, -7}, {4, 7}, {5, -4}, {
            6, -3}, {-1, -2}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 3, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 3, 3}], 
          "NumericalThresholds" -> {
           0.06400976330041885, -0.8468205332756042, -0.6326241493225098, \
-0.15905006229877472`, 0.6702232360839844, 0.5358675718307495}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {
            6, -7}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 1, 4, 1, 1, 1, 2, 4}], 
          "NumericalThresholds" -> {-0.3322739005088806, -0.4305478036403656, \
-1.109090805053711, -0.7851954698562622, -0.3739287853240967, 
           0.26933032274246216`, 0.18814268708229065`, -0.1739383488893509}, 
          "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 5}, {-3, -4}, {-5, 6}, {
            7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 2, 1, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.33493781089782715`, 
           0.26933032274246216`, -0.7719036340713501, -0.4358295500278473}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {
            4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 2, 1, 3}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -1.1198909282684326`, 0.07437744736671448, 
           1.4627599716186523`, -0.003632115665823221, 0.5450530052185059}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
            5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 1, 1, 3, 4}], 
          "NumericalThresholds" -> {-0.07517924159765244, -0.4391448497772217,
            0.07437744736671448, -0.5322490930557251, -0.003632115665823221, 
           0.6702232360839844, 0.07088766992092133}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 4}, {-2, -3}, {-4, -5}, {
            7, -8}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 4}], 
          "NumericalThresholds" -> {
           
           0.26467567682266235`, -1.0240353345870972`, -0.1817372441291809, \
-0.33493781089782715`, 1.3091380596160889`, 0.06535142660140991}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
            5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 2, 3, 4, 1, 3, 1, 2}], 
          "NumericalThresholds" -> {-0.22345314919948578`, \
-0.39171749353408813`, -0.5043469071388245, -1.0202239751815796`, \
-0.8230394124984741, 0.06400976330041885, -0.15905006229877472`, 
           1.3091380596160889`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {5, -5}, {-3, -4}, {
            7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 1, 2, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{2, 4, 3, 3, 3, 1, 1, 4, 2, 1}], 
          "NumericalThresholds" -> {-0.3322739005088806, -0.05254282429814339,
            0.6702232360839844, -0.5076515674591064, -1.051071286201477, \
-0.6326241493225098, -0.7125411033630371, -0.47893843054771423`, 
           1.4627599716186523`, -0.15905006229877472`}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -11}, {5, 8}, {6, 
            7}, {-3, -4}, {-5, -6}, {9, 10}, {-7, -8}, {-9, -10}}], 
          "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 1, 2, 1, 1, 2, 2, 1, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 3, 3, 3, 4}], 
          "NumericalThresholds" -> {
           0.06400976330041885, -0.7131550312042236, -0.6269060373306274, \
-1.051071286201477, -0.49786800146102905`, -0.4215066432952881, 
           0.07088766992092133}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
            6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 3}], 
          "NumericalThresholds" -> {-0.07517924159765244, -1.109090805053711, 
           0.02304322086274624, 0.26933032274246216`, 0.18814268708229065`, 
           0.5450530052185059}, "Children" -> 
          RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
            5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 2, 1, 2, 3, 4}], 
          "NumericalThresholds" -> {-0.3322739005088806, -0.5826838612556458, \
-0.003632115665823221, -0.11852464079856873`, -1.269513487815857, 
           0.1969815045595169}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {-3, 
            5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 3, 2, 1, 1, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.003632115665823221, -0.1817372441291809, 
           0.26933032274246216`, 0.06535142660140991}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 
            4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{2, 4, 1, 1}], 
          "NumericalThresholds" -> {-0.3322739005088806, 
           0.5922351479530334, -0.33493781089782715`, 0.26933032274246216`}, 
          "Children" -> 
          RawArray["Integer16",{{-1, 2}, {3, -5}, {-2, 4}, {-3, -4}}], 
          "LeafValues" -> RawArray["UnsignedInteger8",{3, 1, 2, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 3, 2, 4, 1, 1}], 
          "NumericalThresholds" -> {
           0.6702232360839844, -0.2843020260334015, -1.0588701963424683`, 
           0.1739928275346756, -0.10423124581575394`, -0.5872708559036255, 
           0.7090837359428406}, "Children" -> 
          RawArray["Integer16",{{2, -8}, {3, 7}, {4, 5}, {-1, -2}, {
            6, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
          "NumericalThresholds" -> {
           0.40052372217178345`, -0.33493781089782715`, 
           0.26933032274246216`, -0.7719036340713501, 0.030830062925815582`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {
            4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.003632115665823221, 0.31834593415260315`, 
           0.030830062925815582`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
          "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 2, 3, 1, 3, 4}], 
          "NumericalThresholds" -> {0.26467567682266235`, 
           0.07437744736671448, -0.8472568392753601, 
           0.26933032274246216`, -1.4703795909881592`, 0.06535142660140991}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {
            5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 3, 1, 3, 2, 4}], 
          "NumericalThresholds" -> {-0.2594331204891205, 
           0.06400976330041885, -0.5872708559036255, -0.4391448497772217, \
-0.39171749353408813`, -0.1739383488893509}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {-5, 
            6}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 3, 3, 2, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 1, 2}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.10423124581575394`, \
-0.16346807777881622`, -0.3739287853240967, 0.030830062925815582`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {
            4, -3}, {-1, -2}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 1, 3, 4, 4}], 
          "NumericalThresholds" -> {
           0.2599742114543915, -0.003632115665823221, -0.14864923059940338`, \
-1.0791985988616943`, -1.1325349807739258`}, "Children" -> 
          RawArray["Integer16",{{2, -6}, {3, -5}, {4, -4}, {
            5, -3}, {-1, -2}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 3, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
          "NumericalThresholds" -> {
           0.06400976330041885, -0.33493781089782715`, -0.003632115665823221, 
           0.030830062925815582`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
          "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 3, 4, 1, 1, 3, 2}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.8468205332756042, -1.267621636390686, \
-1.457094430923462, -0.003632115665823221, -0.767379641532898, 
           0.025829052552580833`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
            6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 4, 2}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.33493781089782715`, -0.22926859557628632`,
            0.025829052552580833`}, "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
          "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{4, 3, 2, 4, 2, 4, 1, 4, 4, 4, 3}], 
          "NumericalThresholds" -> {0.1969815045595169, -0.14864923059940338`,
            0.6987695097923279, -0.960408627986908, -0.11852464079856873`, \
-1.080416202545166, -0.29802095890045166`, -0.7822780609130859, \
-0.10423124581575394`, -0.29485198855400085`, 0.3979429006576538}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 10}, {4, 8}, {5, 7}, {-1, 
            6}, {-2, -3}, {-4, -5}, {-6, 
            9}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 2, 4, 1, 2, 2, 2, 1}], 
          "NumericalThresholds" -> {
           0.33804574608802795`, -0.18713407218456268`, -1.0986380577087402`, 
           0.26933032274246216`, 0.02304322086274624, -0.1817372441291809, 
           0.025829052552580833`, -0.22281622886657715`}, "Children" -> 
          RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {
            6, -5}, {-3, -4}, {8, -9}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 3, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
          "NumericalThresholds" -> {
           0.06400976330041885, -0.33493781089782715`, 1.004111886024475, 
           1.0307894945144653`, 0.07088766992092133}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 
            4}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 3, 1, 2}], 
          "NumericalThresholds" -> {
           0.40052372217178345`, -0.003632115665823221, -1.269513487815857, \
-0.2594331204891205, 0.023694055154919624`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 
            4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 2, 4, 1, 3}], 
          "NumericalThresholds" -> {-0.33493781089782715`, \
-0.1817372441291809, -0.10423124581575394`, 0.19303394854068756`, 
           0.5386861562728882}, "Children" -> 
          RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 
            5}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 2, 1, 3, 3, 1, 3, 3}], 
          "NumericalThresholds" -> {0.2599742114543915, 
           0.07437744736671448, -1.0741814374923706`, -0.8453921675682068, \
-0.3654642701148987, -0.003632115665823221, -0.14864923059940338`, 
           0.3346075415611267}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
            7}, {-4, -5}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 1, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 3, 2, 4, 2, 1, 1, 2, 4}], 
          "NumericalThresholds" -> {0.40052372217178345`, -0.5076515674591064,
            0.07437744736671448, -1.267621636390686, 
           1.104723572731018, -1.1592905521392822`, -0.15905006229877472`, 
           0.023694055154919624`, 0.5445704460144043}, "Children" -> 
          RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
            6}, {-4, -5}, {-6, -7}, {9, -10}, {-8, -9}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 3, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 4, 1, 3, 2, 1, 4}], 
          "NumericalThresholds" -> {-0.2594331204891205, 
           0.2595657706260681, -0.459470272064209, 0.33804574608802795`, 
           1.0523638725280762`, 0.1732868254184723, 0.2593555748462677}, 
          "Children" -> 
          RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 7}, {
            6, -6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 2, 2, 1, 4, 1, 2, 2, 4}], 
          "NumericalThresholds" -> {0.33804574608802795`, 1.3054494857788086`,
            0.02304322086274624, -0.8158313632011414, -0.17505593597888947`, \
-0.459470272064209, 0.9581781029701233, 1.514540433883667, 
           0.06535142660140991}, "Children" -> 
          RawArray["Integer16",{{2, 9}, {3, 8}, {4, 5}, {-1, -2}, {6, 
            7}, {-3, -4}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 2, 1, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 2, 1, 2, 4, 1}], 
          "NumericalThresholds" -> {-0.15905006229877472`, \
-0.5378963351249695, -0.33493781089782715`, -0.1817372441291809, 
           0.4329911172389984, 0.47394123673439026`}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {
            6, -7}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{3, 1, 1, 1, 1, 2, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{4, 1, 1, 4, 3}], 
          "NumericalThresholds" -> {
           0.2599742114543915, -0.003632115665823221, -0.4047548770904541, \
-0.1739383488893509, 0.3346075415611267}, "Children" -> 
          RawArray["Integer16",{{2, 5}, {3, 
            4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 3, 3, 1, 4, 1, 2}], 
          "NumericalThresholds" -> {-0.2594331204891205, \
-1.3235869407653809`, -0.3654642701148987, -0.5872708559036255, 
           0.06101970002055168, 0.2940255403518677, 0.023694055154919624`}, 
          "Children" -> 
          RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {6, 
            7}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 1}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{1, 1, 2, 3, 4, 4}], 
          
          "NumericalThresholds" -> {-0.33493781089782715`, \
-0.5872708559036255, 0.33479180932044983`, 
           0.26467567682266235`, -0.22926859557628632`, 0.18677492439746857`},
           "Children" -> 
          RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
            6}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 3, 4}], 
          "NumericalThresholds" -> {
           0.05760031193494797, -0.33493781089782715`, -0.1817372441291809, \
-0.22926859557628632`, -0.49721968173980713`, 0.06535142660140991}, 
          "Children" -> 
          RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
            5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3, 3}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0|>], 
        MachineLearning`DecisionTree[<|
         "FeatureIndices" -> 
          RawArray["Integer16",{3, 3, 3, 4, 3, 1, 4, 2, 4, 4, 3, 1}], 
          "NumericalThresholds" -> {
           0.26467567682266235`, -0.36497968435287476`, -1.1289753913879395`, \
-0.7131550312042236, -0.8468205332756042, -0.9212696552276611, \
-0.9602969288825989, 
           0.7942854166030884, -0.3494398295879364, -0.5950843691825867, 
           0.6702232360839844, 0.1732868254184723}, "Children" -> 
          RawArray["Integer16",{{2, 11}, {3, 9}, {-1, 4}, {5, 8}, {6, 
            7}, {-2, -3}, {-4, -5}, {-6, -7}, {10, -10}, {-8, -9}, {
            12, -13}, {-11, -12}}], "LeafValues" -> 
          RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 3, 2, 
            3}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0|>]}, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
         "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"|>], 
      "OOBConfusionMatrix" -> {{0.9081272117451307, 0.04593639412743464, 
       0.04593639412743464}, {0.04593639412743464, 0.9081272117451307, 
       0.04593639412743464}, {0.04593639412743464, 0.04593639412743464, 
       0.9081272117451307}}, "Calibrator" -> 
      MachineLearning`CalibratorFunction[
       "TemperatureScaling", <|"Theta" -> 2.119754886011994|>], "Method" -> 
      "RandomForest", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "FeatureFraction" -> <|"Value" -> Rational[1, 2], "Options" -> <||>|>, 
        "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
        "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "Implementation" -> <|"Value" -> "DAAL", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[102993], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1230919`6.541774468839604, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.3486811568486994, 0.039636788604695744`], "Accuracy" -> 
         Around[0.9003793524639271, 0.025867878772178506`], "EvaluationTime" -> 
         0.000072270369815733, "TestSize" -> 204, "ModelMemory" -> 
         98036.57142857142, "ModelUtility" -> 0.3379503777020316, 
         "TrainingSize" -> 137, "TrainingTime" -> 0.013520590634132941`, 
         "TrainingMemory" -> 176964.57142857142`, "ExperimentCount" -> 6, 
         "MeanCrossEntropyHistory" -> {
           Around[0.2919277143030259, 0.05505198673387125], 
           Around[0.29681264549521763`, 0.0695251189656593], 
           Around[0.45094912862707554`, 0.07705984682563201], 
           Around[0.29762540598876375`, 0.05670517547994092], 
           Around[0.3209538910566793, 0.05330888164152533], 
           Around[0.4338181556214345, 0.09069385894064264]}, 
         "AccuracyHistory" -> {
           Around[0.9527603048448795, 0.03614055183286864], 
           Around[0.8956174477020226, 0.0520864354840699], 
           Around[0.8670460191305941, 0.05783905065164348], 
           Around[0.9241888762734511, 0.04509166216648561], 
           Around[0.9241888762734511, 0.04509166216648561], 
           Around[0.8384745905591654, 0.06269238433396904]}, 
         "Configuration" -> {
          "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
           Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
           0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 171|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "RandomForest", 
           "Options" -> <|
            "FeatureFraction" -> <|"Value" -> Automatic|>, 
             "LeafSize" -> <|"Value" -> Automatic|>, 
             "TreeNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9689318213316009, 0.017998806405707255`], "Accuracy" -> 
              Around[0.7739178747550086, 0.04620456631649022], 
              "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 163, 
              "ModelMemory" -> 97664, "ModelUtility" -> -0.6653135098928638, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 190000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9689318213316009, 0.01272707806273947]}, 
              "AccuracyHistory" -> {
                Around[0.7739178747550086, 0.03267156216417377]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6181446458695921, 0.02794926436249753], "Accuracy" -> 
              Around[0.8477761319837067, 0.0380113608340184], 
              "EvaluationTime" -> 0.00003819774671078076, "TestSize" -> 282, 
              "ModelMemory" -> 97872., "ModelUtility" -> -0.2211357818753943, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 162714.66666666666`, "ExperimentCount" -> 2,
               "MeanCrossEntropyHistory" -> {
                Around[0.6385708721777997, 0.023683554404906566`], 
                Around[0.5977184195613843, 0.03219178320357312]}, 
              "AccuracyHistory" -> {
                Around[0.8795143037333636, 0.02731684578602066], 
                Around[0.8160379602340498, 0.0325241968989358]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3486811568486994, 0.039636788604695744`], "Accuracy" -> 
              Around[0.9003793524639271, 0.025867878772178506`], 
              "EvaluationTime" -> 0.000072270369815733, "TestSize" -> 204, 
              "ModelMemory" -> 98036.57142857142, "ModelUtility" -> 
              0.3379503777020316, "TrainingSize" -> 137, "TrainingTime" -> 
              0.013520590634132941`, "TrainingMemory" -> 176964.57142857142`, 
              "ExperimentCount" -> 6, "MeanCrossEntropyHistory" -> {
                Around[0.2919277143030259, 0.05505198673387125], 
                Around[0.29681264549521763`, 0.0695251189656593], 
                Around[0.45094912862707554`, 0.07705984682563201], 
                Around[0.29762540598876375`, 0.05670517547994092], 
                Around[0.3209538910566793, 0.05330888164152533], 
                Around[0.4338181556214345, 0.09069385894064264]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864], 
                Around[0.8956174477020226, 0.0520864354840699], 
                Around[0.8670460191305941, 0.05783905065164348], 
                Around[0.9241888762734511, 0.04509166216648561], 
                Around[0.9241888762734511, 0.04509166216648561], 
                Around[0.8384745905591654, 0.06269238433396904]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000072270369815733, "MeanCrossEntropy" -> 
             Around[0.3486811568486994, 0.039636788604695744`], "ModelMemory" -> 
             98036.57142857142, "TrainingMemory" -> 176964.57142857142`, 
             "TrainingTime" -> 0.056686782737369656`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
      "PreprocessorEvaluationTime" -> 3.375*^-6, "PreprocessorMemory" -> 
      65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.860222299127974`17.339187304325165*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.005346578738631979, 
          "ElapsedTimes" -> 0.0493682, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 0.02673289369315988, 
          "ElapsedTimes" -> 0.0486455, "ExperimentCounts" -> 2|>, <|
         "TrainingSizes" -> 137, "TimeBudgets" -> 0.13366446846579955`, 
          "ElapsedTimes" -> 0.1315398, "ExperimentCounts" -> 6|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
           803269050161587613|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
           3873503148790622222|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
           699058557945447889|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
           4483023431942159786|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.5989741, 
      "MaxTrainingMemory" -> 607928, "DataMemory" -> 26048, "FunctionMemory" -> 
      233696, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 29, 11, 58, 19.589596`9.044600416885483}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.860072246453123*^9, 3.8601536550901833`*^9, 
  3.860218699609806*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"9848bfd3-ab52-4d3c-8428-de095b21ac84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"rf", ",", "\"\<MethodDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.860072264078843*^9, 3.860072265082408*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"f879ec11-8332-47a3-9420-0ce6cc2260d3"],

Cell[BoxData[
 TagBox[
  PanelBox["\<\"The random forest classifier uses an ensemble of decision \
trees to predict the class. Each decision tree has been trained on a random \
subset of the training set, and only uses a random subset of the \
features.\"\>",
   BaseStyle->{LineIndent -> 0}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.860072265895686*^9, 3.8601536564502106`*^9, 
  3.8602187015396533`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"d98a301d-e1cc-412a-83bf-e5d106953aa6"]
}, Open  ]],

Cell["The training accuracy is approximately around 90%", "Text",
 CellChangeTimes->{{3.860153663321104*^9, 3.860153684359457*^9}, {
  3.8602187195657067`*^9, 
  3.8602187198897824`*^9}},ExpressionUUID->"3bfdda84-d758-4c55-b3f4-\
51117102a578"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "rf", "]"}]], "Input",
 CellChangeTimes->{{3.8600722899140296`*^9, 3.8600722910522614`*^9}, {
  3.860218710565193*^9, 3.860218712182312*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"3ce864c1-9911-4223-9d10-d7a48e227e80"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical"}, 
                  10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["Adelie"], 
                  TextCell["Adelie"]], 
                 InterpretationBox[
                  Cell["Chinstrap"], 
                  TextCell["Chinstrap"]], 
                 InterpretationBox[
                  Cell["Gentoo"], 
                  TextCell["Gentoo"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"90.0", "2.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    90.03793524639270629`3., 2.5867878772178505287`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "RandomForest",ExpressionUUID->
                   "f0491490-6c35-4c67-a185-473b8912167a"],
                  TextCell["RandomForest"]],
                 StyleBox[
                  TagBox[
                   GridBox[{{"\"FeatureFraction\"", 
                    FractionBox["1", "2"]}, {"\"LeafSize\"", "5"}, {
                    "\"TreeNumber\"", "50"}, {
                    "\"DistributionSmoothing\"", "0.5`"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  Grid[{{"FeatureFraction", 
                    Rational[1, 2]}, {"LeafSize", 5}, {"TreeNumber", 50}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                   All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.73`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"33.4`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.3486811568486993806`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0396367886046957441`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.2694075796393078925`3.", "\", \"", 
                   "0.4279547340580908688`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.2694075796393078925`3., 
                   ", ", 0.4279547340580908688`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"238.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"171", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "598.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.03156102938964852}, {
                    3.4011973816621555`, -0.4810327941058338}, {
                    4.919980925828125, -1.0535973650494412`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.03156102938964852}}, {{
                    3.4011973816621555`, -0.4810327941058338}}, {{
                    4.919980925828125, -1.0535973650494412`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.05031165537819038}, {
                    2.0794415416798357`, -0.013155527999268207`}, {
                    2.0794415416798357`, -0.013155527999268207`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -0.5273016418053484}, {
                    3.4011973816621555`, -0.43681041388870273`}, {
                    3.4011973816621555`, -0.43681041388870273`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.1742704258417802`}, {
                    4.919980925828125, -0.9459308278774553}, {
                    4.919980925828125, -0.9459308278774553}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, -1.110377161474985}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.110377161474985, \
-0.03156102938964852}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7739178747550086}, {
                    3.4011973816621555`, 0.8477761319837067}, {
                    4.919980925828125, 0.9003793524639271}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7739178747550086}}, {{3.4011973816621555`, 
                    0.8477761319837067}}, {{4.919980925828125, 
                    0.9003793524639271}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7620188155315897}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7620188155315897, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.03156102938964852}, {
                    3.4011973816621555`, -0.4810327941058338}, {
                    4.919980925828125, -1.0535973650494412`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.03156102938964852}}, {{
                    3.4011973816621555`, -0.4810327941058338}}, {{
                    4.919980925828125, -1.0535973650494412`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, -1.110377161474985}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.110377161474985, \
-0.03156102938964852}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.03156102938964852}, {
                    3.4011973816621555`, -0.4810327941058338}, {
                    4.919980925828125, -1.0535973650494412`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.03156102938964852}}, {{
                    3.4011973816621555`, -0.4810327941058338}}, {{
                    4.919980925828125, -1.0535973650494412`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.05031165537819038}, {
                    2.0794415416798357`, -0.013155527999268207`}, {
                    2.0794415416798357`, -0.013155527999268207`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{3.4011973816621555`, -0.5273016418053484}, {
                    3.4011973816621555`, -0.43681041388870273`}, {
                    3.4011973816621555`, -0.43681041388870273`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.1742704258417802`}, {
                    4.919980925828125, -0.9459308278774553}, {
                    4.919980925828125, -0.9459308278774553}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, -1.110377161474985}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.110377161474985, \
-0.03156102938964852}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7739178747550086}, {
                    3.4011973816621555`, 0.8477761319837067}, {
                    4.919980925828125, 0.9003793524639271}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7739178747550086}}, {{3.4011973816621555`, 
                    0.8477761319837067}}, {{4.919980925828125, 
                    0.9003793524639271}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7620188155315897}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7620188155315897, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.03156102938964852}, {
                    3.4011973816621555`, -0.4810327941058338}, {
                    4.919980925828125, -1.0535973650494412`}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.03156102938964852}}, {{
                    3.4011973816621555`, -0.4810327941058338}}, {{
                    4.919980925828125, -1.0535973650494412`}}}]}, 
                    Column[{
                    Style["RandomForest", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"FeatureFraction", Automatic}, {
                    "LeafSize", Automatic}, {"TreeNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, -1.110377161474985}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.110377161474985, \
-0.03156102938964852}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{297., {111., 113.89273131957421`}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 171, "ClassNumber" -> 3, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical"|>, 
            "f2" -> <|"Type" -> "Numerical"|>, 
            "f3" -> <|"Type" -> "Numerical"|>, 
            "f4" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 4|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                 Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                 Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                 False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
          "Perfect", "StructurePreserving" -> False, "Missing" -> 
          "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 171, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                   "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 4, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.0449013, "MaxTrainingMemory" -> 206512,
                    "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                   "LanguageVersion" -> {13., 0}, "Date" -> 
                   DateObject[{
                    2022, 4, 29, 11, 58, 19.0360667`9.032152155179894}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                   "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                   "Windows", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                  "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[16.53064340630656, 0.593442758765043], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
              "ID" -> 31956639518117771|>], 
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {44.13157894736843, 16.94970760233918, 
               202.20467836257308`, 4241.666666666666}, 
              "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
               14.416088368344866`, 827.828308046025}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>},
               "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
              3699363863601728199, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {3}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`,
          "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {3, 4}, 0., {
       1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
     "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
     "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 2, 3, 1}], 
           "NumericalThresholds" -> {
            0.40052372217178345`, -0.003632115665823221, -0.1817372441291809, \
-0.2345462143421173, 0.6702232360839844, 0.7286646366119385}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {
             6, -7}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 4, 3, 1, 4, 4}], 
           "NumericalThresholds" -> {-0.15905006229877472`, 
            0.19624653458595276`, -0.14864923059940338`, -0.5322490930557251, 
            0.06101970002055168, 0.1969815045595169}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {-5, 
             6}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 4}], 
           "NumericalThresholds" -> {0.4329911172389984, 
            0.33804574608802795`, -0.3739287853240967, -0.1817372441291809, \
-0.22926859557628632`}, "Children" -> 
           RawArray["Integer16",{{2, -6}, {3, -5}, {4, 
             5}, {-1, -2}, {-3, -4}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 2, 2}], 
           "NumericalThresholds" -> {
            0.2599742114543915, -1.0588701963424683`, -0.2594331204891205, \
-0.11852464079856873`, 1.1534889936447144`, 0.030830062925815582`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 
             5}, {-2, -3}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 1}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 3, 1, 1, 4, 3, 2}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -0.2867753803730011, -1.0588701963424683`, \
-0.6326241493225098, -0.33493781089782715`, -0.7131550312042236, 
            0.5450530052185059, -1.265474796295166}, "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
             6}, {-4, -5}, {8, -9}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 3, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 1, 4}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -0.5076515674591064, -0.16346807777881622`, \
-0.5872708559036255, -0.003632115665823221, 0.07088766992092133}, "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {
             4, -3}, {-1, -2}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 2, 1, 1, 4, 3, 3, 3}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.5043469071388245, 0.07437744736671448, 
            0.19303394854068756`, -0.5872708559036255, -0.29485198855400085`, \
-0.29287630319595337`, -0.4391448497772217, 0.6702232360839844}, "Children" -> 
           RawArray["Integer16",{{2, 9}, {3, 6}, {4, 5}, {-1, -2}, {-3, -4}, {
             7, 8}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2, 3, 1, 2, 2, 3, 1}], 
           "NumericalThresholds" -> {-0.39171749353408813`, \
-0.5043469071388245, -0.49849870800971985`, 0.03529045730829239, 
            0.2919829487800598, 0.40052372217178345`, -0.003632115665823221}, 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 
             5}, {-2, -3}, {-4, -5}, {7, -8}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 1, 1, 2, 1, 1, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 4}], 
           "NumericalThresholds" -> {
            0.40052372217178345`, -0.33493781089782715`, -0.1817372441291809, 
            0.1969815045595169, 0.18677492439746857`}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 
             4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 2, 1, 4, 4, 3, 2}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.1893724501132965, -0.3739287853240967, \
-0.10423124581575394`, -0.40808823704719543`, 
            0.6702232360839844, -1.4072691202163696`}, "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
             5, -5}, {-3, -4}, {7, -8}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 3, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 2, 1, 2, 1, 3}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.49786800146102905`, -0.4754878282546997, 
            0.2919829487800598, 0.1732868254184723, 0.8014727234840393, 
            1.1261008977890015`, 1.7796212434768677`}, "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {
             6, -6}, {-4, -5}, {-7, 8}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 3, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 3, 1, 2, 2}], 
           "NumericalThresholds" -> {
            0.06400976330041885, -0.10423124581575394`, 
            0.947303056716919, -0.16346807777881622`, -1.051071286201477, \
-0.8158313632011414, 1.3689048290252686`, 0.030830062925815582`}, "Children" -> 
           RawArray["Integer16",{{2, 8}, {3, -7}, {4, 7}, {5, -4}, {
             6, -3}, {-1, -2}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 3, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 3, 3}], 
           "NumericalThresholds" -> {
            0.06400976330041885, -0.8468205332756042, -0.6326241493225098, \
-0.15905006229877472`, 0.6702232360839844, 0.5358675718307495}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {
             6, -7}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2, 1, 4, 1, 1, 1, 2, 4}], 
           "NumericalThresholds" -> {-0.3322739005088806, \
-0.4305478036403656, -1.109090805053711, -0.7851954698562622, \
-0.3739287853240967, 0.26933032274246216`, 
            0.18814268708229065`, -0.1739383488893509}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 5}, {-3, -4}, {-5, 
             6}, {7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 2, 1, 2, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.33493781089782715`, 
            0.26933032274246216`, -0.7719036340713501, -0.4358295500278473}, 
           "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {
             4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 2, 1, 3}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -1.1198909282684326`, 0.07437744736671448, 
            1.4627599716186523`, -0.003632115665823221, 0.5450530052185059}, 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
             5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 1, 1, 3, 4}], 
           "NumericalThresholds" -> {-0.07517924159765244, \
-0.4391448497772217, 
            0.07437744736671448, -0.5322490930557251, -0.003632115665823221, 
            0.6702232360839844, 0.07088766992092133}, "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
             4}, {-2, -3}, {-4, -5}, {7, -8}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 4}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -1.0240353345870972`, -0.1817372441291809, \
-0.33493781089782715`, 1.3091380596160889`, 0.06535142660140991}, "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
             5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2, 2, 3, 4, 1, 3, 1, 2}], 
           "NumericalThresholds" -> {-0.22345314919948578`, \
-0.39171749353408813`, -0.5043469071388245, -1.0202239751815796`, \
-0.8230394124984741, 0.06400976330041885, -0.15905006229877472`, 
            1.3091380596160889`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {
             5, -5}, {-3, -4}, {7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 1, 2, 2, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{2, 4, 3, 3, 3, 1, 1, 4, 2, 1}], 
           "NumericalThresholds" -> {-0.3322739005088806, \
-0.05254282429814339, 
            0.6702232360839844, -0.5076515674591064, -1.051071286201477, \
-0.6326241493225098, -0.7125411033630371, -0.47893843054771423`, 
            1.4627599716186523`, -0.15905006229877472`}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -11}, {5, 8}, {6, 
             7}, {-3, -4}, {-5, -6}, {9, 10}, {-7, -8}, {-9, -10}}], 
           "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 1, 2, 1, 1, 2, 2, 1, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 3, 3, 3, 4}], 
           "NumericalThresholds" -> {
            0.06400976330041885, -0.7131550312042236, -0.6269060373306274, \
-1.051071286201477, -0.49786800146102905`, -0.4215066432952881, 
            0.07088766992092133}, "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
             6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 3}], 
           "NumericalThresholds" -> {-0.07517924159765244, -1.109090805053711,
             0.02304322086274624, 0.26933032274246216`, 0.18814268708229065`, 
            0.5450530052185059}, "Children" -> 
           RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
             5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2, 2, 1, 2, 3, 4}], 
           "NumericalThresholds" -> {-0.3322739005088806, \
-0.5826838612556458, -0.003632115665823221, -0.11852464079856873`, \
-1.269513487815857, 0.1969815045595169}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {-3, 
             5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 3, 2, 1, 1, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -0.003632115665823221, -0.1817372441291809, 
            0.26933032274246216`, 0.06535142660140991}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 
             4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{2, 4, 1, 1}], 
           "NumericalThresholds" -> {-0.3322739005088806, 
            0.5922351479530334, -0.33493781089782715`, 0.26933032274246216`}, 
           "Children" -> 
           RawArray["Integer16",{{-1, 2}, {3, -5}, {-2, 4}, {-3, -4}}], 
           "LeafValues" -> RawArray["UnsignedInteger8",{3, 1, 2, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 3, 2, 4, 1, 1}], 
           "NumericalThresholds" -> {
            0.6702232360839844, -0.2843020260334015, -1.0588701963424683`, 
            0.1739928275346756, -0.10423124581575394`, -0.5872708559036255, 
            0.7090837359428406}, "Children" -> 
           RawArray["Integer16",{{2, -8}, {3, 7}, {4, 5}, {-1, -2}, {
             6, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
           "NumericalThresholds" -> {
            0.40052372217178345`, -0.33493781089782715`, 
            0.26933032274246216`, -0.7719036340713501, 0.030830062925815582`},
            "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {
             4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -0.003632115665823221, 0.31834593415260315`,
             0.030830062925815582`}, "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
           "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 2, 3, 1, 3, 4}], 
           "NumericalThresholds" -> {0.26467567682266235`, 
            0.07437744736671448, -0.8472568392753601, 
            0.26933032274246216`, -1.4703795909881592`, 0.06535142660140991}, 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {
             5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 3, 1, 3, 2, 4}], 
           "NumericalThresholds" -> {-0.2594331204891205, 
            0.06400976330041885, -0.5872708559036255, -0.4391448497772217, \
-0.39171749353408813`, -0.1739383488893509}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {-5, 
             6}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 3, 3, 2, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 1, 2}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.10423124581575394`, \
-0.16346807777881622`, -0.3739287853240967, 0.030830062925815582`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -4}, {
             4, -3}, {-1, -2}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4, 1, 3, 4, 4}], 
           "NumericalThresholds" -> {
            0.2599742114543915, -0.003632115665823221, -0.14864923059940338`, \
-1.0791985988616943`, -1.1325349807739258`}, "Children" -> 
           RawArray["Integer16",{{2, -6}, {3, -5}, {4, -4}, {
             5, -3}, {-1, -2}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 3, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
           "NumericalThresholds" -> {
            0.06400976330041885, -0.33493781089782715`, -0.003632115665823221,
             0.030830062925815582`}, "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
           "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 3, 4, 1, 1, 3, 2}], 
           "NumericalThresholds" -> {
            
            0.26467567682266235`, -0.8468205332756042, -1.267621636390686, \
-1.457094430923462, -0.003632115665823221, -0.767379641532898, 
            0.025829052552580833`}, "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
             6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 4, 2}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.33493781089782715`, \
-0.22926859557628632`, 0.025829052552580833`}, "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
           "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{4, 3, 2, 4, 2, 4, 1, 4, 4, 4, 3}], 
           "NumericalThresholds" -> {
            0.1969815045595169, -0.14864923059940338`, 
            0.6987695097923279, -0.960408627986908, -0.11852464079856873`, \
-1.080416202545166, -0.29802095890045166`, -0.7822780609130859, \
-0.10423124581575394`, -0.29485198855400085`, 0.3979429006576538}, "Children" -> 
           RawArray["Integer16",{{2, 11}, {3, 10}, {4, 8}, {5, 7}, {-1, 
             6}, {-2, -3}, {-4, -5}, {-6, 
             9}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 2, 4, 1, 2, 2, 2, 1}], 
           "NumericalThresholds" -> {
            0.33804574608802795`, -0.18713407218456268`, -1.0986380577087402`,
             0.26933032274246216`, 0.02304322086274624, -0.1817372441291809, 
            0.025829052552580833`, -0.22281622886657715`}, "Children" -> 
           RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {
             6, -5}, {-3, -4}, {8, -9}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 3, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
           "NumericalThresholds" -> {
            0.06400976330041885, -0.33493781089782715`, 1.004111886024475, 
            1.0307894945144653`, 0.07088766992092133}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 
             4}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 3, 1, 2}], 
           "NumericalThresholds" -> {
            0.40052372217178345`, -0.003632115665823221, -1.269513487815857, \
-0.2594331204891205, 0.023694055154919624`}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 
             4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 2, 4, 1, 3}], 
           "NumericalThresholds" -> {-0.33493781089782715`, \
-0.1817372441291809, -0.10423124581575394`, 0.19303394854068756`, 
            0.5386861562728882}, "Children" -> 
           RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 
             5}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4, 2, 1, 3, 3, 1, 3, 3}], 
           "NumericalThresholds" -> {0.2599742114543915, 
            0.07437744736671448, -1.0741814374923706`, -0.8453921675682068, \
-0.3654642701148987, -0.003632115665823221, -0.14864923059940338`, 
            0.3346075415611267}, "Children" -> 
           RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
             7}, {-4, -5}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 1, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 2, 4, 2, 1, 1, 2, 4}], 
           "NumericalThresholds" -> {
            0.40052372217178345`, -0.5076515674591064, 
            0.07437744736671448, -1.267621636390686, 
            1.104723572731018, -1.1592905521392822`, -0.15905006229877472`, 
            0.023694055154919624`, 0.5445704460144043}, "Children" -> 
           RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
             6}, {-4, -5}, {-6, -7}, {9, -10}, {-8, -9}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 3, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 4, 1, 3, 2, 1, 4}], 
           "NumericalThresholds" -> {-0.2594331204891205, 
            0.2595657706260681, -0.459470272064209, 0.33804574608802795`, 
            1.0523638725280762`, 0.1732868254184723, 0.2593555748462677}, 
           "Children" -> 
           RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 7}, {
             6, -6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 2, 2, 1, 4, 1, 2, 2, 4}], 
           "NumericalThresholds" -> {0.33804574608802795`, 
            1.3054494857788086`, 
            0.02304322086274624, -0.8158313632011414, -0.17505593597888947`, \
-0.459470272064209, 0.9581781029701233, 1.514540433883667, 
            0.06535142660140991}, "Children" -> 
           RawArray["Integer16",{{2, 9}, {3, 8}, {4, 5}, {-1, -2}, {6, 
             7}, {-3, -4}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 2, 1, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 2, 1, 2, 4, 1}], 
           "NumericalThresholds" -> {-0.15905006229877472`, \
-0.5378963351249695, -0.33493781089782715`, -0.1817372441291809, 
            0.4329911172389984, 0.47394123673439026`}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {
             6, -7}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{3, 1, 1, 1, 1, 2, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{4, 1, 1, 4, 3}], 
           "NumericalThresholds" -> {
            0.2599742114543915, -0.003632115665823221, -0.4047548770904541, \
-0.1739383488893509, 0.3346075415611267}, "Children" -> 
           RawArray["Integer16",{{2, 5}, {3, 
             4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 2, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 3, 3, 1, 4, 1, 2}], 
           "NumericalThresholds" -> {-0.2594331204891205, \
-1.3235869407653809`, -0.3654642701148987, -0.5872708559036255, 
            0.06101970002055168, 0.2940255403518677, 0.023694055154919624`}, 
           "Children" -> 
           RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {6, 
             7}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 1}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{1, 1, 2, 3, 4, 4}], 
           "NumericalThresholds" -> {-0.33493781089782715`, \
-0.5872708559036255, 0.33479180932044983`, 
            0.26467567682266235`, -0.22926859557628632`, 
            0.18677492439746857`}, "Children" -> 
           RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
             6}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 3, 4}], 
           "NumericalThresholds" -> {
            0.05760031193494797, -0.33493781089782715`, -0.1817372441291809, \
-0.22926859557628632`, -0.49721968173980713`, 0.06535142660140991}, 
           "Children" -> 
           RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
             5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3, 3}], 
           "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>], 
         MachineLearning`DecisionTree[<|
          "FeatureIndices" -> 
           RawArray["Integer16",{3, 3, 3, 4, 3, 1, 4, 2, 4, 4, 3, 1}], 
           "NumericalThresholds" -> {
            0.26467567682266235`, -0.36497968435287476`, \
-1.1289753913879395`, -0.7131550312042236, -0.8468205332756042, \
-0.9212696552276611, -0.9602969288825989, 
            0.7942854166030884, -0.3494398295879364, -0.5950843691825867, 
            0.6702232360839844, 0.1732868254184723}, "Children" -> 
           RawArray["Integer16",{{2, 11}, {3, 9}, {-1, 4}, {5, 8}, {6, 
             7}, {-2, -3}, {-4, -5}, {-6, -7}, {10, -10}, {-8, -9}, {
             12, -13}, {-11, -12}}], "LeafValues" -> 
           RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 3, 2, 
             3}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
           0|>]}, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|
         "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
          "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
          False, "Missing" -> "Allowed"|>], 
       "OOBConfusionMatrix" -> {{0.9081272117451307, 0.04593639412743464, 
        0.04593639412743464}, {0.04593639412743464, 0.9081272117451307, 
        0.04593639412743464}, {0.04593639412743464, 0.04593639412743464, 
        0.9081272117451307}}, "Calibrator" -> 
       MachineLearning`CalibratorFunction[
        "TemperatureScaling", <|"Theta" -> 2.119754886011994|>], "Method" -> 
       "RandomForest", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "FeatureFraction" -> <|"Value" -> Rational[1, 2], "Options" -> <||>|>,
          "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
         "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "Implementation" -> <|"Value" -> "DAAL", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "PanelCell" -> CellObject[102993], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       0.1230919`6.541774468839604, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.3486811568486994, 0.039636788604695744`], "Accuracy" -> 
          Around[0.9003793524639271, 0.025867878772178506`], "EvaluationTime" -> 
          0.000072270369815733, "TestSize" -> 204, "ModelMemory" -> 
          98036.57142857142, "ModelUtility" -> 0.3379503777020316, 
          "TrainingSize" -> 137, "TrainingTime" -> 0.013520590634132941`, 
          "TrainingMemory" -> 176964.57142857142`, "ExperimentCount" -> 6, 
          "MeanCrossEntropyHistory" -> {
            Around[0.2919277143030259, 0.05505198673387125], 
            Around[0.29681264549521763`, 0.0695251189656593], 
            Around[0.45094912862707554`, 0.07705984682563201], 
            Around[0.29762540598876375`, 0.05670517547994092], 
            Around[0.3209538910566793, 0.05330888164152533], 
            Around[0.4338181556214345, 0.09069385894064264]}, 
          "AccuracyHistory" -> {
            Around[0.9527603048448795, 0.03614055183286864], 
            Around[0.8956174477020226, 0.0520864354840699], 
            Around[0.8670460191305941, 0.05783905065164348], 
            Around[0.9241888762734511, 0.04509166216648561], 
            Around[0.9241888762734511, 0.04509166216648561], 
            Around[0.8384745905591654, 0.06269238433396904]}, 
          "Configuration" -> {
           "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
            Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
            0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 171|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 6], 
           TypeSystem`Vector[TypeSystem`AnyType, 6], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "RandomForest", 
            "Options" -> <|
             "FeatureFraction" -> <|"Value" -> Automatic|>, 
              "LeafSize" -> <|"Value" -> Automatic|>, 
              "TreeNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.9689318213316009, 0.017998806405707255`], "Accuracy" -> 
               Around[0.7739178747550086, 0.04620456631649022], 
               "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 163, 
               "ModelMemory" -> 97664, "ModelUtility" -> -0.6653135098928638, 
               "TrainingSize" -> 8, "TrainingTime" -> 0.03981071705534971, 
               "TrainingMemory" -> 190000, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.9689318213316009, 0.01272707806273947]}, 
               "AccuracyHistory" -> {
                 Around[0.7739178747550086, 0.03267156216417377]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6181446458695921, 0.02794926436249753], "Accuracy" -> 
               Around[0.8477761319837067, 0.0380113608340184], 
               "EvaluationTime" -> 0.00003819774671078076, "TestSize" -> 282, 
               "ModelMemory" -> 97872., "ModelUtility" -> -0.2211357818753943,
                "TrainingSize" -> 30, "TrainingTime" -> 0.012589254117941668`,
                "TrainingMemory" -> 162714.66666666666`, "ExperimentCount" -> 
               2, "MeanCrossEntropyHistory" -> {
                 Around[0.6385708721777997, 0.023683554404906566`], 
                 Around[0.5977184195613843, 0.03219178320357312]}, 
               "AccuracyHistory" -> {
                 Around[0.8795143037333636, 0.02731684578602066], 
                 Around[0.8160379602340498, 0.0325241968989358]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.3486811568486994, 0.039636788604695744`], "Accuracy" -> 
               Around[0.9003793524639271, 0.025867878772178506`], 
               "EvaluationTime" -> 0.000072270369815733, "TestSize" -> 204, 
               "ModelMemory" -> 98036.57142857142, "ModelUtility" -> 
               0.3379503777020316, "TrainingSize" -> 137, "TrainingTime" -> 
               0.013520590634132941`, "TrainingMemory" -> 176964.57142857142`,
                "ExperimentCount" -> 6, "MeanCrossEntropyHistory" -> {
                 Around[0.2919277143030259, 0.05505198673387125], 
                 Around[0.29681264549521763`, 0.0695251189656593], 
                 Around[0.45094912862707554`, 0.07705984682563201], 
                 Around[0.29762540598876375`, 0.05670517547994092], 
                 Around[0.3209538910566793, 0.05330888164152533], 
                 Around[0.4338181556214345, 0.09069385894064264]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864], 
                 Around[0.8956174477020226, 0.0520864354840699], 
                 Around[0.8670460191305941, 0.05783905065164348], 
                 Around[0.9241888762734511, 0.04509166216648561], 
                 Around[0.9241888762734511, 0.04509166216648561], 
                 Around[0.8384745905591654, 0.06269238433396904]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000072270369815733, "MeanCrossEntropy" -> 
              Around[0.3486811568486994, 0.039636788604695744`], 
              "ModelMemory" -> 98036.57142857142, "TrainingMemory" -> 
              176964.57142857142`, "TrainingTime" -> 0.056686782737369656`|>, 
            "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             3], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
       "PreprocessorEvaluationTime" -> 3.375*^-6, "PreprocessorMemory" -> 
       65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.860222299127974`17.339187304325165*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 8, "TimeBudgets" -> 0.005346578738631979, 
           "ElapsedTimes" -> 0.0493682, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 30, "TimeBudgets" -> 0.02673289369315988, 
           "ElapsedTimes" -> 0.0486455, "ExperimentCounts" -> 2|>, <|
          "TrainingSizes" -> 137, "TimeBudgets" -> 0.13366446846579955`, 
           "ElapsedTimes" -> 0.1315398, "ExperimentCounts" -> 6|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
            803269050161587613|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
            3873503148790622222|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
            699058557945447889|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
            4483023431942159786|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.5989741, 
       "MaxTrainingMemory" -> 607928, "DataMemory" -> 26048, "FunctionMemory" -> 
       233696, "LanguageVersion" -> {13., 0}, "Date" -> 
       DateObject[{2022, 4, 29, 11, 58, 19.589596`9.044600416885483}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.8600722925664654`*^9, 3.8601536586263876`*^9, {3.860218704477704*^9, 
   3.8602187136558065`*^9}},
 CellLabel->"Out[66]=",ExpressionUUID->"74aaf827-b2d2-41aa-a2b9-60a736e3c9f4"]
}, Open  ]],

Cell["\<\
We predict the classes of the test data based on the trained model. We see \
that the test accuracy is around 97% approximately. When the algorithm is run \
for multiple times by shuffling the data we observe that the test accuracy is \
more than that of training.  Hence even random Forest could be overfitting in \
some cases.\
\>", "Text",
 CellChangeTimes->{{3.860153720798539*^9, 3.860153803769162*^9}, {
  3.8602187355472345`*^9, 3.8602187378021784`*^9}, {3.8602187689063606`*^9, 
  3.8602188376740894`*^9}, {3.860218882705251*^9, 
  3.860218904354364*^9}},ExpressionUUID->"3fb3b65b-f737-4723-870a-\
e3bc2b2a23ac"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurerf", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"rf", ",", "testingData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860072315534627*^9, 3.8600723204697437`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"0ac19f16-28b4-4982-8c61-7f0b11890ac0"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "RandomForest",ExpressionUUID->
                 "187c6021-03fc-4fc3-b437-0749093ffd50"],
                TextCell["RandomForest"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "171"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"97.1", "1.3"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    97.0760233918128534469`3., 1.2921664926723948064`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"49.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    48.5380116959064267235`3., 3.8331852752130370909`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9075762187359739386`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0278654179255767853`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8518453828848203679`3.", "\", \"", 
                   "0.9633070545871275092`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8518453828848203679`3., 
                   ", ", 0.9633070545871275092`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0969777287820410977`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0306982941726343522`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0355811404367723932`3.", "\", \"", 
                   "0.158374317127309816`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0355811404367723932`3., 
                   ", ", 0.158374317127309816`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.73`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"8.84`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 1., 1.}, {0.9432939708638834, 
                  0.9041668811035245, 0.758114597974392}, {0.8899415826168348,
                   0.5293291938416123, 0.005479500665998667}}, {{1., 1., 
                  1.}, {0.8867475, 0.6747384999999999, 0.234897555}, {
                  0.9432939708638834, 0.9041668811035245, 
                  0.758114597974392}}, {{1., 0.42, 0.}, {0.9292376771387085, 
                  0.8510517623930496, 0.6199575953463815}, {
                  0.9432939708638834, 0.9041668811035245, 
                  0.758114597974392}}}, {{0, 0}, {3, 3}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"Adelie\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.963855421686747`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "Adelie", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.963855421686747}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024096385542168676`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "Adelie", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.05714285714285714}], 
                    Row[{"Row fraction = ", 0.024096385542168676`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["32", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" examples of \"", "\"Chinstrap\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9142857142857143`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9696969696969697`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9411764705882354`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{32, " examples of ", "Chinstrap", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9142857142857143}], 
                    Row[{"Recall = ", 0.9696969696969697}], 
                    Row[{"FScore = ", 0.9411764705882354}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.01818181818181818`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "Gentoo", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.02857142857142857}], 
                    Row[{"Row fraction = ", 0.01818181818181818}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.017857142857142856`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.012048192771084338`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "Adelie", " misclassified as ", 
                    "Gentoo"}], 
                    Row[{"Column fraction = ", 0.017857142857142856`}], 
                    Row[{"Row fraction = ", 0.012048192771084338`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.017857142857142856`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.030303030303030304`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "Chinstrap", " misclassified as ",
                     "Gentoo"}], 
                    Row[{"Column fraction = ", 0.017857142857142856`}], 
                    Row[{"Row fraction = ", 0.030303030303030304`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["54", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "54", "\" examples of \"", "\"Gentoo\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9642857142857143`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9818181818181818`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9729729729729729`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{54, " examples of ", "Gentoo", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9642857142857143}], 
                    Row[{"Recall = ", 0.9818181818181818}], 
                    Row[{"FScore = ", 0.9729729729729729}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.963855421686747`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{83, " example", "s", " of class ", "Adelie"}], 
                    Row[{"Recall = ", 0.963855421686747}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9696969696969697`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{33, " example", "s", " of class ", "Chinstrap"}], 
                    Row[{"Recall = ", 0.9696969696969697}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9818181818181818`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " of class ", "Gentoo"}], 
                    Row[{"Recall = ", 0.9818181818181818}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{80, " example", "s", " classified as ", "Adelie"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "35", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9142857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{35, " example", "s", " classified as ", 
                    "Chinstrap"}], 
                    Row[{"Precision = ", 0.9142857142857143}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "56", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9642857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{56, " example", "s", " classified as ", "Gentoo"}], 
                    Row[{"Precision = ", 0.9642857142857143}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{2.5, 
                    FormBox[
                    RotationBox["\"Adelie\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"Chinstrap\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"Gentoo\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{2.5, 
                    FormBox["83", TraditionalForm]}, {1.5, 
                    FormBox["33", TraditionalForm]}, {0.5, 
                    FormBox["55", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["80", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["35", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["56", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"Adelie\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"Chinstrap\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"Gentoo\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->196.8,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 171, "ClassNumber" -> 3, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 4|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 171, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                    "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0449013, "MaxTrainingMemory" -> 
                    206512, "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 29, 11, 58, 19.0360667`9.032152155179894}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[16.53064340630656, 0.593442758765043], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 31956639518117771|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>
                   |>, "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {44.13157894736843, 16.94970760233918, 
                 202.20467836257308`, 4241.666666666666}, 
                "StandardDeviation" -> {5.642730392182068, 
                 1.9473891434192623`, 14.416088368344866`, 827.828308046025}, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                3699363863601728199, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 
           0.20689655172413793`, "Gentoo" -> 0.39655172413793105`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, "Model" -> <|"Trees" -> {
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 2, 3, 1}], 
             "NumericalThresholds" -> {
              0.40052372217178345`, -0.003632115665823221, \
-0.1817372441291809, -0.2345462143421173, 0.6702232360839844, 
              0.7286646366119385}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {
               6, -7}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 4, 3, 1, 4, 4}], 
             "NumericalThresholds" -> {-0.15905006229877472`, 
              0.19624653458595276`, -0.14864923059940338`, \
-0.5322490930557251, 0.06101970002055168, 0.1969815045595169}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {4, -3}, {-1, -2}, {-5, 
               6}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 4}], 
             "NumericalThresholds" -> {0.4329911172389984, 
              0.33804574608802795`, -0.3739287853240967, -0.1817372441291809, \
-0.22926859557628632`}, "Children" -> 
             RawArray["Integer16",{{2, -6}, {3, -5}, {4, 
               5}, {-1, -2}, {-3, -4}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{4, 3, 1, 2, 2, 2}], 
             "NumericalThresholds" -> {
              0.2599742114543915, -1.0588701963424683`, -0.2594331204891205, \
-0.11852464079856873`, 1.1534889936447144`, 0.030830062925815582`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {4, 
               5}, {-2, -3}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 3, 1, 1, 4, 3, 2}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.2867753803730011, \
-1.0588701963424683`, -0.6326241493225098, -0.33493781089782715`, \
-0.7131550312042236, 0.5450530052185059, -1.265474796295166}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, -6}, {4, 5}, {-1, -2}, {-3, 
               6}, {-4, -5}, {8, -9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 2, 3, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 1, 4}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.5076515674591064, \
-0.16346807777881622`, -0.5872708559036255, -0.003632115665823221, 
              0.07088766992092133}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {
               4, -3}, {-1, -2}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 2, 1, 1, 4, 3, 3, 3}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.5043469071388245, 0.07437744736671448, 
              0.19303394854068756`, -0.5872708559036255, \
-0.29485198855400085`, -0.29287630319595337`, -0.4391448497772217, 
              0.6702232360839844}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 6}, {4, 
               5}, {-1, -2}, {-3, -4}, {7, 
               8}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 2, 1, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{2, 3, 1, 2, 2, 3, 1}], 
             "NumericalThresholds" -> {-0.39171749353408813`, \
-0.5043469071388245, -0.49849870800971985`, 0.03529045730829239, 
              0.2919829487800598, 
              0.40052372217178345`, -0.003632115665823221}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, 6}, {4, 
               5}, {-2, -3}, {-4, -5}, {7, -8}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 1, 1, 2, 1, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 4}], 
             "NumericalThresholds" -> {
              0.40052372217178345`, -0.33493781089782715`, \
-0.1817372441291809, 0.1969815045595169, 0.18677492439746857`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 
               4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 2, 1, 4, 4, 3, 2}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.1893724501132965, -0.3739287853240967, \
-0.10423124581575394`, -0.40808823704719543`, 
              0.6702232360839844, -1.4072691202163696`}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
               5, -5}, {-3, -4}, {7, -8}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 2, 2, 1, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 1, 2, 1, 2, 1, 3}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.49786800146102905`, \
-0.4754878282546997, 0.2919829487800598, 0.1732868254184723, 
              0.8014727234840393, 1.1261008977890015`, 1.7796212434768677`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {
               6, -6}, {-4, -5}, {-7, 8}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 4, 2, 1, 3, 1, 2, 2}], 
             "NumericalThresholds" -> {
              0.06400976330041885, -0.10423124581575394`, 
              0.947303056716919, -0.16346807777881622`, -1.051071286201477, \
-0.8158313632011414, 1.3689048290252686`, 0.030830062925815582`}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, -7}, {4, 7}, {5, -4}, {
               6, -3}, {-1, -2}, {-5, -6}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 2, 1, 1, 3, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 1, 1, 3, 3}], 
             "NumericalThresholds" -> {
              0.06400976330041885, -0.8468205332756042, -0.6326241493225098, \
-0.15905006229877472`, 0.6702232360839844, 0.5358675718307495}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 4}, {-1, -2}, {-3, -4}, {
               6, -7}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 1, 4, 1, 1, 1, 2, 4}], 
             "NumericalThresholds" -> {-0.3322739005088806, \
-0.4305478036403656, -1.109090805053711, -0.7851954698562622, \
-0.3739287853240967, 0.26933032274246216`, 
              0.18814268708229065`, -0.1739383488893509}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 5}, {-3, -4}, {-5, 
               6}, {7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 2, 1, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.33493781089782715`, 
              0.26933032274246216`, -0.7719036340713501, -0.4358295500278473},
              "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {
               4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 2, 1, 3}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -1.1198909282684326`, 0.07437744736671448,
               1.4627599716186523`, -0.003632115665823221, 
              0.5450530052185059}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
               5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 2, 1, 1, 3, 4}], 
             "NumericalThresholds" -> {-0.07517924159765244, \
-0.4391448497772217, 
              0.07437744736671448, -0.5322490930557251, -0.003632115665823221,
               0.6702232360839844, 0.07088766992092133}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 5}, {-1, 
               4}, {-2, -3}, {-4, -5}, {7, -8}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 4}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -1.0240353345870972`, \
-0.1817372441291809, -0.33493781089782715`, 1.3091380596160889`, 
              0.06535142660140991}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
               5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 2, 3, 4, 1, 3, 1, 2}], 
             "NumericalThresholds" -> {-0.22345314919948578`, \
-0.39171749353408813`, -0.5043469071388245, -1.0202239751815796`, \
-0.8230394124984741, 0.06400976330041885, -0.15905006229877472`, 
              1.3091380596160889`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {
               5, -5}, {-3, -4}, {7, 8}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 3, 1, 1, 1, 1, 2, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{2, 4, 3, 3, 3, 1, 1, 4, 2, 1}], 
             "NumericalThresholds" -> {-0.3322739005088806, \
-0.05254282429814339, 
              0.6702232360839844, -0.5076515674591064, -1.051071286201477, \
-0.6326241493225098, -0.7125411033630371, -0.47893843054771423`, 
              1.4627599716186523`, -0.15905006229877472`}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, -11}, {5, 8}, {6, 
               7}, {-3, -4}, {-5, -6}, {9, 10}, {-7, -8}, {-9, -10}}], 
             "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 3, 1, 2, 1, 1, 2, 2, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 3, 3, 3, 4}], 
             "NumericalThresholds" -> {
              0.06400976330041885, -0.7131550312042236, -0.6269060373306274, \
-1.051071286201477, -0.49786800146102905`, -0.4215066432952881, 
              0.07088766992092133}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 5}, {-1, 4}, {-2, -3}, {-4, 
               6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 1, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 2, 1, 2, 3}], 
             "NumericalThresholds" -> {-0.07517924159765244, \
-1.109090805053711, 0.02304322086274624, 0.26933032274246216`, 
              0.18814268708229065`, 0.5450530052185059}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {-1, 3}, {-2, 4}, {
               5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{2, 2, 1, 2, 3, 4}], 
             "NumericalThresholds" -> {-0.3322739005088806, \
-0.5826838612556458, -0.003632115665823221, -0.11852464079856873`, \
-1.269513487815857, 0.1969815045595169}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 6}, {-3, 
               5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 3, 2, 1, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.003632115665823221, \
-0.1817372441291809, 0.26933032274246216`, 0.06535142660140991}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 
               4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{2, 4, 1, 1}], 
             "NumericalThresholds" -> {-0.3322739005088806, 
              0.5922351479530334, -0.33493781089782715`, 
              0.26933032274246216`}, "Children" -> 
             RawArray["Integer16",{{-1, 2}, {3, -5}, {-2, 4}, {-3, -4}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{3, 1, 2, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 3, 2, 4, 1, 1}], 
             "NumericalThresholds" -> {
              0.6702232360839844, -0.2843020260334015, -1.0588701963424683`, 
              0.1739928275346756, -0.10423124581575394`, -0.5872708559036255, 
              0.7090837359428406}, "Children" -> 
             RawArray["Integer16",{{2, -8}, {3, 7}, {4, 5}, {-1, -2}, {
               6, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 4, 2}], 
             "NumericalThresholds" -> {
              0.40052372217178345`, -0.33493781089782715`, 
              0.26933032274246216`, -0.7719036340713501, 
              0.030830062925815582`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {
               4, -4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.003632115665823221, 
              0.31834593415260315`, 0.030830062925815582`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 2, 3, 1, 3, 4}], 
             "NumericalThresholds" -> {0.26467567682266235`, 
              0.07437744736671448, -0.8472568392753601, 
              0.26933032274246216`, -1.4703795909881592`, 
              0.06535142660140991}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {
               5, -5}, {-3, -4}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 2, 1, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 1, 3, 2, 4}], 
             "NumericalThresholds" -> {-0.2594331204891205, 
              0.06400976330041885, -0.5872708559036255, -0.4391448497772217, \
-0.39171749353408813`, -0.1739383488893509}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 4}, {-2, -3}, {-5, 
               6}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 3, 3, 2, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 4, 1, 1, 2}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.10423124581575394`, \
-0.16346807777881622`, -0.3739287853240967, 0.030830062925815582`}, 
             "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {
               4, -3}, {-1, -2}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{4, 1, 3, 4, 4}], 
             "NumericalThresholds" -> {
              0.2599742114543915, -0.003632115665823221, \
-0.14864923059940338`, -1.0791985988616943`, -1.1325349807739258`}, 
             "Children" -> 
             RawArray["Integer16",{{2, -6}, {3, -5}, {4, -4}, {
               5, -3}, {-1, -2}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 3, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 1, 2}], 
             "NumericalThresholds" -> {
              0.06400976330041885, -0.33493781089782715`, \
-0.003632115665823221, 0.030830062925815582`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 2}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 3, 4, 1, 1, 3, 2}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.8468205332756042, -1.267621636390686, \
-1.457094430923462, -0.003632115665823221, -0.767379641532898, 
              0.025829052552580833`}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 5}, {4, -3}, {-1, -2}, {-4, 
               6}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 4, 2}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.33493781089782715`, \
-0.22926859557628632`, 0.025829052552580833`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {-4, -5}}], 
             "LeafValues" -> RawArray["UnsignedInteger8",{1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 3, 2, 4, 2, 4, 1, 4, 4, 4, 3}], 
             "NumericalThresholds" -> {
              0.1969815045595169, -0.14864923059940338`, 
              0.6987695097923279, -0.960408627986908, -0.11852464079856873`, \
-1.080416202545166, -0.29802095890045166`, -0.7822780609130859, \
-0.10423124581575394`, -0.29485198855400085`, 0.3979429006576538}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 10}, {4, 8}, {5, 7}, {-1, 
               6}, {-2, -3}, {-4, -5}, {-6, 
               9}, {-7, -8}, {-9, -10}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 3, 
               3}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 2, 4, 1, 2, 2, 2, 1}], 
             "NumericalThresholds" -> {
              0.33804574608802795`, -0.18713407218456268`, \
-1.0986380577087402`, 0.26933032274246216`, 
              0.02304322086274624, -0.1817372441291809, 
              0.025829052552580833`, -0.22281622886657715`}, "Children" -> 
             RawArray["Integer16",{{2, 7}, {3, 4}, {-1, -2}, {5, -6}, {
               6, -5}, {-3, -4}, {8, -9}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 1, 4}], 
             "NumericalThresholds" -> {
              0.06400976330041885, -0.33493781089782715`, 1.004111886024475, 
              1.0307894945144653`, 0.07088766992092133}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {-2, 
               4}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 3, 1, 2}], 
             "NumericalThresholds" -> {
              0.40052372217178345`, -0.003632115665823221, \
-1.269513487815857, -0.2594331204891205, 0.023694055154919624`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, -4}, {-1, 
               4}, {-2, -3}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 4, 1, 3}], 
             "NumericalThresholds" -> {-0.33493781089782715`, \
-0.1817372441291809, -0.10423124581575394`, 0.19303394854068756`, 
              0.5386861562728882}, "Children" -> 
             RawArray["Integer16",{{2, 3}, {-1, -2}, {4, 
               5}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{4, 2, 1, 3, 3, 1, 3, 3}], 
             "NumericalThresholds" -> {0.2599742114543915, 
              0.07437744736671448, -1.0741814374923706`, -0.8453921675682068, \
-0.3654642701148987, -0.003632115665823221, -0.14864923059940338`, 
              0.3346075415611267}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 5}, {-1, 4}, {-2, -3}, {6, 
               7}, {-4, -5}, {-6, -7}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 2, 1, 2, 1, 2, 1, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 2, 4, 2, 1, 1, 2, 4}], 
             "NumericalThresholds" -> {
              0.40052372217178345`, -0.5076515674591064, 
              0.07437744736671448, -1.267621636390686, 
              1.104723572731018, -1.1592905521392822`, -0.15905006229877472`, 
              0.023694055154919624`, 0.5445704460144043}, "Children" -> 
             RawArray["Integer16",{{2, 8}, {3, 7}, {4, 5}, {-1, -2}, {-3, 
               6}, {-4, -5}, {-6, -7}, {9, -10}, {-8, -9}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{2, 1, 1, 1, 1, 1, 2, 3, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 4, 1, 3, 2, 1, 4}], 
             "NumericalThresholds" -> {-0.2594331204891205, 
              0.2595657706260681, -0.459470272064209, 0.33804574608802795`, 
              1.0523638725280762`, 0.1732868254184723, 0.2593555748462677}, 
             "Children" -> 
             RawArray["Integer16",{{2, 4}, {3, -3}, {-1, -2}, {5, 7}, {
               6, -6}, {-4, -5}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 2, 2, 1, 4, 1, 2, 2, 4}], 
             "NumericalThresholds" -> {0.33804574608802795`, 
              1.3054494857788086`, 
              0.02304322086274624, -0.8158313632011414, \
-0.17505593597888947`, -0.459470272064209, 0.9581781029701233, 
              1.514540433883667, 0.06535142660140991}, "Children" -> 
             RawArray["Integer16",{{2, 9}, {3, 8}, {4, 5}, {-1, -2}, {6, 
               7}, {-3, -4}, {-5, -6}, {-7, -8}, {-9, -10}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 2, 1, 1, 2, 1, 2, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 2, 1, 2, 4, 1}], 
             
             "NumericalThresholds" -> {-0.15905006229877472`, \
-0.5378963351249695, -0.33493781089782715`, -0.1817372441291809, 
              0.4329911172389984, 0.47394123673439026`}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {
               6, -7}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{3, 1, 1, 1, 1, 2, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{4, 1, 1, 4, 3}], 
             "NumericalThresholds" -> {
              0.2599742114543915, -0.003632115665823221, -0.4047548770904541, \
-0.1739383488893509, 0.3346075415611267}, "Children" -> 
             RawArray["Integer16",{{2, 5}, {3, 
               4}, {-1, -2}, {-3, -4}, {-5, -6}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 3, 3, 1, 4, 1, 2}], 
             "NumericalThresholds" -> {-0.2594331204891205, \
-1.3235869407653809`, -0.3654642701148987, -0.5872708559036255, 
              0.06101970002055168, 0.2940255403518677, 0.023694055154919624`},
              "Children" -> 
             RawArray["Integer16",{{2, 5}, {-1, 3}, {4, -4}, {-2, -3}, {6, 
               7}, {-5, -6}, {-7, -8}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 1, 2, 2, 3, 1}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{1, 1, 2, 3, 4, 4}], 
             "NumericalThresholds" -> {-0.33493781089782715`, \
-0.5872708559036255, 0.33479180932044983`, 
              0.26467567682266235`, -0.22926859557628632`, 
              0.18677492439746857`}, "Children" -> 
             RawArray["Integer16",{{2, 4}, {-1, 3}, {-2, -3}, {5, 
               6}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 1, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> RawArray["Integer16",{3, 1, 2, 4, 3, 4}], 
             "NumericalThresholds" -> {
              0.05760031193494797, -0.33493781089782715`, \
-0.1817372441291809, -0.22926859557628632`, -0.49721968173980713`, 
              0.06535142660140991}, "Children" -> 
             RawArray["Integer16",{{2, 6}, {3, 4}, {-1, -2}, {-3, 
               5}, {-4, -5}, {-6, -7}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 2, 1, 3, 3}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0|>], 
           
           MachineLearning`DecisionTree[<|
            "FeatureIndices" -> 
             RawArray["Integer16",{3, 3, 3, 4, 3, 1, 4, 2, 4, 4, 3, 1}], 
             "NumericalThresholds" -> {
              0.26467567682266235`, -0.36497968435287476`, \
-1.1289753913879395`, -0.7131550312042236, -0.8468205332756042, \
-0.9212696552276611, -0.9602969288825989, 
              0.7942854166030884, -0.3494398295879364, -0.5950843691825867, 
              0.6702232360839844, 0.1732868254184723}, "Children" -> 
             RawArray["Integer16",{{2, 11}, {3, 9}, {-1, 4}, {5, 8}, {6, 
               7}, {-2, -3}, {-4, -5}, {-6, -7}, {10, -10}, {-8, -9}, {
               12, -13}, {-11, -12}}], "LeafValues" -> 
             RawArray["UnsignedInteger8",{1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 3, 2, 
               3}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0|>]}, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
            "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], 
         "OOBConfusionMatrix" -> {{0.9081272117451307, 0.04593639412743464, 
          0.04593639412743464}, {0.04593639412743464, 0.9081272117451307, 
          0.04593639412743464}, {0.04593639412743464, 0.04593639412743464, 
          0.9081272117451307}}, "Calibrator" -> 
         MachineLearning`CalibratorFunction[
          "TemperatureScaling", <|"Theta" -> 2.119754886011994|>], "Method" -> 
         "RandomForest", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "FeatureFraction" -> <|
            "Value" -> Rational[1, 2], "Options" -> <||>|>, 
           "LeafSize" -> <|"Value" -> 5, "Options" -> <||>|>, 
           "TreeNumber" -> <|"Value" -> 50, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "Implementation" -> <|"Value" -> "DAAL", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[102993], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.1230919`6.541774468839604, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.3486811568486994, 0.039636788604695744`], "Accuracy" -> 
            Around[0.9003793524639271, 0.025867878772178506`], 
            "EvaluationTime" -> 0.000072270369815733, "TestSize" -> 204, 
            "ModelMemory" -> 98036.57142857142, "ModelUtility" -> 
            0.3379503777020316, "TrainingSize" -> 137, "TrainingTime" -> 
            0.013520590634132941`, "TrainingMemory" -> 176964.57142857142`, 
            "ExperimentCount" -> 6, "MeanCrossEntropyHistory" -> {
              Around[0.2919277143030259, 0.05505198673387125], 
              Around[0.29681264549521763`, 0.0695251189656593], 
              Around[0.45094912862707554`, 0.07705984682563201], 
              Around[0.29762540598876375`, 0.05670517547994092], 
              Around[0.3209538910566793, 0.05330888164152533], 
              Around[0.4338181556214345, 0.09069385894064264]}, 
            "AccuracyHistory" -> {
              Around[0.9527603048448795, 0.03614055183286864], 
              Around[0.8956174477020226, 0.0520864354840699], 
              Around[0.8670460191305941, 0.05783905065164348], 
              Around[0.9241888762734511, 0.04509166216648561], 
              Around[0.9241888762734511, 0.04509166216648561], 
              Around[0.8384745905591654, 0.06269238433396904]}, 
            "Configuration" -> {
             "RandomForest", "FeatureFraction" -> Automatic, "LeafSize" -> 
              Automatic, "TreeNumber" -> Automatic, "DistributionSmoothing" -> 
              0.5, "Implementation" -> Automatic}, "FinalTrainingSize" -> 
            171|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Vector[TypeSystem`AnyType, 6], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "RandomForest", 
              "Options" -> <|
               "FeatureFraction" -> <|"Value" -> Automatic|>, 
                "LeafSize" -> <|"Value" -> Automatic|>, 
                "TreeNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "Implementation" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9689318213316009, 0.017998806405707255`], 
                 "Accuracy" -> 
                 Around[0.7739178747550086, 0.04620456631649022], 
                 "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 
                 163, "ModelMemory" -> 97664, 
                 "ModelUtility" -> -0.6653135098928638, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
                 190000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9689318213316009, 0.01272707806273947]}, 
                 "AccuracyHistory" -> {
                   Around[0.7739178747550086, 0.03267156216417377]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6181446458695921, 0.02794926436249753], "Accuracy" -> 
                 Around[0.8477761319837067, 0.0380113608340184], 
                 "EvaluationTime" -> 0.00003819774671078076, "TestSize" -> 
                 282, "ModelMemory" -> 97872., 
                 "ModelUtility" -> -0.2211357818753943, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.012589254117941668`, "TrainingMemory" -> 
                 162714.66666666666`, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6385708721777997, 0.023683554404906566`], 
                   Around[0.5977184195613843, 0.03219178320357312]}, 
                 "AccuracyHistory" -> {
                   Around[0.8795143037333636, 0.02731684578602066], 
                   Around[0.8160379602340498, 0.0325241968989358]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3486811568486994, 0.039636788604695744`], 
                 "Accuracy" -> 
                 Around[0.9003793524639271, 0.025867878772178506`], 
                 "EvaluationTime" -> 0.000072270369815733, "TestSize" -> 204, 
                 "ModelMemory" -> 98036.57142857142, "ModelUtility" -> 
                 0.3379503777020316, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.013520590634132941`, "TrainingMemory" -> 
                 176964.57142857142`, "ExperimentCount" -> 6, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.2919277143030259, 0.05505198673387125], 
                   Around[0.29681264549521763`, 0.0695251189656593], 
                   Around[0.45094912862707554`, 0.07705984682563201], 
                   Around[0.29762540598876375`, 0.05670517547994092], 
                   Around[0.3209538910566793, 0.05330888164152533], 
                   Around[0.4338181556214345, 0.09069385894064264]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864], 
                   Around[0.8956174477020226, 0.0520864354840699], 
                   Around[0.8670460191305941, 0.05783905065164348], 
                   Around[0.9241888762734511, 0.04509166216648561], 
                   Around[0.9241888762734511, 0.04509166216648561], 
                   Around[0.8384745905591654, 0.06269238433396904]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000072270369815733, "MeanCrossEntropy" -> 
                Around[0.3486811568486994, 0.039636788604695744`], 
                "ModelMemory" -> 98036.57142857142, "TrainingMemory" -> 
                176964.57142857142`, "TrainingTime" -> 
                0.056686782737369656`|>, "Index" -> 1|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 5]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171,
          "PreprocessorEvaluationTime" -> 3.375*^-6, "PreprocessorMemory" -> 
         65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.860222299127974`17.339187304325165*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.005346578738631979, 
             "ElapsedTimes" -> 0.0493682, "ExperimentCounts" -> 1|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.02673289369315988, 
             "ElapsedTimes" -> 0.0486455, "ExperimentCounts" -> 2|>, <|
            "TrainingSizes" -> 137, "TimeBudgets" -> 0.13366446846579955`, 
             "ElapsedTimes" -> 0.1315398, "ExperimentCounts" -> 6|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
              803269050161587613|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
              3873503148790622222|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
              699058557945447889|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
              4483023431942159786|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.5989741, 
         "MaxTrainingMemory" -> 607928, "DataMemory" -> 26048, 
         "FunctionMemory" -> 233696, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 29, 11, 58, 19.589596`9.044600416885483}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{46.7, 17.9, 195, 3300}, {45.4, 18.7, 188, 3525}, {
        45.2, 17.8, 198, 3950}, {46.1, 18.2, 178, 3250}, {
        45.7, 17., 195, 3650}, {49.8, 17.3, 198, 3675}, {
        46.5, 17.9, 192, 3500}, {46.9, 16.6, 192, 2700}, {
        53.5, 19.9, 205, 4500}, {50.6, 19.4, 193, 3800}, {
        49.3, 19.9, 203, 4050}, {49., 19.5, 210, 3950}, {
        47.5, 16.8, 199, 3900}, {49.6, 18.2, 193, 3775}, {
        50.9, 19.1, 196, 3550}, {50.2, 18.8, 202, 3800}, {
        47., 17.3, 185, 3700}, {45.7, 17.3, 193, 3600}, {
        52., 19., 197, 4150}, {46.4, 18.6, 190, 3450}, {
        52.2, 18.8, 197, 3450}, {52., 20.7, 210, 4800}, {
        50.8, 18.5, 201, 4450}, {51.4, 19., 201, 3950}, {
        58., 17.8, 181, 3700}, {46.6, 17.8, 193, 3800}, {
        49.5, 19., 200, 3800}, {50.2, 18.7, 198, 3775}, {
        45.6, 19.4, 194, 3525}, {51.7, 20.3, 194, 3775}, {
        50.7, 19.7, 203, 4050}, {46.2, 17.5, 187, 3650}, {
        46.4, 17.8, 191, 3700}, {46., 21.5, 194, 4200}, {
        41.1, 18.2, 192, 4050}, {39.6, 17.2, 196, 3550}, {
        42.9, 17.6, 196, 4700}, {42., 20.2, 190, 4250}, {
        37.3, 20.5, 199, 3775}, {40.5, 17.9, 187, 3200}, {
        33.1, 16.1, 178, 2900}, {36.6, 18.4, 184, 3475}, {
        37.8, 20., 190, 4250}, {34.1, 18.1, 193, 3475}, {
        42.2, 18.5, 180, 3550}, {37.8, 17.3, 180, 3700}, {
        39.2, 19.6, 195, 4675}, {39.6, 20.7, 191, 3900}, {
        40.3, 18., 195, 3250}, {37.3, 16.8, 192, 3000}, {
        38.6, 17., 188, 2900}, {41.4, 18.6, 191, 3700}, {
        38.2, 18.1, 185, 3950}, {42.1, 19.1, 195, 4000}, {
        39.1, 18.7, 181, 3750}, {38.2, 20., 190, 3900}, {
        32.1, 15.5, 188, 3050}, {40.9, 16.8, 191, 3700}, {
        38.1, 17.6, 187, 3425}, {38.6, 21.2, 191, 3800}, {
        38.1, 18.6, 190, 3700}, {41.1, 19.1, 188, 4100}, {
        39.6, 18.8, 190, 4600}, {37.5, 18.9, 179, 2975}, {
        36.2, 16.1, 187, 3550}, {41.4, 18.5, 202, 3875}, {
        39.7, 18.4, 190, 3900}, {35.9, 19.2, 189, 3800}, {
        39.2, 21.1, 196, 4150}, {36., 17.1, 187, 3700}, {
        37.9, 18.6, 172, 3150}, {36., 18.5, 186, 3100}, {
        39.2, 18.6, 190, 4250}, {36.2, 17.2, 187, 3150}, {
        38.3, 19.2, 189, 3950}, {37.7, 18.7, 180, 3600}, {
        37.2, 19.4, 184, 3900}, {38.8, 17.6, 191, 3275}, {
        39.7, 18.9, 184, 3550}, {37.8, 18.1, 193, 3750}, {
        37.6, 17., 185, 3600}, {39.7, 17.9, 193, 4250}, {
        37.2, 18.1, 178, 3900}, {38.8, 20., 190, 3950}, {
        41.1, 18.6, 189, 3325}, {39., 17.1, 191, 3050}, {
        39., 18.7, 185, 3650}, {36.7, 19.3, 193, 3450}, {
        41.1, 19., 182, 3425}, {40.7, 17., 190, 3725}, {
        42.3, 21.2, 191, 4150}, {35.5, 16.2, 195, 3350}, {
        38.6, 17.2, 199, 3750}, {42.5, 20.7, 197, 4500}, {
        39.5, 17.4, 186, 3800}, {41.1, 18.1, 205, 4300}, {
        35.6, 17.5, 191, 3175}, {44.1, 18., 210, 4000}, {
        40.6, 18.8, 193, 3800}, {40.3, 18.5, 196, 4350}, {
        42.8, 18.5, 195, 4250}, {36.3, 19.5, 190, 3800}, {
        38.9, 17.8, 181, 3625}, {40.9, 18.9, 184, 3900}, {
        36.8, 18.5, 193, 3500}, {40.2, 20.1, 200, 3975}, {
        36.5, 18., 182, 3150}, {36.4, 17., 195, 3325}, {
        40.6, 19., 199, 4000}, {41.3, 20.3, 194, 3550}, {
        37., 16.9, 185, 3000}, {37.5, 18.5, 199, 4475}, {
        45.8, 18.9, 197, 4150}, {43.1, 19.2, 197, 3500}, {
        39.8, 19.1, 184, 4650}, {37.8, 17.1, 186, 3300}, {
        50., 15.9, 224, 5350}, {45.7, 13.9, 214, 4400}, {
        46.1, 15.1, 215, 5100}, {50.8, 17.3, 228, 5600}, {
        44., 13.6, 208, 4350}, {46.4, 15., 216, 4700}, {
        48.6, 16., 230, 5800}, {50.5, 15.9, 222, 5550}, {
        48.4, 16.3, 220, 5400}, {44.5, 14.3, 216, 4100}, {
        46.2, 14.4, 214, 4650}, {46.9, 14.6, 222, 4875}, {
        49.5, 16.1, 224, 5650}, {46.2, 14.1, 217, 4375}, {
        43.4, 14.4, 218, 4600}, {45.2, 14.8, 212, 5200}, {
        50., 15.3, 220, 5550}, {42.8, 14.2, 209, 4700}, {
        46.5, 13.5, 210, 4550}, {47.2, 13.7, 214, 4925}, {
        50., 16.3, 230, 5700}, {48.4, 14.4, 203, 4625}, {
        45.3, 13.8, 208, 4200}, {55.1, 16., 230, 5850}, {
        45.2, 15.8, 215, 5300}, {50.8, 15.7, 226, 5200}, {
        49.4, 15.8, 216, 4925}, {45.4, 14.6, 211, 4800}, {
        48.1, 15.1, 209, 5500}, {49.2, 15.2, 221, 6300}, {
        47.5, 14.2, 209, 4600}, {49.6, 15., 216, 4750}, {
        46.4, 15.6, 221, 5000}, {47.5, 14., 212, 4875}, {
        53.4, 15.8, 219, 5500}, {50., 15.2, 218, 5700}, {
        48.7, 14.1, 210, 4450}, {50.4, 15.3, 224, 5550}, {
        46.1, 13.2, 211, 4500}, {47.3, 15.3, 222, 5250}, {
        43.5, 15.2, 213, 4650}, {49.8, 15.9, 229, 5950}, {
        42.7, 13.7, 208, 3950}, {45.1, 14.4, 210, 4400}, {
        47.7, 15., 216, 4750}, {47.2, 15.5, 215, 4975}, {
        45.5, 13.9, 210, 4200}, {51.1, 16.3, 220, 6000}, {
        47.5, 15., 218, 4950}, {47.6, 14.5, 215, 5400}, {
        48.8, 16.2, 222, 6000}, {45.5, 13.7, 214, 4650}, {
        46.2, 14.5, 209, 4800}, {47.8, 15., 215, 5650}, {
        49.9, 16.1, 213, 5400}}, 
      "Output" -> {
       "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo"}|>, 
    "Predictions" -> {
     "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Gentoo", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Gentoo", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap",
       "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Chinstrap", "Gentoo", "Gentoo", "Gentoo",
       "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo"}, "LogProbabilities" -> CompressedData["
1:eJzVV1lMlFcUHmZkhwLDbFCRilLFOqKAWtCKC0YERqRiLRGsVYitS8A6qBQC
igK1ClKhMlJZHBlWEWVAyuY5gAYSivsAxQJaEKpSBRFXlpowlwfMffgTfOjD
n5v/5OS7937nO8uduiXwywA2i8XKe/dx3n3mz6Jsrt3TwrN7tsHS+AI416el
qhkQYnTAd4t3ZA/CVbF/f+7NWrAVrp7n7SBET57dv8ccNLE6JEw3O1gJ0trl
Gba3hBge81x/zfwXUGH+mw8n6xZcfTlcpd8jwJg6frthMBclZQ/XKH7+CeqP
By30bxFR7beL2y4MnddBtt2UudVLc2AosCnF3ZxutzmQHpMUOgQXH32fmOLT
CLEhw/Z/3hsB2jmdTvmlXZEaYPt8x/2+zmdgutXvLeHRfNSXPvHrkQuw61zt
/Z4nHVBoZL2jq/EfOHnr9jVviQAbfuW83W0TMfY/Wc1blJq3fDVvew6lrbFb
zsMHjqL4nP4DUHsw179NwwxfyZe1rjTjoaTSQNsiMwrWfQEqobUA3S1kGxVz
2ZiXe8/nvqwCNKviXh+OE6J8T5Hh+noDvJEgLt9QlQqe/UG2ZwJE1H1pdhrP
rHRuUJKUi11NxVKrMA0MlSzRDVQiiKw0BfumaeCW4ofydpdqsAnbHp4kN6be
Szg9ubfAdATebji6Ocv5CmRpNbsq1tJ14jrUJVfNNsLJvJS3GS5JMMvtqGrW
MRFalk5K+KvHGI9778/qmfELjIwsvGGpFFHxW5rnluQqOBj8qGFnyKUSCE5f
sbikQIiy0zmGRdXGGLt1gcTcJBEiIjzFFio+DkRpqz5R6GEdaz13X8dZUFaG
iM84i6jn3NTxwFcleQ41HqFTeTtUUD5jd2R1s2Ds/oQPwgPhl/BNePZv8o3P
RSW4O2oUnl+rjRdV26urVhtRcVYsY6eL45Kh71Uo27fpI+T413Un5PPRaJGf
5ZTEvWBuzUk9HSxA0yPx5XttzPBpnn33m4gCWKQbF+/kYIirxPGrGiz1seJl
JOvmyl3wrcfNr4VeZkhWGg7NTuK0Wh23mep40fDH807iQcNnyifRB9EL0QkN
h3ZOGg5T3g4NJR+vwVLwcPq80MFLB8lK8pbkMclfpvg0fxo/01KTOZLLsTDc
e7hncJCPytiSiwfcuYz1I7sxZ1NQYyZcj90oVNbp47TSh3dfh5tMmK5oOEzt
TPH/L/4ThcNU5zQ7Lb9o+DR9lqr7nJu672mp+92WOLs67+5CKPs4Q8d3QAen
/rg5eqjDYKyekDoyVlcY6vPp3ag5FwKr4MH6SAMLHS3sVK80//BK2x/+fmOA
j5dYt/Ym9MM3O1tPdNU0A9N40e7LtF7R+KTtS+pAkTr/WX2j9YBpPSTzCplf
yNxC6wu0e/2xYn/GNk0Z5Dl72jimmaLly0/Zcpkxtf+e7rUdcKm6D8fcYp0P
JT6GO/P0+jOzBO/NB+S8tHuNX8tej/qRvkr6LOm7NP+Drq4L4maaopOsjLvu
hS5KtU8EhNVng15hp96lVyZI1ukJyiNHZydRcZjaSTxJfEm85zSEpG7t42FR
d9nknJZJGCAs9DMTFU/YvjR+aLpnij9eH0Q3ZL4eP3cz5SercVd73lfDEFk3
KG5N6YTKkjvZGsN94HK5NE3zJBetTOxz0/rYKPFpa+F2l08Yb0zPSfKJ5Nf1
itF8o+Ew9f/Q9vHvs855o+8zmj/T+DK1b+3Q4W9km6LbqQ310mFt/IwfHWra
dJ5xvtPs3LOKx/nXeKibaeTl4c5B3uxnyxWnSqnxnSidfGg9/Aej3Yer
     "], "CountMatrix" -> {{80, 2, 1, 0}, {0, 32, 1, 0}, {0, 1, 54, 0}}, 
    "IndicesMatrix" -> {{{35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
       48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
        66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 
       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 
       101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 
       116}, {34, 113}, {98}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
       12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30,
        31, 32, 33}, {22}, {}}, {{}, {138}, {117, 118, 119, 120, 121, 122, 
       123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
       137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 
       152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 
       166, 167, 168, 169, 170, 171}, {}}}, 
    "ExtendedClasses" -> {"Adelie", "Chinstrap", "Gentoo"}, "Weights" -> 
    SparseArray[Automatic, {171}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00011366725146198828`, "SingleEvaluationTime" -> 
    0.0057317375, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{3.8600723216597996`*^9, 3.8601536939574614`*^9, 
  3.860153806221552*^9, 3.860218729154847*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"1cd034c3-5d90-48fc-b188-2dc42a1cc96d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"measurerf", "/@", 
   RowBox[{"{", "\"\<FScore\>\"", "}"}]}], " ", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.8600724570085745`*^9, 3.8600724582592144`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"4bb0d6c7-1e26-40fd-bd71-cee1667baedb"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Adelie\"\>", "\[Rule]", "0.9815950920245399`"}], ",", 
        RowBox[{"\<\"Chinstrap\"\>", "\[Rule]", "0.9411764705882353`"}], ",", 
        RowBox[{"\<\"Gentoo\"\>", "\[Rule]", "0.972972972972973`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.860072459443366*^9, 3.8601538178029575`*^9, 
  3.8602189217312374`*^9},
 CellLabel->
  "Out[68]//TableForm=",ExpressionUUID->"d3e0363a-a806-41fc-8e1d-\
f33931b689d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"measurerf", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"{", 
     RowBox[{"377", ",", "269"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8600724896787963`*^9, 3.8600725038587484`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"a248ebcf-ffe6-47d8-981e-a760c9868c61"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9578385689914046}, {0., 0.9707602339181286}}], 
          LineBox[{{0., 0.9707602339181286}, {0., 0.9836818988448526}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.0209754444466694, 0.9878787878787879}, {
           0.03508771929824561, 0.9878787878787879}}], 
          LineBox[{{0.03508771929824561, 0.9878787878787879}, {
           0.049199994149821825`, 0.9878787878787879}}]}, {
          LineBox[{{0.03508771929824561, 0.9793339676185348}, {
           0.03508771929824561, 0.9878787878787879}}], 
          LineBox[{{0.03508771929824561, 0.9878787878787879}, {
           0.03508771929824561, 0.9964236081390411}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07123125823082498, 0.9935483870967742}, {
           0.0935672514619883, 0.9935483870967742}}], 
          LineBox[{{0.0935672514619883, 0.9935483870967742}, {
           0.11590324469315162`, 0.9935483870967742}}]}, {
          LineBox[{{0.0935672514619883, 0.9870967741935481}, {
           0.0935672514619883, 0.9935483870967742}}], 
          LineBox[{{0.0935672514619883, 0.9935483870967742}, {
           0.0935672514619883, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.11910154029128585`, 0.9931506849315068}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.17329612052742757`, 0.9931506849315068}}]}, {
          LineBox[{{0.14619883040935672`, 0.9863013698630134}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.14619883040935672`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.16821929279929257`, 1.}, {0.19883040935672514`, 1.}}], 
          LineBox[{{0.19883040935672514`, 1.}, {0.2294415259141577, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 1.}, {0.25146198830409355`, 1.}}], 
          LineBox[{{0.25146198830409355`, 1.}, {0.28473703254256205`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26881145466900963`, 1.}, {0.30409356725146197`, 1.}}], 
          LineBox[{{0.30409356725146197`, 1.}, {0.3393756798339143, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.31998501617022074`, 1.}, {0.3567251461988304, 1.}}], 
          LineBox[{{0.3567251461988304, 1.}, {0.39346527622744004`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3658813849306539, 1.}, {0.40350877192982454`, 1.}}], 
          LineBox[{{0.40350877192982454`, 1.}, {0.44113615892899516`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.40633364774610903`, 1.}, {0.4444444444444444, 1.}}], 
          LineBox[{{0.4444444444444444, 1.}, {0.4825552411427798, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4587284296824443, 1.}, {0.49707602339181284`, 1.}}], 
          LineBox[{{0.49707602339181284`, 1.}, {0.5354236171011814, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9836818988448526}, 
             Offset[{3, 0}, {0., 0.9836818988448526}]}, {{0., 
             0.9836818988448526}, 
             Offset[{-3, 0}, {0., 0.9836818988448526}]}, {{0., 
             0.9578385689914046}, 
             Offset[{3, 0}, {0., 0.9578385689914046}]}, {{0., 
             0.9578385689914046}, 
             Offset[{-3, 0}, {0., 0.9578385689914046}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.049199994149821825`, 0.9878787878787879}, 
             Offset[{0, 3}, {0.049199994149821825`, 0.9878787878787879}]}, {{
             0.049199994149821825`, 0.9878787878787879}, 
             Offset[{0, -3}, {0.049199994149821825`, 0.9878787878787879}]}, {{
             0.0209754444466694, 0.9878787878787879}, 
             Offset[{0, 3}, {0.0209754444466694, 0.9878787878787879}]}, {{
             0.0209754444466694, 0.9878787878787879}, 
             Offset[{0, -3}, {0.0209754444466694, 0.9878787878787879}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.03508771929824561, 0.9964236081390411}, 
             Offset[{3, 0}, {0.03508771929824561, 0.9964236081390411}]}, {{
             0.03508771929824561, 0.9964236081390411}, 
             Offset[{-3, 0}, {0.03508771929824561, 0.9964236081390411}]}, {{
             0.03508771929824561, 0.9793339676185348}, 
             Offset[{3, 0}, {0.03508771929824561, 0.9793339676185348}]}, {{
             0.03508771929824561, 0.9793339676185348}, 
             Offset[{-3, 0}, {0.03508771929824561, 
              0.9793339676185348}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.11590324469315162`, 0.9935483870967742}, 
             Offset[{0, 3}, {0.11590324469315162`, 0.9935483870967742}]}, {{
             0.11590324469315162`, 0.9935483870967742}, 
             Offset[{0, -3}, {0.11590324469315162`, 0.9935483870967742}]}, {{
             0.07123125823082498, 0.9935483870967742}, 
             Offset[{0, 3}, {0.07123125823082498, 0.9935483870967742}]}, {{
             0.07123125823082498, 0.9935483870967742}, 
             Offset[{0, -3}, {0.07123125823082498, 
              0.9935483870967742}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.0935672514619883, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.0935672514619883, 1.0000000000000002`}]}, {{
             0.0935672514619883, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.0935672514619883, 1.0000000000000002`}]}, {{
             0.0935672514619883, 0.9870967741935481}, 
             Offset[{3, 0}, {0.0935672514619883, 0.9870967741935481}]}, {{
             0.0935672514619883, 0.9870967741935481}, 
             Offset[{-3, 0}, {0.0935672514619883, 0.9870967741935481}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.11910154029128585`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.11910154029128585`, 
              0.9931506849315068}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{3, 0}, {0.14619883040935672`, 0.9863013698630134}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{-3, 0}, {0.14619883040935672`, 
              0.9863013698630134}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2294415259141577, 1.}, 
             Offset[{0, 3}, {0.2294415259141577, 1.}]}, {{0.2294415259141577, 
             1.}, Offset[{0, -3}, {0.2294415259141577, 1.}]}, {{
             0.16821929279929257`, 1.}, 
             Offset[{0, 3}, {0.16821929279929257`, 1.}]}, {{
             0.16821929279929257`, 1.}, 
             Offset[{0, -3}, {0.16821929279929257`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 1.}, 
             Offset[{0, 3}, {0.28473703254256205`, 1.}]}, {{
             0.28473703254256205`, 1.}, 
             Offset[{0, -3}, {0.28473703254256205`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, 3}, {0.21818694406562505`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, -3}, {0.21818694406562505`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.3393756798339143, 1.}, 
             Offset[{0, 3}, {0.3393756798339143, 1.}]}, {{0.3393756798339143, 
             1.}, Offset[{0, -3}, {0.3393756798339143, 1.}]}, {{
             0.26881145466900963`, 1.}, 
             Offset[{0, 3}, {0.26881145466900963`, 1.}]}, {{
             0.26881145466900963`, 1.}, 
             Offset[{0, -3}, {0.26881145466900963`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.39346527622744004`, 1.}, 
             Offset[{0, 3}, {0.39346527622744004`, 1.}]}, {{
             0.39346527622744004`, 1.}, 
             Offset[{0, -3}, {0.39346527622744004`, 1.}]}, {{
             0.31998501617022074`, 1.}, 
             Offset[{0, 3}, {0.31998501617022074`, 1.}]}, {{
             0.31998501617022074`, 1.}, 
             Offset[{0, -3}, {0.31998501617022074`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.44113615892899516`, 1.}, 
             Offset[{0, 3}, {0.44113615892899516`, 1.}]}, {{
             0.44113615892899516`, 1.}, 
             Offset[{0, -3}, {0.44113615892899516`, 1.}]}, {{
             0.3658813849306539, 1.}, 
             Offset[{0, 3}, {0.3658813849306539, 1.}]}, {{0.3658813849306539, 
             1.}, Offset[{0, -3}, {0.3658813849306539, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4825552411427798, 1.}, 
             Offset[{0, 3}, {0.4825552411427798, 1.}]}, {{0.4825552411427798, 
             1.}, Offset[{0, -3}, {0.4825552411427798, 1.}]}, {{
             0.40633364774610903`, 1.}, 
             Offset[{0, 3}, {0.40633364774610903`, 1.}]}, {{
             0.40633364774610903`, 1.}, 
             Offset[{0, -3}, {0.40633364774610903`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5354236171011814, 1.}, 
             Offset[{0, 3}, {0.5354236171011814, 1.}]}, {{0.5354236171011814, 
             1.}, Offset[{0, -3}, {0.5354236171011814, 1.}]}, {{
             0.4587284296824443, 1.}, 
             Offset[{0, 3}, {0.4587284296824443, 1.}]}, {{0.4587284296824443, 
             1.}, Offset[{0, -3}, {0.4587284296824443, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQBmIQDQMmnf+2rN/03l5169QrYUGv7WF8h3rGv6xfttuf
jt/0R/X0e/ss7ZVrl2w7ZF/358fHx8ff25tMvxjjVnzSHmLKB3uwcvELcH6K
+cS7LmWX4XzPXJAN1+B8w7lHS8Qu34TzZY4XAtEdOB9i3H04Px2s4THRfJh/
6MVv/v1rU73gBnj4wcKX/aPskXKB9/YF8gdrWb4vtJ9rf/rn5jmj4UsqHwCa
MPlw
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{22, 2, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 
          9, 8, 7, 6, 5, 4, 3}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{22, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
         19, 20, 21}]}}}], {{}, {}}}, {{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9578385689914046}, {0., 0.9707602339181286}}], 
          LineBox[{{0., 0.9707602339181286}, {0., 0.9836818988448526}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.0209754444466694, 0.9878787878787879}, {
           0.03508771929824561, 0.9878787878787879}}], 
          LineBox[{{0.03508771929824561, 0.9878787878787879}, {
           0.049199994149821825`, 0.9878787878787879}}]}, {
          LineBox[{{0.03508771929824561, 0.9793339676185348}, {
           0.03508771929824561, 0.9878787878787879}}], 
          LineBox[{{0.03508771929824561, 0.9878787878787879}, {
           0.03508771929824561, 0.9964236081390411}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07123125823082498, 0.9935483870967742}, {
           0.0935672514619883, 0.9935483870967742}}], 
          LineBox[{{0.0935672514619883, 0.9935483870967742}, {
           0.11590324469315162`, 0.9935483870967742}}]}, {
          LineBox[{{0.0935672514619883, 0.9870967741935481}, {
           0.0935672514619883, 0.9935483870967742}}], 
          LineBox[{{0.0935672514619883, 0.9935483870967742}, {
           0.0935672514619883, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.11910154029128585`, 0.9931506849315068}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.17329612052742757`, 0.9931506849315068}}]}, {
          LineBox[{{0.14619883040935672`, 0.9863013698630134}, {
           0.14619883040935672`, 0.9931506849315068}}], 
          LineBox[{{0.14619883040935672`, 0.9931506849315068}, {
           0.14619883040935672`, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.16821929279929257`, 1.}, {0.19883040935672514`, 1.}}], 
          LineBox[{{0.19883040935672514`, 1.}, {0.2294415259141577, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 1.}, {0.25146198830409355`, 1.}}], 
          LineBox[{{0.25146198830409355`, 1.}, {0.28473703254256205`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26881145466900963`, 1.}, {0.30409356725146197`, 1.}}], 
          LineBox[{{0.30409356725146197`, 1.}, {0.3393756798339143, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.31998501617022074`, 1.}, {0.3567251461988304, 1.}}], 
          LineBox[{{0.3567251461988304, 1.}, {0.39346527622744004`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3658813849306539, 1.}, {0.40350877192982454`, 1.}}], 
          LineBox[{{0.40350877192982454`, 1.}, {0.44113615892899516`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.40633364774610903`, 1.}, {0.4444444444444444, 1.}}], 
          LineBox[{{0.4444444444444444, 1.}, {0.4825552411427798, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4587284296824443, 1.}, {0.49707602339181284`, 1.}}], 
          LineBox[{{0.49707602339181284`, 1.}, {0.5354236171011814, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9836818988448526}, 
             Offset[{3, 0}, {0., 0.9836818988448526}]}, {{0., 
             0.9836818988448526}, 
             Offset[{-3, 0}, {0., 0.9836818988448526}]}, {{0., 
             0.9578385689914046}, 
             Offset[{3, 0}, {0., 0.9578385689914046}]}, {{0., 
             0.9578385689914046}, 
             Offset[{-3, 0}, {0., 0.9578385689914046}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.049199994149821825`, 0.9878787878787879}, 
             Offset[{0, 3}, {0.049199994149821825`, 0.9878787878787879}]}, {{
             0.049199994149821825`, 0.9878787878787879}, 
             Offset[{0, -3}, {0.049199994149821825`, 0.9878787878787879}]}, {{
             0.0209754444466694, 0.9878787878787879}, 
             Offset[{0, 3}, {0.0209754444466694, 0.9878787878787879}]}, {{
             0.0209754444466694, 0.9878787878787879}, 
             Offset[{0, -3}, {0.0209754444466694, 0.9878787878787879}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.03508771929824561, 0.9964236081390411}, 
             Offset[{3, 0}, {0.03508771929824561, 0.9964236081390411}]}, {{
             0.03508771929824561, 0.9964236081390411}, 
             Offset[{-3, 0}, {0.03508771929824561, 0.9964236081390411}]}, {{
             0.03508771929824561, 0.9793339676185348}, 
             Offset[{3, 0}, {0.03508771929824561, 0.9793339676185348}]}, {{
             0.03508771929824561, 0.9793339676185348}, 
             Offset[{-3, 0}, {0.03508771929824561, 
              0.9793339676185348}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.11590324469315162`, 0.9935483870967742}, 
             Offset[{0, 3}, {0.11590324469315162`, 0.9935483870967742}]}, {{
             0.11590324469315162`, 0.9935483870967742}, 
             Offset[{0, -3}, {0.11590324469315162`, 0.9935483870967742}]}, {{
             0.07123125823082498, 0.9935483870967742}, 
             Offset[{0, 3}, {0.07123125823082498, 0.9935483870967742}]}, {{
             0.07123125823082498, 0.9935483870967742}, 
             Offset[{0, -3}, {0.07123125823082498, 
              0.9935483870967742}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.0935672514619883, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.0935672514619883, 1.0000000000000002`}]}, {{
             0.0935672514619883, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.0935672514619883, 1.0000000000000002`}]}, {{
             0.0935672514619883, 0.9870967741935481}, 
             Offset[{3, 0}, {0.0935672514619883, 0.9870967741935481}]}, {{
             0.0935672514619883, 0.9870967741935481}, 
             Offset[{-3, 0}, {0.0935672514619883, 0.9870967741935481}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.17329612052742757`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.17329612052742757`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, 3}, {0.11910154029128585`, 0.9931506849315068}]}, {{
             0.11910154029128585`, 0.9931506849315068}, 
             Offset[{0, -3}, {0.11910154029128585`, 
              0.9931506849315068}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.14619883040935672`, 1.0000000000000002`}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{3, 0}, {0.14619883040935672`, 0.9863013698630134}]}, {{
             0.14619883040935672`, 0.9863013698630134}, 
             Offset[{-3, 0}, {0.14619883040935672`, 
              0.9863013698630134}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2294415259141577, 1.}, 
             Offset[{0, 3}, {0.2294415259141577, 1.}]}, {{0.2294415259141577, 
             1.}, Offset[{0, -3}, {0.2294415259141577, 1.}]}, {{
             0.16821929279929257`, 1.}, 
             Offset[{0, 3}, {0.16821929279929257`, 1.}]}, {{
             0.16821929279929257`, 1.}, 
             Offset[{0, -3}, {0.16821929279929257`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 1.}, 
             Offset[{0, 3}, {0.28473703254256205`, 1.}]}, {{
             0.28473703254256205`, 1.}, 
             Offset[{0, -3}, {0.28473703254256205`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, 3}, {0.21818694406562505`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, -3}, {0.21818694406562505`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.3393756798339143, 1.}, 
             Offset[{0, 3}, {0.3393756798339143, 1.}]}, {{0.3393756798339143, 
             1.}, Offset[{0, -3}, {0.3393756798339143, 1.}]}, {{
             0.26881145466900963`, 1.}, 
             Offset[{0, 3}, {0.26881145466900963`, 1.}]}, {{
             0.26881145466900963`, 1.}, 
             Offset[{0, -3}, {0.26881145466900963`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.39346527622744004`, 1.}, 
             Offset[{0, 3}, {0.39346527622744004`, 1.}]}, {{
             0.39346527622744004`, 1.}, 
             Offset[{0, -3}, {0.39346527622744004`, 1.}]}, {{
             0.31998501617022074`, 1.}, 
             Offset[{0, 3}, {0.31998501617022074`, 1.}]}, {{
             0.31998501617022074`, 1.}, 
             Offset[{0, -3}, {0.31998501617022074`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.44113615892899516`, 1.}, 
             Offset[{0, 3}, {0.44113615892899516`, 1.}]}, {{
             0.44113615892899516`, 1.}, 
             Offset[{0, -3}, {0.44113615892899516`, 1.}]}, {{
             0.3658813849306539, 1.}, 
             Offset[{0, 3}, {0.3658813849306539, 1.}]}, {{0.3658813849306539, 
             1.}, Offset[{0, -3}, {0.3658813849306539, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4825552411427798, 1.}, 
             Offset[{0, 3}, {0.4825552411427798, 1.}]}, {{0.4825552411427798, 
             1.}, Offset[{0, -3}, {0.4825552411427798, 1.}]}, {{
             0.40633364774610903`, 1.}, 
             Offset[{0, 3}, {0.40633364774610903`, 1.}]}, {{
             0.40633364774610903`, 1.}, 
             Offset[{0, -3}, {0.40633364774610903`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5354236171011814, 1.}, 
             Offset[{0, 3}, {0.5354236171011814, 1.}]}, {{0.5354236171011814, 
             1.}, Offset[{0, -3}, {0.5354236171011814, 1.}]}, {{
             0.4587284296824443, 1.}, 
             Offset[{0, 3}, {0.4587284296824443, 1.}]}, {{0.4587284296824443, 
             1.}, Offset[{0, -3}, {0.4587284296824443, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[
           {GrayLevel[1], EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], 
            AbsoluteThickness[1.]}], 
            DiskBox[{0, 0}, Offset[{2., 2.}, {0., 0.}]]}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBWJGIGZiQAD2j7JHygXe2xfIH6xl+b7Qfq796Z+b57y3
d6hn/Mv6Zbv96fhNf1RPv7fP0l65dsm2Q/Z1f358fHz8vb3J9IsxbsUn7SGm
fLAHKxe/AOenmE+861J2Gc73zFXdOvXKNTjfcO7RErHLN+F8meOFQHQHzocY
dx/OTwdreEw0H2RbWNBruvEBNXt33g==
       "]]}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9707602339181286}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.971", "0.013"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9707602339181286, 0.012921664926723949`]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.026715744010441224`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9707602339181286, 0.012921664926723949`]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.026715744010441224`}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.03508771929824561, 0.9878787878787879}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.988", "0.009"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9878787878787879, 0.008544820260253131]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.035", "0.014"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.03508771929824561, 0.014112274851576213`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7471841014463291`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9878787878787879, 0.008544820260253131]}], 
          Row[{"RejectionRate = ", 
            Around[0.03508771929824561, 0.014112274851576213`]}], 
          Row[{IndeterminateThreshold, " = ", 0.7471841014463291}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.0935672514619883, 0.9935483870967742}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9935483870967742, 0.006451612903226028]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.094", "0.022"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.0935672514619883, 0.02233599323116332]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8967352113275274`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9935483870967742, 0.006451612903226028]}], 
          Row[{"RejectionRate = ", 
            Around[0.0935672514619883, 0.02233599323116332]}], 
          Row[{IndeterminateThreshold, " = ", 0.8967352113275274}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.14619883040935672`, 0.9931506849315068}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.993", "0.007"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9931506849315068, 0.0068493150684933715`]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.146", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.14619883040935672`, 0.027097290118070865`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9268031903426581`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9931506849315068, 0.0068493150684933715`]}], 
          Row[{"RejectionRate = ", 
            Around[0.14619883040935672`, 0.027097290118070865`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9268031903426581}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.19883040935672514`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.199", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.19883040935672514`, 0.03061111655743256]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9415435740392957`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.19883040935672514`, 0.03061111655743256]}], 
          Row[{IndeterminateThreshold, " = ", 0.9415435740392957}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.25146198830409355`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.251", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.25146198830409355`, 0.0332750442384685]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9668745407246443`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.25146198830409355`, 0.0332750442384685]}], 
          Row[{IndeterminateThreshold, " = ", 0.9668745407246443}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.30409356725146197`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.304", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.30409356725146197`, 0.03528211258245236]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9775334230287963`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.30409356725146197`, 0.03528211258245236]}], 
          Row[{IndeterminateThreshold, " = ", 0.9775334230287963}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.3567251461988304, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.36", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.3567251461988304, 0.03674013002860964]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9833857033254262`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.3567251461988304, 0.03674013002860964]}], 
          Row[{IndeterminateThreshold, " = ", 0.9833857033254262}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.40350877192982454`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.40", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.40350877192982454`, 0.03762738699917065]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9880883168017675`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.40350877192982454`, 0.03762738699917065]}], 
          Row[{IndeterminateThreshold, " = ", 0.9880883168017675}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.4444444444444444, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.44", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.4444444444444444, 0.0381107966983354]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9894849315579756`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.4444444444444444, 0.0381107966983354]}], 
          Row[{IndeterminateThreshold, " = ", 0.9894849315579756}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.49707602339181284`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.50", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.49707602339181284`, 0.03834759370936854]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9917569130453344`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.49707602339181284`, 0.03834759370936854]}], 
          Row[{IndeterminateThreshold, " = ", 0.9917569130453344}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5964912280701754, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5964912280701754, 0.03762738699917069]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9945028153580663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5964912280701754, 0.03762738699917069]}], 
          Row[{IndeterminateThreshold, " = ", 0.9945028153580663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5964912280701754, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5964912280701754, 0.03762738699917069]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9945028153580663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5964912280701754, 0.03762738699917069]}], 
          Row[{IndeterminateThreshold, " = ", 0.9945028153580663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5964912280701754, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5964912280701754, 0.03762738699917069]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9945028153580663`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5964912280701754, 0.03762738699917069]}], 
          Row[{IndeterminateThreshold, " = ", 0.9945028153580663}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234412`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234412}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234412`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234412}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234412`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234412}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234412`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234412}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234415`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234415}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234415`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234415}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9964330466234415`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9964330466234415}]}], 
        "Tooltip"]& ]}}, {{}, {}}}},
  AspectRatio->Full,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9905622992558052},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->{377, 269},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.8808984597087143}, {0.9905622992558052, 
    1.0000000000000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.86007250549536*^9, 3.8602189236890526`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"23b906d5-6915-4634-a22f-85a3ef0adec3"]
}, Open  ]],

Cell["\<\
As far as accuracy of predicting is considered Random Forest performs better \
than the Naive Bayes classifier.\
\>", "Text",
 CellChangeTimes->{{3.860153837975584*^9, 3.860153857412221*^9}, {
  3.860218927959143*^9, 
  3.8602189568512173`*^9}},ExpressionUUID->"075689ff-6000-44b7-a358-\
99438ba1514c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nearest Neighbours :", "Subsection",
 CellChangeTimes->{{3.8601531201317887`*^9, 
  3.860153128217102*^9}},ExpressionUUID->"4febb5bb-9106-40f6-a57f-\
c4b387c63d03"],

Cell["\<\
It is commonly called the k nearest neighbours where the class of an \
observation is predicted based on the majority of the class the neighbouring \
observations belong to.\
\>", "Text",
 CellChangeTimes->{{3.860153938109186*^9, 
  3.860154042661955*^9}},ExpressionUUID->"f9c00a8e-3e99-4755-962e-\
c32398c8b655"],

Cell[TextData[StyleBox["Train the model :",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.8601539051984158`*^9, 
  3.8601539129668226`*^9}},ExpressionUUID->"96c45a1f-476a-47af-9c59-\
7e5067a1a75d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nn", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.860071248784397*^9, 3.86007126127034*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"521609e6-265d-4000-b3b5-1534d31b750a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["171", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 171, "ClassNumber" -> 3, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 4|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 171, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.004085090746150243, -0.3612744103301966, 
                   0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                   0.984330125195285}, {
                   0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                   0.01600787497426431, 
                   0.001811504406973886, -0.00020032542764021215`}}, 
                  "Precisions" -> {1.4588368163658181`*^-6, 
                   0.0215411092967585, 0.05960642825620558, 
                   0.4279510542010826}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                   "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   2758349319774705302|>], "InputDimension" -> 0, 
                "OutputDimension" -> 4, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0438207, "MaxTrainingMemory" -> 207056, 
                  "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 29, 12, 2, 47.0074327`9.424741393909908}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                   "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                   0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[16.53064340630656, 0.593442758765043], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 31956639518117771|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {44.13157894736843, 16.94970760233918, 
              202.20467836257308`, 4241.666666666666}, 
             "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
              14.416088368344866`, 827.828308046025}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             3699363863601728199, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {3}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`, 
        "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
OYs/HY+QVupGBmUa/g/Ln5kp
            "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 10, 
      "ClassPriors" -> {0.39655172413793105`, 0.20689655172413793`, 
       0.39655172413793105`}, "TrainingOutput" -> 
      RawArray["UnsignedInteger8",{1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 
        2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 
        3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 
        1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 
        3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 
        1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 
        2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 
        3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 3, 2, 1, 3, 2}], 
      "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
         "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "NearestNeighbors", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NeighborsNumber" -> <|"Value" -> 10, "Options" -> <||>|>, 
        "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
        "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[119377], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.1031513`6.465019699186322, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.19496134189107273`, 0.029602800305757387`], "Accuracy" -> 
         Around[0.9470460191305939, 0.018487116640127928`], "EvaluationTime" -> 
         0.0000166491849721686, "TestSize" -> 170, "ModelMemory" -> 11152., 
         "ModelUtility" -> 0.9118819473732435, "TrainingSize" -> 137, 
         "TrainingTime" -> 0.006093289926713728, "TrainingMemory" -> 508428., 
         "ExperimentCount" -> 5, "MeanCrossEntropyHistory" -> {
           Around[0.18578896770757336`, 0.06099668086380742], 
           Around[0.15845212380153903`, 0.05092988443420965], 
           Around[0.22635843581477527`, 0.06723606312924389], 
           Around[0.1881756066584715, 0.0606324524404695], 
           Around[0.2160315754730043, 0.06754433657824738]}, 
         "AccuracyHistory" -> {
           Around[0.9527603048448796, 0.03614055183286866], 
           Around[0.981331733416308, 0.023057346572829186`], 
           Around[0.9241888762734511, 0.04509166216648561], 
           Around[0.9527603048448795, 0.036140551832868635`], 
           Around[0.9241888762734511, 0.04509166216648561]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 171|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Vector[TypeSystem`AnyType, 5], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NearestNeighbors", 
           "Options" -> <|
            "NeighborsNumber" -> <|"Value" -> Automatic|>, 
             "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
             "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4811740245103867, 0.07305492290839209], "Accuracy" -> 
              Around[0.7375398831019185, 0.04859946995048178], 
              "EvaluationTime" -> 0.000012596648138149985`, "TestSize" -> 163,
               "ModelMemory" -> 6544, "ModelUtility" -> 0.008457287426147042, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.012589254117941668`, 
              "TrainingMemory" -> 67368, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4811740245103867, 0.0516576313875845]}, 
              "AccuracyHistory" -> {
                Around[0.7375398831019185, 0.03436501476405751]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2268961261945967, 0.04129054700196725], "Accuracy" -> 
              Around[0.9561008966025774, 0.024318277657719663`], 
              "EvaluationTime" -> 0.000011567073365107752`, "TestSize" -> 141,
               "ModelMemory" -> 7248, "ModelUtility" -> 0.7543579693066674, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.005011872336272719, 
              "TrainingMemory" -> 78984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2268961261945967, 0.029196825783992908`]}, 
              "AccuracyHistory" -> {
                Around[0.9561008966025774, 0.017195619038550884`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.19496134189107273`, 0.029602800305757387`], "Accuracy" -> 
              Around[0.9470460191305939, 0.018487116640127928`], 
              "EvaluationTime" -> 0.0000166491849721686, "TestSize" -> 170, 
              "ModelMemory" -> 11152., "ModelUtility" -> 0.9118819473732435, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.006093289926713728, 
              "TrainingMemory" -> 508428., "ExperimentCount" -> 5, 
              "MeanCrossEntropyHistory" -> {
                Around[0.18578896770757336`, 0.06099668086380742], 
                Around[0.15845212380153903`, 0.05092988443420965], 
                Around[0.22635843581477527`, 0.06723606312924389], 
                Around[0.1881756066584715, 0.0606324524404695], 
                Around[0.2160315754730043, 0.06754433657824738]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448796, 0.03614055183286866], 
                Around[0.981331733416308, 0.023057346572829186`], 
                Around[0.9241888762734511, 0.04509166216648561], 
                Around[0.9527603048448795, 0.036140551832868635`], 
                Around[0.9241888762734511, 0.04509166216648561]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0000166491849721686, "MeanCrossEntropy" -> 
             Around[0.19496134189107273`, 0.029602800305757387`], 
             "ModelMemory" -> 11152., "TrainingMemory" -> 508428., 
             "TrainingTime" -> 0.020194747384131795`|>, "Index" -> 1|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            3], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
      "PreprocessorEvaluationTime" -> 3.346484375*^-6, "PreprocessorMemory" -> 
      65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8602225670788882`17.339187334470992*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.0019047263185896762`, 
          "ElapsedTimes" -> 0.0212257, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 0.009523631592948383, 
          "ElapsedTimes" -> 0.0105076, "ExperimentCounts" -> 1|>, <|
         "TrainingSizes" -> 137, "TimeBudgets" -> 0.047618157964741885`, 
          "ElapsedTimes" -> 0.0454057, "ExperimentCounts" -> 5|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
           803269050161587613|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
           3873503148790622222|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
           699058557945447889|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
           4483023431942159786|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 0.4168606, 
      "MaxTrainingMemory" -> 863424, "DataMemory" -> 26048, "FunctionMemory" -> 
      144512, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 29, 12, 2, 47.3668717`9.428049564075051}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8600712658977394`*^9, 3.860153926776081*^9, 
  3.860218967400484*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"74b8e0f9-16c6-465a-bbb1-b1fd7a37e757"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"nn", ",", "\"\<MethodDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8600712852664995`*^9, 3.8600712854554977`*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"fe8303b4-1815-40b0-b346-618b8951d4f2"],

Cell[BoxData[
 TagBox[
  PanelBox["\<\"The nearest neighbors predictor predicts the value of a new \
example by analyzing its nearest neighbors in the feature space. In its \
simplest form, it averages the values of the \\\"k\\\"-nearest neighbors.\"\>",
   BaseStyle->{LineIndent -> 0}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.860071286009328*^9, 3.8602189689714756`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"dd207130-6e9c-4438-8c68-635f22ad8592"]
}, Open  ]],

Cell["The training accuracy is around 94 % approximately .", "Text",
 CellChangeTimes->{{3.860154056010131*^9, 
  3.8601540903180532`*^9}},ExpressionUUID->"210e0305-7156-4ff0-b900-\
dca4aa0827f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "nn", "]"}]], "Input",
 CellChangeTimes->{{3.860073024638214*^9, 3.8600730250669975`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"ca17617f-de5c-4cc2-a75a-56d267988e94"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical"}, 
                  10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["Adelie"], 
                  TextCell["Adelie"]], 
                 InterpretationBox[
                  Cell["Chinstrap"], 
                  TextCell["Chinstrap"]], 
                 InterpretationBox[
                  Cell["Gentoo"], 
                  TextCell["Gentoo"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"94.7", "1.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    94.7046019130593919044`3., 1.8487116640127927436`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "NearestNeighbors",ExpressionUUID->
                   "5ce48e3e-1999-49da-8b7d-c242db998246"],
                  TextCell["NearestNeighbors"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"NeighborsNumber\"", "10"}, {
                    "\"DistributionSmoothing\"", "0.5`"}, {
                    "\"NearestMethod\"", "\"KDtree\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"NeighborsNumber", 10}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", "KDtree"}}, Alignment -> Left, Frame -> 
                   All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                   Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.22`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"68.4`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.1949613418910727258`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0296028003057573867`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.1357557412795579455`3.", "\", \"", 
                   "0.2541669425025874784`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.1357557412795579455`3., 
                   ", ", 0.2541669425025874784`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"148.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"171", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               TemplateBox[{
                "416.`", "\"ms\"", "milliseconds", "\"Milliseconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.0794415416798357`, -0.7315262769903528}, {
                    3.4011973816621555`, -1.483262960085155}, {
                    4.919980925828125, -1.6349539867843148`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.7315262769903528}}, {{
                    3.4011973816621555`, -1.483262960085155}}, {{
                    4.919980925828125, -1.6349539867843148`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.8961962314859074}, {
                    2.0794415416798357`, -0.5901774151155059}, {
                    2.0794415416798357`, -0.5901774151155059}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -1.6841313987767232`}, {
                    3.4011973816621555`, -1.3160719991656926`}, {
                    3.4011973816621555`, -1.3160719991656926`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.7996391832815561`}, {
                    4.919980925828125, -1.4935939012630868`}, {
                    4.919980925828125, -1.4935939012630868`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.6851444151062018`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.6851444151062018`, \
-0.7315262769903528}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7375398831019185}, {
                    3.4011973816621555`, 0.9561008966025774}, {
                    4.919980925828125, 0.9470460191305939}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7375398831019185}}, {{3.4011973816621555`, 
                    0.9561008966025774}}, {{4.919980925828125, 
                    0.9470460191305939}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7237261927388632}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7237261927388632, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7315262769903528}, {
                    3.4011973816621555`, -1.483262960085155}, {
                    4.919980925828125, -1.6349539867843148`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.7315262769903528}}, {{
                    3.4011973816621555`, -1.483262960085155}}, {{
                    4.919980925828125, -1.6349539867843148`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.6851444151062018`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.6851444151062018`, \
-0.7315262769903528}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7315262769903528}, {
                    3.4011973816621555`, -1.483262960085155}, {
                    4.919980925828125, -1.6349539867843148`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.7315262769903528}}, {{
                    3.4011973816621555`, -1.483262960085155}}, {{
                    4.919980925828125, -1.6349539867843148`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.8961962314859074}, {
                    2.0794415416798357`, -0.5901774151155059}, {
                    2.0794415416798357`, -0.5901774151155059}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -1.6841313987767232`}, {
                    3.4011973816621555`, -1.3160719991656926`}, {
                    3.4011973816621555`, -1.3160719991656926`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -1.7996391832815561`}, {
                    4.919980925828125, -1.4935939012630868`}, {
                    4.919980925828125, -1.4935939012630868`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.6851444151062018`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.6851444151062018`, \
-0.7315262769903528}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7375398831019185}, {
                    3.4011973816621555`, 0.9561008966025774}, {
                    4.919980925828125, 0.9470460191305939}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7375398831019185}}, {{3.4011973816621555`, 
                    0.9561008966025774}}, {{4.919980925828125, 
                    0.9470460191305939}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7237261927388632}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7237261927388632, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7315262769903528}, {
                    3.4011973816621555`, -1.483262960085155}, {
                    4.919980925828125, -1.6349539867843148`}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.7315262769903528}}, {{
                    3.4011973816621555`, -1.483262960085155}}, {{
                    4.919980925828125, -1.6349539867843148`}}}]}, 
                    Column[{
                    Style["NearestNeighbors", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NeighborsNumber", Automatic}, {
                    "DistributionSmoothing", 0.5}, {
                    "NearestMethod", Automatic}}, Alignment -> Left, Frame -> 
                    All, FrameStyle -> GrayLevel[0.84], Spacings -> {1, 1}, 
                    Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-1.6851444151062018`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-1.6851444151062018`, \
-0.7315262769903528}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{297., {111., 113.89273131957418`}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 171, "ClassNumber" -> 3, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical"|>, 
            "f2" -> <|"Type" -> "Numerical"|>, 
            "f3" -> <|"Type" -> "Numerical"|>, 
            "f4" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 4|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                 Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                 Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                 False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
          "Perfect", "StructurePreserving" -> False, "Missing" -> 
          "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 171, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                   "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 4, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.0438207, "MaxTrainingMemory" -> 207056,
                    "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                   "LanguageVersion" -> {13., 0}, "Date" -> 
                   DateObject[{
                    2022, 4, 29, 12, 2, 47.0074327`9.424741393909908}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                   "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                   "Windows", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                  "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[16.53064340630656, 0.593442758765043], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
              "ID" -> 31956639518117771|>], 
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {44.13157894736843, 16.94970760233918, 
               202.20467836257308`, 4241.666666666666}, 
              "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
               14.416088368344866`, 827.828308046025}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>},
               "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
              3699363863601728199, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {3}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`,
          "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {3, 4}, 0., {
       1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
     "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
     "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "NeighborsFunction" -> 
       MachineLearning`PackageScope`NeighborsFunction["Nearest", 
         NearestFunction[
          Hold[
           Nearest[CompressedData["
1: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
OYs/HY+QVupGBmUa/g/Ln5kp
             "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 10,
        "ClassPriors" -> {0.39655172413793105`, 0.20689655172413793`, 
        0.39655172413793105`}, "TrainingOutput" -> 
       RawArray["UnsignedInteger8",{1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 
         2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 
         3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 
         1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 
         3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 
         1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 
         2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 
         3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 3, 2, 1, 3, 2}], 
       "DistributionSmoothing" -> 0.5, "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|
         "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
          "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
          False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "NearestNeighbors", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "NeighborsNumber" -> <|"Value" -> 10, "Options" -> <||>|>, 
         "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
         "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "PanelCell" -> CellObject[119377], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       0.1031513`6.465019699186322, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.19496134189107273`, 0.029602800305757387`], "Accuracy" -> 
          Around[0.9470460191305939, 0.018487116640127928`], "EvaluationTime" -> 
          0.0000166491849721686, "TestSize" -> 170, "ModelMemory" -> 11152., 
          "ModelUtility" -> 0.9118819473732435, "TrainingSize" -> 137, 
          "TrainingTime" -> 0.006093289926713728, "TrainingMemory" -> 508428.,
           "ExperimentCount" -> 5, "MeanCrossEntropyHistory" -> {
            Around[0.18578896770757336`, 0.06099668086380742], 
            Around[0.15845212380153903`, 0.05092988443420965], 
            Around[0.22635843581477527`, 0.06723606312924389], 
            Around[0.1881756066584715, 0.0606324524404695], 
            Around[0.2160315754730043, 0.06754433657824738]}, 
          "AccuracyHistory" -> {
            Around[0.9527603048448796, 0.03614055183286866], 
            Around[0.981331733416308, 0.023057346572829186`], 
            Around[0.9241888762734511, 0.04509166216648561], 
            Around[0.9527603048448795, 0.036140551832868635`], 
            Around[0.9241888762734511, 0.04509166216648561]}, 
          "Configuration" -> {
           "NearestNeighbors", "NeighborsNumber" -> Automatic, 
            "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
          "FinalTrainingSize" -> 171|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 5], 
           TypeSystem`Vector[TypeSystem`AnyType, 5], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "NearestNeighbors", 
            "Options" -> <|
             "NeighborsNumber" -> <|"Value" -> Automatic|>, 
              "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
              "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.4811740245103867, 0.07305492290839209], "Accuracy" -> 
               Around[0.7375398831019185, 0.04859946995048178], 
               "EvaluationTime" -> 0.000012596648138149985`, "TestSize" -> 
               163, "ModelMemory" -> 6544, "ModelUtility" -> 
               0.008457287426147042, "TrainingSize" -> 8, "TrainingTime" -> 
               0.012589254117941668`, "TrainingMemory" -> 67368, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.4811740245103867, 0.0516576313875845]}, 
               "AccuracyHistory" -> {
                 Around[0.7375398831019185, 0.03436501476405751]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.2268961261945967, 0.04129054700196725], "Accuracy" -> 
               Around[0.9561008966025774, 0.024318277657719663`], 
               "EvaluationTime" -> 0.000011567073365107752`, "TestSize" -> 
               141, "ModelMemory" -> 7248, "ModelUtility" -> 
               0.7543579693066674, "TrainingSize" -> 30, "TrainingTime" -> 
               0.005011872336272719, "TrainingMemory" -> 78984, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.2268961261945967, 0.029196825783992908`]}, 
               "AccuracyHistory" -> {
                 Around[0.9561008966025774, 0.017195619038550884`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.19496134189107273`, 0.029602800305757387`], 
               "Accuracy" -> 
               Around[0.9470460191305939, 0.018487116640127928`], 
               "EvaluationTime" -> 0.0000166491849721686, "TestSize" -> 170, 
               "ModelMemory" -> 11152., "ModelUtility" -> 0.9118819473732435, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.006093289926713728, 
               "TrainingMemory" -> 508428., "ExperimentCount" -> 5, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.18578896770757336`, 0.06099668086380742], 
                 Around[0.15845212380153903`, 0.05092988443420965], 
                 Around[0.22635843581477527`, 0.06723606312924389], 
                 Around[0.1881756066584715, 0.0606324524404695], 
                 Around[0.2160315754730043, 0.06754433657824738]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448796, 0.03614055183286866], 
                 Around[0.981331733416308, 0.023057346572829186`], 
                 Around[0.9241888762734511, 0.04509166216648561], 
                 Around[0.9527603048448795, 0.036140551832868635`], 
                 Around[0.9241888762734511, 0.04509166216648561]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0000166491849721686, "MeanCrossEntropy" -> 
              Around[0.19496134189107273`, 0.029602800305757387`], 
              "ModelMemory" -> 11152., "TrainingMemory" -> 508428., 
              "TrainingTime" -> 0.020194747384131795`|>, "Index" -> 1|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Assoc[
             TypeSystem`Atom[String], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             3], 
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171, 
       "PreprocessorEvaluationTime" -> 3.346484375*^-6, "PreprocessorMemory" -> 
       65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8602225670788882`17.339187334470992*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 8, "TimeBudgets" -> 0.0019047263185896762`, 
           "ElapsedTimes" -> 0.0212257, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 30, "TimeBudgets" -> 0.009523631592948383, 
           "ElapsedTimes" -> 0.0105076, "ExperimentCounts" -> 1|>, <|
          "TrainingSizes" -> 137, "TimeBudgets" -> 0.047618157964741885`, 
           "ElapsedTimes" -> 0.0454057, "ExperimentCounts" -> 5|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
            803269050161587613|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
            3873503148790622222|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
            699058557945447889|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
            4483023431942159786|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 0.4168606, 
       "MaxTrainingMemory" -> 863424, "DataMemory" -> 26048, "FunctionMemory" -> 
       144512, "LanguageVersion" -> {13., 0}, "Date" -> 
       DateObject[{2022, 4, 29, 12, 2, 47.3668717`9.428049564075051}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{3.860071308453545*^9, 3.860073026163416*^9, 
  3.860154051287422*^9, 3.8602189714523582`*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"e5fa962d-7f52-455e-aafb-4b4f9cb257fd"]
}, Open  ]],

Cell["\<\
The test accuracy is 99.4 % approximately. However, it seems that the model \
is overfitting because the train accuracy is more than that of the test \
accuracy. From the confusion matrix, we observe that the species belonging to \
Gentoo is being predicted accurately.\
\>", "Text",
 CellChangeTimes->{{3.8601541397183356`*^9, 3.860154229262205*^9}, {
  3.8602189770488825`*^9, 
  3.8602189815942354`*^9}},ExpressionUUID->"f31af790-8554-400a-9c4e-\
63e639e49b6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurenn", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"nn", ",", "testingData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860071363968897*^9, 3.86007136730437*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"8b6f8940-557d-41f3-be4e-e643cb429862"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NearestNeighbors",ExpressionUUID->
                 "3fd40279-f9d0-4e1e-b0c4-0466db238f56"],
                TextCell["NearestNeighbors"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "171"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.4", "0.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.4152046783625706894`3., 0.5847953216374488505`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"49.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    48.5380116959064267235`3., 3.8331852752130370909`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9398421087978768851`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0071332103317088835`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", "0.925575688134459118`3.",
                    "\", \"", "0.9541085294612946521`3.", "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.925575688134459118`3., 
                   ", ", 0.9541085294612946521`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0620433871904817746`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0075897236162696669`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0468639399579424409`3.", "\", \"", 
                   "0.0772228344230211083`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0468639399579424409`3., 
                   ", ", 0.0772228344230211083`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.31`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"13.3`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.8768709616195226, 
                  0.5423132116988777, 0.006130250314800572}}, {{
                  0.9400164934467449, 0.8917821369109332, 
                  0.7259008106855077}, {0.895848479175001, 0.7145382224519019,
                   0.31316623171928526`}, {1., 1., 1.}}, {{1., 0.42, 0.}, {1.,
                   1., 1.}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["83", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" examples of \"", "\"Adelie\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9880952380952381`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9940119760479041`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{83, " examples of ", "Adelie", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9880952380952381}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9940119760479041}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.011904761904761904`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.030303030303030304`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "Chinstrap", " misclassified as ",
                     "Adelie"}], 
                    Row[{"Column fraction = ", 0.011904761904761904`}], 
                    Row[{"Row fraction = ", 0.030303030303030304`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Adelie", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["32", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" examples of \"", "\"Chinstrap\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9696969696969697`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9846153846153846`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{32, " examples of ", "Chinstrap", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9696969696969697}], 
                    Row[{"FScore = ", 0.9846153846153846}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Adelie", " misclassified as ", 
                    "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["55", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" examples of \"", "\"Gentoo\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{55, " examples of ", "Gentoo", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{83, " example", "s", " of class ", "Adelie"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9696969696969697`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{33, " example", "s", " of class ", "Chinstrap"}], 
                    Row[{"Recall = ", 0.9696969696969697}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " of class ", "Gentoo"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "84", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9880952380952381`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{84, " example", "s", " classified as ", "Adelie"}], 
                    Row[{"Precision = ", 0.9880952380952381}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "32", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{32, " example", "s", " classified as ", 
                    "Chinstrap"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " classified as ", "Gentoo"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{2.5, 
                    FormBox[
                    RotationBox["\"Adelie\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"Chinstrap\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"Gentoo\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{2.5, 
                    FormBox["83", TraditionalForm]}, {1.5, 
                    FormBox["33", TraditionalForm]}, {0.5, 
                    FormBox["55", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["84", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["32", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["55", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"Adelie\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"Chinstrap\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"Gentoo\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->196.8,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 171, "ClassNumber" -> 3, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 4|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 171, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                    "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0438207, "MaxTrainingMemory" -> 
                    207056, "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 29, 12, 2, 47.0074327`9.424741393909908}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[16.53064340630656, 0.593442758765043], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 31956639518117771|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {44.13157894736843, 16.94970760233918, 
                 202.20467836257308`, 4241.666666666666}, 
                "StandardDeviation" -> {5.642730392182068, 
                 1.9473891434192623`, 14.416088368344866`, 827.828308046025}, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                3699363863601728199, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 
           0.20689655172413793`, "Gentoo" -> 0.39655172413793105`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "NeighborsFunction" -> 
         MachineLearning`PackageScope`NeighborsFunction["Nearest", 
           NearestFunction[
            Hold[
             Nearest[CompressedData["
1:eJwNl2cgFQwUhm2SkZaS0EApo0HKOEoKfSQJUWmQFcoehYikXXx2RkRRZirV
d2Q3ZGXHNa57uVzucq9rfn68v86f8+O87/ucLZe9LJ34eHh48pclsCypDDcP
1xE6cj8txLgfJ4Hd+3G+KzpL6F29WqhJg4ZjviSvh8nN+ClQX1nImwT9p4X4
mTJ/8er+PZbFQt9RCdzVHl6cBPUmugFJqhsF4kl+U/kLsMNiPKdJfBFW8YdH
+GsiFicJSGTHsZF82Hpn4yATVHmuie4sHASDm0l/l7a1Q4dWXW7nKhqUnv1Z
syQ2gCzLHnnSuwrsPbJeYZcoDfOu3jKrXkEAosAKJ+WN43hqa2x/IoGOWRqv
zPSmWMgYYLYolE+Cvw470qWZhp6/Iyruzw2g9bxZcjtV0EBCZMlp0jsZBA5i
Xxt5EYJflsVGR/Ia+BennG5ZRYEu29sXhkImMWWnZmpU1zRoEYTM7aynIeQ6
1yIoign7qJ+2O72ehGs8TPx+6y1wTEyyUg3r8OfuQaU850H8IPM+45BHO7g2
Xju52oeNwnE/w9W3sTAqKrvI2pqC1nlGFI1XvRB6plrqbdIUCjFdVuYpMNDe
PvyigBAVHLg1x486E/HKkm2YhRcN3H9fyxqiLkLfmx3Xg6m9oG+Vmbj7Dhtj
Q4XNuE6DINshtZaUS4Z98Sanm4tIMHnJAs7WteBZd3Hr+/gTKaGaMYJxdHzR
rPokaqIGmYp3Nb67jcFBm+sBna9JWONU+krHpQ7P2B1ihpO70WfDr4gT2iwQ
fd64indvK8pJ/y75lNoM3WlFf7OABXP9c4oRyMYCEclFxzA6xOvePGMZyoJN
Wa6FEcZdqLeGFUp3n8fU51albYqDkFrWXJS2uQLHCNNNmgt0sObdLPc4iwxn
/Ct8wKYKmwKmHhfp0dAwECXSvdqxL/DBtNwwC2z1Hp6oudKJNz/JOT6NfwkH
Esy09k8N4sVbN513TM6AbU7LK/rlIhCgNa9NYA7BeeeQ7FMfeAwkacc2HjZM
hKzUjUnH6uchT+Dxk98bZsG2d1jiafQQ2swyI8wfz2JYQOt/W05R4KyX/xl+
/gHY+4ckl+rZirJ3HPwybf7DkgAXmt8fGtYVF3xzOkrH0nMq/e6b5vBoq/0u
mxW8Bt5xYgvfR1vRTeCodorcd9DI+epiuomCVMqf6+KnEFkfhqqeNcwiK5Dc
CZuZ6LMUeIkRNAqPxIp5hxuncH6lmdn1OAb8St1QJX6fDMfl/gG+z2wYDBQJ
ozxNh5HAIAly3SK8dXxGqPXggsG5U5H3pOjgeWycI/ayH2xvU266ECi4/dq+
dNkdNDTzvJzRGTWNHTs4i/xQh3WC1Z6ZqRxUPCqilMCZxdb2Gb5tjSTcKC9/
Q65lChyO6Gm89p5CCfHNJb2+ZXAgTDB3wWcUBC2sPWQOMzHb+orwaplRGBGd
VdjLXASR/Gi5BOkxsKO/sNn8lIMunFPepqVMiE0XruI7x4LgXYH6nOX7cKzT
aC3yZcDahEti5jFEpD9uWjXLImH2TEqvdvMQvrsj7xy8jQa2fTsOqGV1w/ML
E9P9FUXwXyrv/o3fPLA3pDm6NpANecT8t6GcHpTR+sZ4k1UPErYZnhse9WId
uSBUN4qB3yUIgWHSg9C1SfemUvEg/DiyMPg0pgq30CpvkFVncLXLgaeqad0Q
fufSiFdfN9wZ8GczE4dwO/NvjIphPVrK9cpotNCwtl3wlaoxCze3+fXvO8/E
zcbHSgMseyFxaveJXZvHMKQb/S+b0LGvR22HM5mAK7/3VkfM8xiQ+y/5v9Mf
QD1Kx7dOsQb4q/TNyFCtDrKu3bc0O8LCe6OryzTd2kFu18wGf/8p6D2xZ6Kv
oQ/C87QZm/Kmsb7FyPLE1gmoUHLee/MMGTzFXxPzv43D3ry28A0j0+Afoc8M
8B6BxFYnV65eIfjmPQp39OxH7T3fRCbUSWAwCOVSfQQ0NaQqKqgWg8A45dYG
XRb+yW1aybz9CzWz8p0TmAwsmsun3jalIYG6xSlauQ06q7mdl5bz99SGFaHt
KQzYeEp+Ws5jEKxM4xJmLQtA3+L8H+0MBloWPprQOUSBlbUx5UlvyNAdYOM5
doQF19Jt7DUaiVBV+CyWU9CB8UtCpyZFh5F5SbK/S52OKvf5NFIFf2M26/jG
u3ataF1RNVT4i4An5au1J34MYWqRL6f7MxlcC25Z8ZgM4HxkzOcV63twlerA
uDl1HBTf8Nob9U/he6IGs6NmHtzqn6XzH5yBB4e+LelF/cKP736U8aYvYWTd
Pw1rkyfgtz1F356HCuV57z53jNLhaZTHbxHyNBB3Z7utFXyPdQaeXgW2jTjb
kmiiLjKIS6XrvTartELR4USZhSvjqOhksqszswfTygkcXc407hZW+ql5qBzu
/j56mnqShfr61ZVjhFnsPRTrFCHAgIHmgDfmFRM4GxYv0x01CT4qIyB5mQr6
UjJ+2qfIwJW6b/j4xTTy3n1cQtEdBN6Nsi+yZnvBlc8mf3iCASberaSsfhrY
Nz9fXH1jEIIDzx+/z6zFtHWvwFJhDMeDn9wzy++ClltPZ+OtiCj+O+3kHXUW
OmY5afFKTeHr5qzHfwg0WMq+vyt12wCGuFtc3BE6iZ1tq0yKXfqgS06v9+oY
BdU1TCtUQxlQQRg/Z3WVAbbJZL5gETp8P3Lm4ipVGvK+vXH9wWkuDLkm2h+/
SYWZyOrqZo8JqJw+EeL8kQgNzy6FeLcSMNVwPrtI6zv8HBd9PPdrHtv1hB+U
3iqFcy5qZyPnGFgTl9DjfZmGOcd3KcR8peNIiZdeaSMFhB8nf4r+RMRD9S4H
fvlxUdeGL7HmMwvUTJq+cQ3bUTo8O8CnbBHIKfKT0RdnIFbBHwSde2Exui3q
xBoWOl9J5gmgk2HkHCFTb7QebHnECusd/sB5CXr0VdFSKFq6QfYRH8cvWWq7
LdLH8FlxpDkxcg4lbBI0B16SYWhYsGZ+2Q/25B6ejv/oOKRNNj1iwcGx7dIZ
LwPr0S5ho1uF7Dha8dSbXObjYI9hznMDvmZIcVPJcZiZQlqVjIpxGhN+zJ5I
f2VFhZO3bym4fX2PivdefXFS4uLcu5zKI09oEJBUFLM6ZAwebk0qVOmpQd/T
Nkb2eg3Y9WKlcASNhlv9FASpnVx8KL6lL0CBg3r5G5z07QlQGHZnnGM3jhJP
pIWXLkxirrxBsGgIFX0iSA/MLSYhVLTS1m55TlOYj/KJHcUnn386666nQS1n
34FK1RK0en1evneZC5oig6TOK85D+E8zBWv5IlzM8hwyZ8xgoLHm+Pm2boi0
3t5UrFgCOkvyMSLfhmGb19vOU+dIcPIgh/0ok4A72gM9qa/60co0U+e9bgsM
V3xqScqfA9+UdaJnd4zhr8vXLRXKeyEwhBS7SXYRjYykrut20uCniu9m0wPj
2MksXnFNZAw9tMSebqlkQ1a6PtN/XSmYS09IWQXNQ+fShjKPE2wQTFQWXBfM
gPUbqi6GbqfhbT+d/CM8HKDHxzkcMOPCPG/K6wkBNrS+WvpyiMEC5SwpA29a
M2hzeUna5zuwdrztppcdFzV/VNt4aw3iXvbW8AuyDDym7h3Yo8bBoNwbTCN5
LuasMHA3W0uDw1btn1S7aSj6VVbyXOcAfh/q93ecIUHKsT83mKokfJ/rCAUt
LCjeRlOb+UiDur8ODyxaWuGMmIjOgd1MrP5bI8h9MghlmgupRNIbzHgmr7g5
lAapzpTdoq0suPDv5xk2d7mf4vx2ycn1YObRneco8hxkJz/o9n32FxLi+O9v
NxrAL5fdn1dWTGKxEK8zZRsV98oe2+Nh2QozX9hfV4/TccWlvVdU2BScp/L4
XyUVwYVbxhdIoUTcfYl2IcaPBi5vcqlX94yC1glXXkz/DUnT4nkjy3lwQs20
sa95BFJqrspPnhsGl9KgOPEz/ZD1/WOzVnEj8jzly2zZR8XopyqhKq0kPP+k
XydNkojb0qdnJQcR9ORe9G2h01Bc/13BXnsqmtRv5Qinc1GSYHl17ywT7LNF
J5k6RGSXxWzkf5aHvupxWKBAB6V4MkG3dRpHsj8l6bvSofChdE63+TxILc6J
TvXNg4LUkR6lciJKCO0RoPYswWJtxB3BTXMw83bog7LhDLgKHjA44c4Bf1Nl
40c1HXh5f5Re8OQw/gn4+lhlCwPN7SW4/s4cKNpxJdJ0mT8pc+fythInsPBn
1ZNK+xoUODAWENJBg1cbKxvb7DuxQabkqt0rIjSbPvmUuakTIn98436cpmF6
6aK8yyALGhwfxGldYEHJs3BeB+ECMP950VD6UT3UO7iNxN1iAA/FmJwcwoSu
f3Pu1K1uQ7GulbqS6xqAIuyNBdEcnK0N0/EqHcWlTQ3Ge/RJaFn+0TRBKgs8
folnfFJfQKuALx1vPk9i2jFnjocPA3kHCFmMAjpUPXSooXoO4dhlximK+TCO
PLCq/LizC7SeMxJsc4ZQ7KDt4h7NCVh3lx044DYFVRtITl+P1+EHFQefy7DM
I8Gr748EdMMRlrqscVIz/I3axNbyZEFhVjE+0pkBBaKF+c3/WpG0OTo0YZCI
GGP+1iGJhTrbg9IEto/DuDe/wawrFZvn2Hu3pk1gR2J+cJ31HJIi3E7Xk4aA
9LyA+bGShvHblzaZCc3i6AUv21jWOHzPPcZOzKEjz/2Vu70amXDxdtXm7kw6
pH3IbI5v4MAtbeWDNvwkrA8jdFW3s8BHvb//4DkOBDNvb40fGQV9/qN7uwtb
Ycggo9rh0SgufBmx6LCk4QqNQ+X8/mwM362b5WRUBy2RvI3f2DQcOhPA+SvH
wD/K586uWTOHLJWjX5iP/gO17ivVJSJUzJ2IfNugyMLykvCkAod+uL7m7LZu
z14s6dn0Z2T9BHxap323Xm0GQvzUb4u5jMM/GTJPM4m9uI/fU3+V/SRkfLb8
z8SEC9KtfI9PxtDhsJH0ydMbl3maazrl9KgDBVoePvyhxMDtOt6SfvpElL2f
YeHHoYBR7tdoV9VpVN0m+ePGKAXl7wtHT1SN4dNnzoW5k0Ow+vhGf+NVDNw1
caHf7WUzHFW8U/JkbBIErEr3sksJGHeB+cJYlQvPdUOMglXmoetL8Ao73hoY
LNhC4r03huYiT8H8LROYJjpDX0ymwKX2rNXXK03QlSljnZ2YAJxb/t+Se3tR
fXjnef9bE/jvoYH9SQ0czGgq+3WPnImvjmiEjS3znfMW92wvNgvV35aJ+kx2
4mzdYoPQPAsqnNZK0YSqcavPO+qhkkZU6WnMXXu8EvZH+UzPbF3EpuRUgc/t
ZLDM/3XT/hENzF6mXYrdNwQqFUJ/gLuco0NBbyqzJ2EH8WQA680Q5BuH+N5L
4zHIPvTs66mIZX86mMXHZrWDqHvGUE9/K7ZtuXnU9wEDW58GtPu7MCFJSzVt
4goHj3WZwgobBtIHyrXVFrkoG6LcxsgkwMAOs5eZ30i4wWG7EnkLEdNi9tet
vTEEByRFEyQtmchQZt2W9hmBIq8r7X/vDEHth/WEY4VM2LXnQYds8i/UMd3H
mVbkwsopic/HzzBh4aDKOuv3DdAcXHiFj1WPsaO71bwbRjHDM1eNIMLEntgv
K9jOfehbTFz1JmcMljvFiaFfioowrvdCrxXDY7W/Jx6eRsP1efv3pfRCu6hX
/nslJtLq3rISc4nYSa2am1TqhfpY1cob66bxtMrJo6H3aNDm/EH4b9kY7AnU
nczZNAER5dfn1ZeYmPRsQqRegAQTH+YvZF/vgyDHtUNOP1ig+SOv1X1gAh62
q268v8wHDoWMoJermXjhiLhFowYDBxQ8JLt1CBi1oy734clpTPXOOk9JY2O5
2lHpX40cjNbeL1Y3PwDr72XkcuT/xRV7XnD5blGwf+lBMd+HatQKeZOrs2cB
mSeq7H8V9oPlMLMk1f07kPJunlJ8Xgv+nfpbgxaYmM9XhsoxExAfp6lkJ0UF
Tt0j7Qq/GYgsFQ3/uJYL58WU6+KvN0AGd8gnsbATWGGd3cpcDtY6v1SZIaZB
Qulr/dXiVHwp9nGPuCMdW+8akwvXLfdZrGtZdH06KP2yaDtayMFIdYFrq16y
cOHBVtNj7+nAt1tW1P8OES+9T1ydLMKGlPLV3RukF2Bwh5rhmt29wPJLFaY2
0dHt2SHp7gs0sJN++u+JJAaQJFe901RnQ73h4xTB5X9/xpbnuHlsKZ4VvLJO
zLERVb9cVcqzJSHJSoG8aFcGGvuVMngTifj8xZOYv+dp2Ja/ZacKkYv7PI8E
LfYQoM57YVbp4jjmSffeOv1jEjlr38W5FPTD43+PH0pUHENFDeHmbyETUBB8
71C3Lx2i/9SRzhygwHU/ds2V5f0dIrpSzD50A4WH113gyTSs6/nsq6XdiuZh
w0oXDethRPEzQeDncu4RhN4clqNjEbiENq2dxDw7z13eupUQpnLr6u/kGeSu
ebfmy7FBZFotRMvs6UMLUTB1MB6Eqi/pf9zPkbBDdaYrxaYD/eWrfvPxteLN
irNmbfmzyA6S8SSOkGFnwTtXZ7VxsAiVZerdqYK7q1L6X7Zy0bFW9hNfzQg0
GY2eLe8ahos8MVLfzZmwwtF6oTaNAPf7lFUfS/Wi4Pm8pIM/RlDTbHrf1U9j
6MBxrPv4uwt8ooiqJWIMDK4Y8ks5P4G84fTtgzbj+P7frJIe6WVuj7favYd/
HP8RHTG2f0bCdUkmI/JKDHhRKbzcAYOY3PvQ6KIpFzxEuvwi7djgUpGxLp35
HRwDtrm+LppFpSC3TAOZQRBbtTdfIrkIfnVUQFrEPDT/s2u+KWgJas3lJ/Hg
e8yOusdhXyqDGYe9Q9vOzqClwXsINm6FiIqFItf943jA70aKo94Icktuite+
qwfdnMha8vUWXBe/f+NmIQ7wl25t+BLGYyB0ipu0Mm0K3jZ89icvUSAu7N2x
3fEEfHlNJrouZRT5akLG/iETMae5gRRWNwWSEr52Rbdn8BOlPN+TvwMVn3nc
2WDUAP9dlo68QOWit4/Tu8AXE6DXrf31n+Zh0K5LUFnx5DO+HKjTNdo/DLTp
OYs/HY+QVupGBmUa/g/Ln5kp
               "] -> Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 
         10, "ClassPriors" -> {0.39655172413793105`, 0.20689655172413793`, 
          0.39655172413793105`}, "TrainingOutput" -> 
         RawArray["UnsignedInteger8",{1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 
           3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 
           1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 
           3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 
           2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 
           1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 
           3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 
           1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 1, 3, 3, 2, 1, 3, 
           2, 1, 3, 2}], "DistributionSmoothing" -> 0.5, "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
            "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "NearestNeighbors", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NeighborsNumber" -> <|"Value" -> 10, "Options" -> <||>|>, 
           "DistributionSmoothing" -> <|"Value" -> 0.5, "Options" -> <||>|>, 
           "NearestMethod" -> <|"Value" -> "KDtree", "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[119377], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.1031513`6.465019699186322, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.19496134189107273`, 0.029602800305757387`], "Accuracy" -> 
            Around[0.9470460191305939, 0.018487116640127928`], 
            "EvaluationTime" -> 0.0000166491849721686, "TestSize" -> 170, 
            "ModelMemory" -> 11152., "ModelUtility" -> 0.9118819473732435, 
            "TrainingSize" -> 137, "TrainingTime" -> 0.006093289926713728, 
            "TrainingMemory" -> 508428., "ExperimentCount" -> 5, 
            "MeanCrossEntropyHistory" -> {
              Around[0.18578896770757336`, 0.06099668086380742], 
              Around[0.15845212380153903`, 0.05092988443420965], 
              Around[0.22635843581477527`, 0.06723606312924389], 
              Around[0.1881756066584715, 0.0606324524404695], 
              Around[0.2160315754730043, 0.06754433657824738]}, 
            "AccuracyHistory" -> {
              Around[0.9527603048448796, 0.03614055183286866], 
              Around[0.981331733416308, 0.023057346572829186`], 
              Around[0.9241888762734511, 0.04509166216648561], 
              Around[0.9527603048448795, 0.036140551832868635`], 
              Around[0.9241888762734511, 0.04509166216648561]}, 
            "Configuration" -> {
             "NearestNeighbors", "NeighborsNumber" -> Automatic, 
              "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
            "FinalTrainingSize" -> 171|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 5], 
             TypeSystem`Vector[TypeSystem`AnyType, 5], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NearestNeighbors", 
              "Options" -> <|
               "NeighborsNumber" -> <|"Value" -> Automatic|>, 
                "DistributionSmoothing" -> <|"Value" -> 0.5|>, 
                "NearestMethod" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4811740245103867, 0.07305492290839209], "Accuracy" -> 
                 Around[0.7375398831019185, 0.04859946995048178], 
                 "EvaluationTime" -> 0.000012596648138149985`, "TestSize" -> 
                 163, "ModelMemory" -> 6544, "ModelUtility" -> 
                 0.008457287426147042, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.012589254117941668`, "TrainingMemory" -> 67368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4811740245103867, 0.0516576313875845]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375398831019185, 0.03436501476405751]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2268961261945967, 0.04129054700196725], "Accuracy" -> 
                 Around[0.9561008966025774, 0.024318277657719663`], 
                 "EvaluationTime" -> 0.000011567073365107752`, "TestSize" -> 
                 141, "ModelMemory" -> 7248, "ModelUtility" -> 
                 0.7543579693066674, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.005011872336272719, "TrainingMemory" -> 78984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2268961261945967, 0.029196825783992908`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9561008966025774, 0.017195619038550884`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.19496134189107273`, 0.029602800305757387`], 
                 "Accuracy" -> 
                 Around[0.9470460191305939, 0.018487116640127928`], 
                 "EvaluationTime" -> 0.0000166491849721686, "TestSize" -> 170,
                  "ModelMemory" -> 11152., "ModelUtility" -> 
                 0.9118819473732435, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.006093289926713728, "TrainingMemory" -> 508428., 
                 "ExperimentCount" -> 5, "MeanCrossEntropyHistory" -> {
                   Around[0.18578896770757336`, 0.06099668086380742], 
                   Around[0.15845212380153903`, 0.05092988443420965], 
                   Around[0.22635843581477527`, 0.06723606312924389], 
                   Around[0.1881756066584715, 0.0606324524404695], 
                   Around[0.2160315754730043, 0.06754433657824738]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448796, 0.03614055183286866], 
                   Around[0.981331733416308, 0.023057346572829186`], 
                   Around[0.9241888762734511, 0.04509166216648561], 
                   Around[0.9527603048448795, 0.036140551832868635`], 
                   Around[0.9241888762734511, 0.04509166216648561]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0000166491849721686, "MeanCrossEntropy" -> 
                Around[0.19496134189107273`, 0.029602800305757387`], 
                "ModelMemory" -> 11152., "TrainingMemory" -> 508428., 
                "TrainingTime" -> 0.020194747384131795`|>, "Index" -> 1|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 3], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], <||>], "MaxTrainingSize" -> 171,
          "PreprocessorEvaluationTime" -> 3.346484375*^-6, 
         "PreprocessorMemory" -> 65712, "InputDimension" -> 4, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8602225670788882`17.339187334470992*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.0019047263185896762`, 
             "ElapsedTimes" -> 0.0212257, "ExperimentCounts" -> 1|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 0.009523631592948383, 
             "ElapsedTimes" -> 0.0105076, "ExperimentCounts" -> 1|>, <|
            "TrainingSizes" -> 137, "TimeBudgets" -> 0.047618157964741885`, 
             "ElapsedTimes" -> 0.0454057, "ExperimentCounts" -> 5|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
              803269050161587613|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
              3873503148790622222|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
              699058557945447889|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
              4483023431942159786|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 0.4168606, 
         "MaxTrainingMemory" -> 863424, "DataMemory" -> 26048, 
         "FunctionMemory" -> 144512, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 29, 12, 2, 47.3668717`9.428049564075051}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{46.7, 17.9, 195, 3300}, {45.4, 18.7, 188, 3525}, {
        45.2, 17.8, 198, 3950}, {46.1, 18.2, 178, 3250}, {
        45.7, 17., 195, 3650}, {49.8, 17.3, 198, 3675}, {
        46.5, 17.9, 192, 3500}, {46.9, 16.6, 192, 2700}, {
        53.5, 19.9, 205, 4500}, {50.6, 19.4, 193, 3800}, {
        49.3, 19.9, 203, 4050}, {49., 19.5, 210, 3950}, {
        47.5, 16.8, 199, 3900}, {49.6, 18.2, 193, 3775}, {
        50.9, 19.1, 196, 3550}, {50.2, 18.8, 202, 3800}, {
        47., 17.3, 185, 3700}, {45.7, 17.3, 193, 3600}, {
        52., 19., 197, 4150}, {46.4, 18.6, 190, 3450}, {
        52.2, 18.8, 197, 3450}, {52., 20.7, 210, 4800}, {
        50.8, 18.5, 201, 4450}, {51.4, 19., 201, 3950}, {
        58., 17.8, 181, 3700}, {46.6, 17.8, 193, 3800}, {
        49.5, 19., 200, 3800}, {50.2, 18.7, 198, 3775}, {
        45.6, 19.4, 194, 3525}, {51.7, 20.3, 194, 3775}, {
        50.7, 19.7, 203, 4050}, {46.2, 17.5, 187, 3650}, {
        46.4, 17.8, 191, 3700}, {46., 21.5, 194, 4200}, {
        41.1, 18.2, 192, 4050}, {39.6, 17.2, 196, 3550}, {
        42.9, 17.6, 196, 4700}, {42., 20.2, 190, 4250}, {
        37.3, 20.5, 199, 3775}, {40.5, 17.9, 187, 3200}, {
        33.1, 16.1, 178, 2900}, {36.6, 18.4, 184, 3475}, {
        37.8, 20., 190, 4250}, {34.1, 18.1, 193, 3475}, {
        42.2, 18.5, 180, 3550}, {37.8, 17.3, 180, 3700}, {
        39.2, 19.6, 195, 4675}, {39.6, 20.7, 191, 3900}, {
        40.3, 18., 195, 3250}, {37.3, 16.8, 192, 3000}, {
        38.6, 17., 188, 2900}, {41.4, 18.6, 191, 3700}, {
        38.2, 18.1, 185, 3950}, {42.1, 19.1, 195, 4000}, {
        39.1, 18.7, 181, 3750}, {38.2, 20., 190, 3900}, {
        32.1, 15.5, 188, 3050}, {40.9, 16.8, 191, 3700}, {
        38.1, 17.6, 187, 3425}, {38.6, 21.2, 191, 3800}, {
        38.1, 18.6, 190, 3700}, {41.1, 19.1, 188, 4100}, {
        39.6, 18.8, 190, 4600}, {37.5, 18.9, 179, 2975}, {
        36.2, 16.1, 187, 3550}, {41.4, 18.5, 202, 3875}, {
        39.7, 18.4, 190, 3900}, {35.9, 19.2, 189, 3800}, {
        39.2, 21.1, 196, 4150}, {36., 17.1, 187, 3700}, {
        37.9, 18.6, 172, 3150}, {36., 18.5, 186, 3100}, {
        39.2, 18.6, 190, 4250}, {36.2, 17.2, 187, 3150}, {
        38.3, 19.2, 189, 3950}, {37.7, 18.7, 180, 3600}, {
        37.2, 19.4, 184, 3900}, {38.8, 17.6, 191, 3275}, {
        39.7, 18.9, 184, 3550}, {37.8, 18.1, 193, 3750}, {
        37.6, 17., 185, 3600}, {39.7, 17.9, 193, 4250}, {
        37.2, 18.1, 178, 3900}, {38.8, 20., 190, 3950}, {
        41.1, 18.6, 189, 3325}, {39., 17.1, 191, 3050}, {
        39., 18.7, 185, 3650}, {36.7, 19.3, 193, 3450}, {
        41.1, 19., 182, 3425}, {40.7, 17., 190, 3725}, {
        42.3, 21.2, 191, 4150}, {35.5, 16.2, 195, 3350}, {
        38.6, 17.2, 199, 3750}, {42.5, 20.7, 197, 4500}, {
        39.5, 17.4, 186, 3800}, {41.1, 18.1, 205, 4300}, {
        35.6, 17.5, 191, 3175}, {44.1, 18., 210, 4000}, {
        40.6, 18.8, 193, 3800}, {40.3, 18.5, 196, 4350}, {
        42.8, 18.5, 195, 4250}, {36.3, 19.5, 190, 3800}, {
        38.9, 17.8, 181, 3625}, {40.9, 18.9, 184, 3900}, {
        36.8, 18.5, 193, 3500}, {40.2, 20.1, 200, 3975}, {
        36.5, 18., 182, 3150}, {36.4, 17., 195, 3325}, {
        40.6, 19., 199, 4000}, {41.3, 20.3, 194, 3550}, {
        37., 16.9, 185, 3000}, {37.5, 18.5, 199, 4475}, {
        45.8, 18.9, 197, 4150}, {43.1, 19.2, 197, 3500}, {
        39.8, 19.1, 184, 4650}, {37.8, 17.1, 186, 3300}, {
        50., 15.9, 224, 5350}, {45.7, 13.9, 214, 4400}, {
        46.1, 15.1, 215, 5100}, {50.8, 17.3, 228, 5600}, {
        44., 13.6, 208, 4350}, {46.4, 15., 216, 4700}, {
        48.6, 16., 230, 5800}, {50.5, 15.9, 222, 5550}, {
        48.4, 16.3, 220, 5400}, {44.5, 14.3, 216, 4100}, {
        46.2, 14.4, 214, 4650}, {46.9, 14.6, 222, 4875}, {
        49.5, 16.1, 224, 5650}, {46.2, 14.1, 217, 4375}, {
        43.4, 14.4, 218, 4600}, {45.2, 14.8, 212, 5200}, {
        50., 15.3, 220, 5550}, {42.8, 14.2, 209, 4700}, {
        46.5, 13.5, 210, 4550}, {47.2, 13.7, 214, 4925}, {
        50., 16.3, 230, 5700}, {48.4, 14.4, 203, 4625}, {
        45.3, 13.8, 208, 4200}, {55.1, 16., 230, 5850}, {
        45.2, 15.8, 215, 5300}, {50.8, 15.7, 226, 5200}, {
        49.4, 15.8, 216, 4925}, {45.4, 14.6, 211, 4800}, {
        48.1, 15.1, 209, 5500}, {49.2, 15.2, 221, 6300}, {
        47.5, 14.2, 209, 4600}, {49.6, 15., 216, 4750}, {
        46.4, 15.6, 221, 5000}, {47.5, 14., 212, 4875}, {
        53.4, 15.8, 219, 5500}, {50., 15.2, 218, 5700}, {
        48.7, 14.1, 210, 4450}, {50.4, 15.3, 224, 5550}, {
        46.1, 13.2, 211, 4500}, {47.3, 15.3, 222, 5250}, {
        43.5, 15.2, 213, 4650}, {49.8, 15.9, 229, 5950}, {
        42.7, 13.7, 208, 3950}, {45.1, 14.4, 210, 4400}, {
        47.7, 15., 216, 4750}, {47.2, 15.5, 215, 4975}, {
        45.5, 13.9, 210, 4200}, {51.1, 16.3, 220, 6000}, {
        47.5, 15., 218, 4950}, {47.6, 14.5, 215, 5400}, {
        48.8, 16.2, 222, 6000}, {45.5, 13.7, 214, 4650}, {
        46.2, 14.5, 209, 4800}, {47.8, 15., 215, 5650}, {
        49.9, 16.1, 213, 5400}}, 
      "Output" -> {
       "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo"}|>, 
    "Predictions" -> {
     "Chinstrap", "Chinstrap", "Adelie", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo"}, "LogProbabilities" -> CompressedData["
1:eJxTTMoPSmViYGBYDcTMQBzTrqVUdZD/wMZJvBOFti3eD+O/XtR4UIf1835G
h+INJ5huwsVnhf/hjq9/tr/mmcxpA7HncPG05xmeb1h+7pez2L389pQLcHFc
5o+KU1dcTfXccq1YxgNfF9w+ts3l0P7oYeIeXOmQ1u60unY+lfPeg/27jq2V
PSbwDq5efP8ve8vbc/en+03Z+KFK6AAh8f8H1LJVPx7Y/zL02EMmNiaC6mlt
DqniN1e0rKlZc35/Sc+WKZ07f5IdDtQSH6hwIFV8sf45k2bNG/szeiyvlDR8
3h81SN051MN5VJy8eKR1/OJK/7QuD6ll/mAr/4erOK3TCaw+h4nf3AdRNyo+
Kj4qPio+Kg4RBwDDmAEl
     "], "CountMatrix" -> {{83, 0, 0, 0}, {1, 32, 0, 0}, {0, 0, 55, 0}}, 
    "IndicesMatrix" -> {{{34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
        65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
       114, 115, 116}, {}, {}, {}}, {{3}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12,
        13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
       30, 31, 32, 33}, {}, {}}, {{}, {}, {117, 118, 119, 120, 121, 122, 123, 
       124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 
       138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 
       152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 
       166, 167, 168, 169, 170, 171}, {}}}, 
    "ExtendedClasses" -> {"Adelie", "Chinstrap", "Gentoo"}, "Weights" -> 
    SparseArray[Automatic, {171}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00007511052631578947, "SingleEvaluationTime" -> 
    0.0033179625, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{3.860071369802081*^9, 3.8601541350326505`*^9, 
  3.8602189839169874`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"6885842f-957a-475a-a0c6-76fb7641e80c"]
}, Open  ]],

Cell["\<\
The Fscore also hints at the fact that this model performs better than the \
Naive Bayes and Random Forest at generalizing the data.\
\>", "Text",
 CellChangeTimes->{{3.860154242998386*^9, 
  3.8601542962491336`*^9}},ExpressionUUID->"5387a51c-da20-4e1f-b0e2-\
38a970b12b0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"measurenn", "/@", 
   RowBox[{"{", "\"\<FScore\>\"", "}"}]}], " ", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.860072010236355*^9, 3.860072010459277*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"93b224cf-6819-469d-951d-0cc8770b88f5"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Adelie\"\>", "\[Rule]", "0.9940119760479041`"}], ",", 
        RowBox[{"\<\"Chinstrap\"\>", "\[Rule]", "0.9846153846153847`"}], ",", 
        RowBox[{"\<\"Gentoo\"\>", "\[Rule]", "1.`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.860072010893631*^9, 3.86015423685793*^9, 
  3.8602190121209016`*^9},
 CellLabel->
  "Out[74]//TableForm=",ExpressionUUID->"a62587a0-73b5-4fb8-b1ba-\
e765ed52752d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"measurenn", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"{", 
     RowBox[{"377", ",", "269"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.860072048873163*^9, 3.860072049252063*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"bb60c9d6-9f7c-43ba-af7f-d997fbc0a30e"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9883040935672512}, {0., 0.9941520467836257}}], 
          LineBox[{{0., 0.9941520467836257}, {0., 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 1.}, {0.04678362573099415, 1.}}], 
          LineBox[{{0.04678362573099415, 1.}, {0.06298001568722976, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.08172560023684429, 1.}, {0.10526315789473684`, 1.}}], 
          LineBox[{{0.10526315789473684`, 1.}, {0.12880071555262937`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 1.0000000000000002`}, 
             Offset[{3, 0}, {0., 1.0000000000000002`}]}, {{0., 
             1.0000000000000002`}, 
             Offset[{-3, 0}, {0., 1.0000000000000002`}]}, {{0., 
             0.9883040935672512}, 
             Offset[{3, 0}, {0., 0.9883040935672512}]}, {{0., 
             0.9883040935672512}, 
             Offset[{-3, 0}, {0., 0.9883040935672512}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 1.}, 
             Offset[{0, 3}, {0.06298001568722976, 1.}]}, {{
             0.06298001568722976, 1.}, 
             Offset[{0, -3}, {0.06298001568722976, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, 3}, {0.030587235774758536`, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, -3}, {0.030587235774758536`, 1.}]}}], {{{1., 0.}, {0.,
            1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12880071555262937`, 1.}, 
             Offset[{0, 3}, {0.12880071555262937`, 1.}]}, {{
             0.12880071555262937`, 1.}, 
             Offset[{0, -3}, {0.12880071555262937`, 1.}]}, {{
             0.08172560023684429, 1.}, 
             Offset[{0, 3}, {0.08172560023684429, 1.}]}, {{
             0.08172560023684429, 1.}, 
             Offset[{0, -3}, {0.08172560023684429, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQAWIQDQOMf1m/iF94b+9QD2Itt4eIfrDXWL9wT9unXXC+
0u7ON2qbThPNDw+K9sxVfTpi+LDwzFnCY3N31nu4PIw/Gt7U5QMAwyzIWw==

     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{1, 22, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
          10, 9, 8, 7, 6, 5, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21}]}}}], {{}, {}}}, {{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9883040935672512}, {0., 0.9941520467836257}}], 
          LineBox[{{0., 0.9941520467836257}, {0., 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 1.}, {0.04678362573099415, 1.}}], 
          LineBox[{{0.04678362573099415, 1.}, {0.06298001568722976, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.08172560023684429, 1.}, {0.10526315789473684`, 1.}}], 
          LineBox[{{0.10526315789473684`, 1.}, {0.12880071555262937`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.18479277361246055`, 1.}, {0.21637426900584794`, 1.}}], 
          LineBox[{{0.21637426900584794`, 1.}, {0.24795576439923533`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6245081784854033, 1.}, {0.6608187134502924, 1.}}], 
          LineBox[{{0.6608187134502924, 1.}, {0.6971292484151815, 1.}}]}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 1.0000000000000002`}, 
             Offset[{3, 0}, {0., 1.0000000000000002`}]}, {{0., 
             1.0000000000000002`}, 
             Offset[{-3, 0}, {0., 1.0000000000000002`}]}, {{0., 
             0.9883040935672512}, 
             Offset[{3, 0}, {0., 0.9883040935672512}]}, {{0., 
             0.9883040935672512}, 
             Offset[{-3, 0}, {0., 0.9883040935672512}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 1.}, 
             Offset[{0, 3}, {0.06298001568722976, 1.}]}, {{
             0.06298001568722976, 1.}, 
             Offset[{0, -3}, {0.06298001568722976, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, 3}, {0.030587235774758536`, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, -3}, {0.030587235774758536`, 1.}]}}], {{{1., 0.}, {0.,
            1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12880071555262937`, 1.}, 
             Offset[{0, 3}, {0.12880071555262937`, 1.}]}, {{
             0.12880071555262937`, 1.}, 
             Offset[{0, -3}, {0.12880071555262937`, 1.}]}, {{
             0.08172560023684429, 1.}, 
             Offset[{0, 3}, {0.08172560023684429, 1.}]}, {{
             0.08172560023684429, 1.}, 
             Offset[{0, -3}, {0.08172560023684429, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.24795576439923533`, 1.}, 
             Offset[{0, 3}, {0.24795576439923533`, 1.}]}, {{
             0.24795576439923533`, 1.}, 
             Offset[{0, -3}, {0.24795576439923533`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, 3}, {0.18479277361246055`, 1.}]}, {{
             0.18479277361246055`, 1.}, 
             Offset[{0, -3}, {0.18479277361246055`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6971292484151815, 1.}, 
             Offset[{0, 3}, {0.6971292484151815, 1.}]}, {{0.6971292484151815, 
             1.}, Offset[{0, -3}, {0.6971292484151815, 1.}]}, {{
             0.6245081784854033, 1.}, 
             Offset[{0, 3}, {0.6245081784854033, 1.}]}, {{0.6245081784854033, 
             1.}, Offset[{0, -3}, {0.6245081784854033, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[
           {GrayLevel[1], EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], 
            AbsoluteThickness[1.]}], 
            DiskBox[{0, 0}, Offset[{2., 2.}, {0., 0.}]]}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBWJGIGZiQADGv6xfxC+8t3eoB7GW20NEP9hrrF+4p+3T
LjhfaXfnG7VNp4nmhwdFe+aqPh0xfADa6l+H
       "]]}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9941520467836257}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9941520467836257, 0.005847953216374488]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.4860426929392447`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9941520467836257, 0.005847953216374488]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.4860426929392447}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.04678362573099415, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.047", "0.016"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.04678362573099415, 0.016196389956235614`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.7717569786535304`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.04678362573099415, 0.016196389956235614`]}], 
          Row[{IndeterminateThreshold, " = ", 0.7717569786535304}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.10526315789473684`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.105", "0.024"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.10526315789473684`, 0.023537557657892543`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.8760262725779967`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.10526315789473684`, 0.023537557657892543`]}], 
          Row[{IndeterminateThreshold, " = ", 0.8760262725779967}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.21637426900584794`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.216", "0.032"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.21637426900584794`, 0.03158149539338741]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9622331691297208`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.21637426900584794`, 0.03158149539338741]}], 
          Row[{IndeterminateThreshold, " = ", 0.9622331691297208}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.21637426900584794`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.216", "0.032"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.21637426900584794`, 0.03158149539338741]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9622331691297208`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.21637426900584794`, 0.03158149539338741]}], 
          Row[{IndeterminateThreshold, " = ", 0.9622331691297208}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.21637426900584794`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.216", "0.032"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.21637426900584794`, 0.03158149539338741]]}, 
             "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9622331691297208`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.21637426900584794`, 0.03158149539338741]}], 
          Row[{IndeterminateThreshold, " = ", 0.9622331691297208}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9712643678160918`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.9712643678160918}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6608187134502924, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.66", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6608187134502924, 0.03631053496488916]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.971264367816092`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6608187134502924, 0.03631053496488916]}], 
          Row[{IndeterminateThreshold, " = ", 0.971264367816092}]}], 
        "Tooltip"]& ]}}, {{}, {}}}},
  AspectRatio->Full,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9876543209876565},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->{377, 269},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.6971292484151815}, {0.9876543209876565, 
    1.0000000000000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.860072050208479*^9, 3.8601543026438055`*^9, 
  3.860219014641646*^9},
 CellLabel->"Out[75]=",ExpressionUUID->"6d8a4a4a-6c0a-4d94-8569-17c57b43ee04"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neural Network :", "Subsection",
 CellChangeTimes->{{3.860153145926627*^9, 
  3.8601531608872905`*^9}},ExpressionUUID->"d2de1ad6-0f82-4bc9-9717-\
c28e6973c5ab"],

Cell["\<\
A neural network is a complex network that has many layers in which there are \
a number of units called neurons. Every layer tries to capture the data and \
learn something from the data which is the input to the next layer.\
\>", "Text",
 CellChangeTimes->{{3.8601543258115883`*^9, 
  3.860154441228697*^9}},ExpressionUUID->"9fdb4e51-4966-4145-a8ae-\
a724e6454720"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nnet", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NeuralNetwork\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.860073244501869*^9, 3.860073255584421*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"ce74ae81-26a9-4250-90eb-8f30cf353bba"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["171", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 171, "ClassNumber" -> 3, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 4|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 171, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.004085090746150243, -0.3612744103301966, 
                   0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                   0.984330125195285}, {
                   0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                   0.01600787497426431, 
                   0.001811504406973886, -0.00020032542764021215`}}, 
                  "Precisions" -> {1.4588368163658181`*^-6, 
                   0.0215411092967585, 0.05960642825620558, 
                   0.4279510542010826}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                   "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   2758349319774705302|>], "InputDimension" -> 0, 
                "OutputDimension" -> 4, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.045528, "MaxTrainingMemory" -> 206872, 
                  "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 29, 12, 3, 37.9076148`9.33130134711287}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                   "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                   0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[16.53064340630656, 0.593442758765043], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 31956639518117771|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {44.13157894736843, 16.94970760233918, 
              202.20467836257308`, 4241.666666666666}, 
             "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
              14.416088368344866`, 827.828308046025}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             3699363863601728199, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {3}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`, 
        "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBTgOx/CFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAQAAAD5fIS879FNP/gUUT4PRwY+yVswPhdA674YQoM+XvfpvTUIl77o
iXi+aml/PHm5ub4eAhQ/uYHJPhT9Lz7dUjw7TtA2vrQWgz2gDWI/6ff1vuJ1
Xz2sBBQ9YKPWvvEhCr9ZXcC/FS2NvsJuS77NWbW9VaLTvTvVZL/PK+I+zlo3
PwI/M7/cidI968unPZ111r0Vyp49H03vvt6ZTL9K0a0+u/wlvp+IO7/AnfY+
Ezkkv62YWT/JTRc9TFndvmLEe787u4E+qzpSv6SamL6USKe807lRP4CHPD+r
q8U+e1eTv+xtfD8M2tS9IzaePIZbKL/HBNY9aeHsPoK4hL3AnLU+BLOHPun4
GT9QugE/ExnQPpH+R788gxq/yS6mv7U2qT7iaEw/nDGyvedsBD/9BG++2qdr
vizWwb61Jks/5AMdPwRKqbsMtNQ9UGOIvlCkJb9g5n09veDIPtzSa7x6so4+
ZKquPlxEqT0IYM8+miu+vQ1zer5vWfm+YHMKvxhTFz6OypO/H1lBvgRXHT/e
bdS+Gk/MvsyO/j1tDki9GSa9PscgJb7Wxiy++HiyPrR7lj5k8o6/rk2vvoMX
BD92ex8+EM6Iu2JZgT1jUQW/v082vkKxDT83UVu8tLv9vtQmUz/AEkg+ZFn/
vk8WDb/DKfk+2vLtPfaqLr9JdCC+YgE0P1LU6LxIWqG+29paPlM7Qz+8FR67
HH2fPl6Ggb1m0dw98wvCv7tiKr/5K8u+YpwmP8WhUj+27wq/MpEpv7ay8r7Y
l4W+ccvtvoOjEL1cAhI/6XbSPippKT+adBW+eTIfv+7Zqr5GE/c+hQTjPh5u
mTy15k2+rNSjva1NgD8mpJ4/9MEzv6bW6z7XTOq7jXMEv6v81D5UyYs9QUyO
v5XoRb4X7dy+d4QXP89WN7+WfRK/JLuBPmTavj5CqK8+O02uPSaZCr8utZ8+
2GKmvfhF5D6T1mu/vbM9Pd47AL/Shrm+7DfKvnCmHz8w0w2+dmwmvT/gBr5/
av6+gboBP5TIzT7BHx6/g9oGP2+IQT7pYSs/Xuzavq9FsT5rq/Y962UmP654
ln8=
                "], "Biases" -> 
               RawArray["Real32",{0.008238964714109898, 
                 0.0042387088760733604`, -0.007122373208403587, \
-0.006742947269231081, -0.003138901200145483, 
                 0.008549626916646957, -0.0012945823837071657`, 
                 0.00537297734990716, -0.00929246935993433, 
                 0.00505730789154768, 0.01143923681229353, 
                 0.00829259678721428, -0.0005529316840693355, \
-0.002232388826087117, -0.013145995326340199`, -0.003988500684499741, 
                 0.005954225081950426, 0.008999787271022797, 
                 0.005118168890476227, -0.002102658385410905, \
-0.010970782488584518`, 0.00429162010550499, 
                 0.004312912933528423, -0.007976589724421501, \
-0.000043631065636873245`, -0.008268720470368862, -0.002284304704517126, 
                 0.004618549719452858, -0.009017692878842354, \
-0.006660228129476309, -0.007147116120904684, -0.00565392104908824, \
-0.003585674101486802, -0.013806580565869808`, -0.0044875177554786205`, 
                 0.005827981047332287, -0.007245345041155815, 
                 0.007874365895986557, -0.004738732241094112, 
                 0.0026919529773294926`, 0.016716204583644867`, 
                 0.006819548085331917, 0.008249832317233086, 
                 0.008093059994280338, -0.009989716112613678, \
-0.012856800109148026`, -0.012086082249879837`, -0.009932535700500011, 
                 0.006201373878866434, -0.004319242667406797}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               4, "$InputDimensions" -> {4}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
             "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+9so19AM9DP6oX1hIjyp6KArcb04oWgYL/YOwbtj1HDUODVoCg5Dpw27SbFv
Pzinp83bJkvZW0yQKr13FN4U5WGOYZZk9Vo3ONC2DG81nRFCTXrzows66PPd
y37Lh0Lw0+2Fj4O2iPNNUsHVW5/LXjlCWtFhcVDYEUoO2oD7ppuIC8KMaO6q
A9INMZ/B2OkVmn4u5SCVVRRRtxTD19eI9Qu3iD8KDpDVP+10pUOBBg7X4l97
noODzUmoO6cIF88fEMTyczRlKOKSj1Mpu9aFN/xJJR3RhMt+aeFkLzNc2GYp
1g56BnvFAug1S5lypFeEK1576cCUjzBctYOubXDA0a2Kf2dMFenM98Wo+wtx
/hELcI8dyj9/HqV/X0+E4D+ncQ1G4O+qs+KNQb2FBCVrMUVuFZs+mofvjwfR
9nItCNdxZb8rvXGC2jceHqDOkTcT+HhDPzRTGMJmk+3R491kvH8wkD1CfsB4
fgIbhqfi8/gH9g6V2tQrxoN2+X4l37PLaa7CItKeZPh33jWcv931CPY7HBJb
zpHgbzSQZj4bxpujJvKMx2MgqSVVckHdiYeH++Cj2074JVWBpR0HQdUjn8at
MOOI6C/wUucZrRlRDOVu/8Lv/kUYl9RGSpW/hZFfV1Gfg4foI03l2S3LwNVp
o/g5WRYHW+yVDquaSxHiESo3TcDAcYX05FMIBz07DgEWR2GnNEGacP6BsBRV
qTHLmK/dy6N9dpX09HUV2P3TCndX3ZHMyenPF9qVULu+CJLadbD5uT1t3zSM
Ent/Ao3XLRBXpIdmeVVg+OG8tJ+VBE+5/7Xw+8WUc/IoxWh20bbzadCgsIV3
SIfD2dIAXvZsECbK59KDdcGQ5xsv/KshiquUlIUpl+Uh4mgAT57UAH8aNbnC
ZJGoPb4E+gwAjAw+QLMT1PBogDXdVEmnnvmfqVBVifs0sjCgZDiFrI6m+EMf
xy3oHsvb25dhr/xefPCKnZDhck6cN0cJ88pkcHeVLVa0bqKVPwsF/SXBNEZu
F/lOXU9xRv9BpaIjO8ao002jCEzsvkaue1zZTk+fzvd6a+9otJr2fhvAI2YN
YoP8teTosQHGX+ii1gUD6YHTZSo3MOIdReWwPbMfDtp1AbZ6rmKbeA0e/ms4
/3y5V5iyQAZzN6zCBU+V6e2HDbyveAiuvKeBQad6sMykQjq6ZCVtcIik+lQD
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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.007967818528413773, -0.003920276649296284, \
-0.009531746618449688, -0.00601106695830822, 
                 0.0025845759082585573`, -0.005183896981179714, 
                 0.018510663881897926`, 
                 0.005416764412075281, -0.0068092201836407185`, \
-0.004779357463121414, -0.00800650380551815, 0.011197770945727825`, 
                 0.00749938003718853, 
                 0.008710363879799843, -0.004318987485021353, \
-0.0005771415890194476, -0.007530923001468182, -0.010726584121584892`, \
-0.0069440193474292755`, 0.0060008252039551735`, -0.006065211724489927, 
                 0.006101271137595177, -0.013255919329822063`, \
-0.008596880361437798, -0.005423029884696007, 0.0035043670795857906`, 
                 0.003809411311522126, 0.015094266273081303`, 
                 0.008436121046543121, 
                 0.01273930910974741, -0.004905374720692635, 
                 0.0013938986230641603`, 0.011005557142198086`, 
                 0.005724549759179354, -0.009899202734231949, \
-0.005643712356686592, -0.005739795975387096, 
                 0.01060617808252573, -0.0026409272104501724`, \
-0.01264505460858345, -0.012302553281188011`, 
                 0.007428459823131561, -0.008714258670806885, 
                 0.003168156836181879, 0.008140960708260536, 
                 0.009520942345261574, -0.009614476934075356, \
-0.006093342788517475, 0.006172630935907364, -0.005179620813578367}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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

                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.005662576295435429, -0.009059331379830837, 
                 0.005364240612834692, 0.005384140647947788, 
                 0.005631275475025177, -0.01142091304063797, 
                 0.00013908674009144306`, -0.006019925232976675, \
-0.004785450641065836, 0.0011842171661555767`, 
                 0.006798877380788326, -0.012596143409609795`, \
-0.008567798882722855, -0.007363011594861746, -0.004101647529751062, \
-0.006922990549355745, 0.005192582029849291, -0.00019372715905774385`, 
                 0.005708834156394005, 0.006790077313780785, 
                 0.0023647365160286427`, -0.008299623616039753, 
                 0.008535238914191723, -0.004969933070242405, \
-0.0050194719806313515`, 0.007383626885712147, -0.0047912197187542915`, 
                 0.008067423477768898, -0.0030157011933624744`, 
                 0.008005855605006218, 0.003445828566327691, 
                 0.008664680644869804, 
                 0.006933336146175861, -0.002206554403528571, 
                 0.010470420122146606`, -0.007201770320534706, 
                 0.004483520984649658, 0.007017505820840597, 
                 0.014744794927537441`, -0.004276404157280922, 
                 0.006279020570218563, 0.0062895240262150764`, 
                 0.013073067180812359`, 
                 0.005738182924687862, -0.008684013970196247, 
                 0.007560359314084053, 0.007586869411170483, 
                 0.011362964287400246`, 0.006514559034258127, 
                 0.0011721686460077763`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtmWk01+/TxylrRERIe1GopIR8PzMRWkRSkhaVpZWkfZdKsmQLKUuiJBUh
pXw/M5SQNtq0qCTt2vmVEu7+59wPrjnnOtejmfO+5jXvM4O918xa1k1GRma9
0r8wy2uz7bp1XltnK/zvstTLf9xY//89jv3/AxO6889trvwreSyG/mwXBt41
5bkpA+jbQEv+KL0nenyOFew3F9GtQ71R+cI01jrXW5DrPYPPLGoSvq+XBf3K
S/Dt0JGSjuf14vzYANTeGQhWPfqB2w1znG2txK/+5ok7db1wrOIP0frZLPb7
uYCrf2wHFbvzvF1vD6YaF0BT1gtanJgkLlDYh2lTwqH0oQgm1/zF+HlL2H5L
jnT8A018/0UXb/ZwpbLF1lR+9om4p/AsvVMexT00hrHBtiL+7JtDCz5Nh1vf
O6zXJ1SDmfMySsyqh54VPchZXEfNByNh5uNg4cIZc/r5JRBiDV25aX8rXSzq
gGrthSA6K+AnGTvc3acnb3LJ5RydL5QRcRD71JmKGcHdqeWdMo3Xa6QRqxV4
T+0YtJ3/Hc5Piyg5UabKCdmrxMs+e2iZxi8yPGkLRyvXYrOhJdaP8RfDesWB
frssm1htx4ffttH+Hq8gp3YyLnp6WdyeoUKauf247nYAZtUac1BnCt2JChWn
VgRjQGgpTdDSofNDxqJd+lLaoByHb4u+SQuSk4U35hoo71tEC91N+W50d+6X
T3w8pAJ+9dwmmMy4AU/WmHJA51HpJ0lPVp+mjZlzN7ICnSZnBQMckflHWJFr
jIcnr4DNH6P57vo1YPErGl/CFDZRPUsFni6gfX8Kt2utJq8JgXTPzITvSr3h
KZpgvz8ThUHDtMEx35ULj/mx8m0dKLQXMPPKQpp4dgMtP3ZVDN+zHucp6rLe
/SFo8vU6r3ZQQ195HfH15bPQPkqJRyUht/YXRZmYPGpoU+YV8ndpQZ4u7w8Y
jb69gzB69BmYK3Hgr7X3oN15Oz3QuU0XU5KwrPMsHmxJQBW1MxS7q0QUizSE
J+WN4DyuTWyv38O2Q9JAdg+Ao2k0Blq4YdmM3dKkAA3MeeqIQ+a64Oi7DyTe
kmp6Jw2GfTMHgP2qeVh26gWoe8VSyvezlNixj+wi6sEj7JCw2WWWYG4ayUfT
Z4vHx3RCD8ss8ffB7/AtdjKfXrtNmHZ5KjYvuYwHF2jwEL8LMNjQng4u6kbV
FxaLb/72xUd2KqyfP4N3fz4iJhrpY8fbRgld7o4rL74QzYsHsn9WJkw920h+
D/vg8W9a2DF3ILvsLaTxF2rJaXowqNypFkqjrOjTw3RIdgyCFYX36cyQkRR8
fTJNMf1Fzyuu070QO4xVkYj9j52GqXfUSfnQKB5Xb8K1/W/SkF9z8Yu/BRqt
uSI9MKovB+b9BzP794IRPX+DQ1oE+CzdDq+VL5JSTTgabC0HW7OFVH6vBvrI
deOkrH0SA58IqBNMxYfRieDwbD5e3T6LPrwpJX0TWRxTaicEvSumoNSJpPjq
rnDCsTfX7JyC95p3cLnwjPo7hWH6oiPi3Cx/mu4pA68nzOT8nIeg8EhCndbX
odBMl27/6i8u1bwPxj+TYJBED3f4yNCu9/dguq4uhwaGgFKYIippNHJMxU6Y
eecIfZM5yM77D2LXvBEY39GdZeKtcfG4E3QzdjTuT35BWi2vAHWUufeHesm7
4244IU0dfVq1wOyfTicMDQPJ0T/UNNIXZlY0UduWI2TiFyu+Xt4Lj673Aaex
1+GE8Ry6EHETbbNDWff1a4rZoI9zAqYL7hn+aHtPAq+m5og7Ip8JJW4epPbp
Ca0slOcfxTLw2PU2bIksoIkG3XDJggLIvrgGr8jtE3Z4z+HAp8+BxBewbWE+
yQ/PFh99EiHtrzIfMLfE5BdRFGfXi3HDCxj/YQOqyBmi/uZiGvdwAuyw+Ebn
nPwl5WOjYZ9mLA0510mnas5Bc0kODeybxJMKtQTV4CpJZ8cpvr9hH3pH6GO1
fS/0d+hHPzveQ+DIAJyTOB2snjrjZq/d2OeqPJQO/Qg5T43wpuw1KnQPZLeK
VlCoUsSc2hq4f/CE+OSdHbyVS5cefa3F8x5douyUXdA8TeDz/x0iw9ixpFn2
RbCIC8bbm7tgU6MevypyopbaHbg6sATenpvD7oNa6PeOMWysoIKxb1YKR3sr
cJGtIWpvuUG9T/TnPqVRvGhQIBTqp1NvVsfUqkbYVnWKnhaq8+kRPWi8XBjI
NPVH5wc1knOYDsfC22mC7gOy/iLyxoBcCJ/sh3khFoLWi3uUsPyrqBzdC575
NkP2rwVw5agSl+TNYpmbZWIfvT305dB64gnZ7Kl8Ec6MT6H6hL/gGnYLFq7X
Y419RyDg3k2h6MMr0s4sAzhgJP43Kx1jNCJxV/xsbBj5Hi592oJ+P3dy1qje
+GrhMNyyPQE6NmlxyaxQXt9nNE6djaiv8REcU6ey2zwZqj/5UtAcKYCz+iY8
Z9VPtIm6L/2Q4cvhpQYc/rYU+gXFUc2jLrLzuwc+wYm8KvoO5f93SdRaPU9Y
OHo2jEoaTIuODIKmrVO5Img3um2vovChhrz9vQe7Kd2CsJg07nBxx185ERwd
NwxU1QK4eOn4EoPtkykrGXnq4lgYpPSKzvRx525Oy8F3ezBdGteb/LzSqK3B
iC1/f6bpJR/E0NooOnQ3Hb/8ZJJJ7IMPb3qxgYcbnBzsDAcyEPteGGUtnTYE
Mz0deGTYfraW+Q8KJizgEE0lVHXXQ6O9qWRbagoyi10wOSyAN27bjU2DDogf
PQfxQXsfzhxvQ99vnwT32D9g1NYgzun4Ac+T1ITxHgnU4qaF166MA0W1VCxW
jxUGuvniFYwRwq/vENI+qov4czjvsn5Lg+oP0Q/dakH+thzs+lZH25akUNET
kRJDQrElMIqrnUzAWqYZJ2WooeNqK+6Sn4GbJjdKn+tko4O6Bf9K7APY+gBu
nh2Mb/K6hMK4v0Jb2zj84GiJQzrHk8uekeL6ggbambKaB3X5cbE4mOvb+tHB
WifoilTCL/sHsd76AsD3zuylLYCS+19RNXgAu8sUwE213VBqoY8B+d/pcU20
tGCvPHy8thP2v68heZ9EKsv+AMaV/Xijvi5Xtvvg0TQZXFz6AKbTSqxtMmaj
UCteetwW63zisd3uFChdMsVDlntEyQxbDFysy1d0m+hqb3X2L1JmA9cYLNkt
0rlbZnwjZiO4TByLgkUmlbn0525VBSCUK3Lukzz+69VOzXP1seGYHlfaCxRG
QbgpfT30UfoAFeMnY7f1n+hd0nF4v0sfHZX80HuhESmoH+OKht4YUxoOoOkC
M+kVDWpU5tODC8UUnzyuCdUWa0tSRAvLYskJS2fpt+SJGHzqgLDSV423TP4M
Fs4NQsN0K0zur82RAVo496Qi3mrRw2KTHPq9RhMv9E+i8ppynDkxFy/80cAd
g52xtM0UG4ZLxTWxQWwp35cbW5dj+3g5/uGgKs6p9caYOyP4+OdnglJfS24I
XS7xONsM4U6dJZ8zJuCbFyb89sNFMXtTCb14VkTu8siF6XlQW6GButq1wtBH
r6H54VTM2jkAbnRd4VMv+tKKoBihsnkXQbdsQdvyMX2xkuEvhrK8W30VqS7V
BtulbjB44QnYronw2k4XE+8tgj7XktD/yyzCZDX6+kWbxY2TOO1JmlB4zkMc
+ew0Ldroj1Vjg6G1px5mDq4i67kLMOPPQxjMw2CllbV46Y4MZ33OoojNGayw
ZSlEqU8XX4bkYbueAY6+PEJI2uqEG4wOwIXGz1R6bisZvCNqWLZEjHRWQUuf
UDCZMZCtnoTALN9EqZXaeUqp0OBJvY9Rt0nLBEvDSjHssR1PTFgCO8MrKEbe
jPWKRnPetlBU8wji2b03cYQwDl+nqtDmlDXY92g9eL7/Ia6VWc1Klb14b9Ik
yD6niY+6HlCq/25hboYlS41+igWO9aRcf40tvg6i8m2G2HVnK6/4l9csuf4c
7PdF2HTUjM9eeAy+e5eQ7pDdmGV5HmzM7sBAyRhUvJIAk30SRPk50+BmcCK1
pB2kr3pl1OtEBwWq/stl+21q35YIbWuSQGWpBq7vewdaYipIzaWaOrKPUof8
f2Ae5MeP7FIFm4kNNPDQZL5hOxVsYt040OAxVG9Qh/ZwLZ7ZYQoHD6jxre3/
0eaiOF46eiremfdEou32r951AVQQJI8nnOOp+uQAeLagB+9V3ogdWSG4Zkcq
BBXng1mcPb/e4Eu4YAWtfWDMsctlRGgPY5naxVgR91S4b3eBNCYqouJWDfY5
nSdsOegCVwp6YP7Vc6Lzy0ThwKTHkildvpiz4hU9WTsZbhkZYm1EAFlM7BLj
E99S3N1I8avqd6h/eV1yfYEi9FXdzsVzpZDRZy5L11WLA3610hvn9bAnN50i
+56jOrkysWyfl/BlyFxr49Nb2WyxUunQTfek76fpCj/W+GLuuR6it4IWyhiN
R8Wdu7G2QBYb91pwVP0qXhdyERd+DRG+6l6i/PtaQmHeVSHs5RVK/tcnS/wQ
g59b8UarYTBzYh7c+VWHJUNTqcs8AqJ+VYPCpbySMbt7QtrFQvFYkA9K+6tJ
zd4nSIetegbf4+6DjtJTaCkwg5DkSA59GCn4rHhO/uphEPvWl5bovwf5/Fwh
Y4QxH/2TJi75vBcyl/eGvlnxiHIOlLHKhJ+cWYEt278I3RWs6VDNP2+mP5XP
bDXHPbZzOdTnBBh3fiJN7wYaZxFCOWvM4aH6e0g/niZ43raHy2Us5CxzYOmv
TJ7zRocf/3pOsv160YCNo9CpIQFudqTwrjGXgHwyqPsgZU6O/U6XjD6Q0JpL
h2qH4Z/Avjjnehx9nu1CqXgPLjiM5zX9e+AV/5H8xuu+mHbvHqx7YC7YNlyG
S1c1OKkhTTSJ7AkTtsyFHx6R8Nx5I7idHSmaOv9jqEY/9P5QAvf8i6RJ+5by
19K8EkmIPBodMhFzZg3ly8+DsV+oJtz7aY8PTx6B5CP2uOuIN/6Xvwcz5ntz
za0AfpGugdHK8ZR09JF0SugsHmcRx34lpyj4lIZ09NLj5K3+AO4/1uI+52NJ
9XIwfD7jgb1eZFjbS2aiu2tf8txQCOe8FNnMLQyzPtnQquQFuOvRMxiiEASC
ijYaxz0H+b8nxKyYPOF5tS3e+FIGL6VjoKGsVvDNXg0p101Q5DugPOg6+ccl
cqp6b/wbpyYJijfhfNkqKMvpTQ/WAYr2Hmy4baJ0bmkd6TveEf+cT+Lv75z5
/BIrfjRdD52k5VRwaQcKE/aRzLoLQuznHBh85Qlkj0gSwx5UQMsKKbQ+jKN1
rW3Qw6kNNoc0UWzBQNiZkAXbVXsi7DSDbWNyoVdcIJw5wfzgcgT2fDUfr7sc
BJ092rjk2woY4xrGHUbKmKzRKEypX4+vNrgLZoozuHO5FvZu88fRq8P5bL0i
f1r1XfgW/BlWZw2Hi046aFXW+1K+Qih6yQzj1b0e0XzPsSwZoYcvNufzP6Hz
dClBrhjPl2SMuHK2Y8mAfk/JLrtRlOS7Q0RWODxZ6cuea79gvGUpFP12BysM
kNYedeZ3yfqYIxqBx3hlXG68BDWNqqmq2wGoz3gEg9bF0tBnxuCx+SCGphuy
1eHxotzgDFLbs5/ODXwqyoImf6+R5V1pJCy7PJ2ejgtCPZtY6NTuYf18aQpf
dbPChu5/YeaSgThi0SyhMELg0hcyPLgwnk/orxeOzJBlhXYjTOgopEsvff8N
amG8IWwPrLVPhbt/TvAgXS8YeUzbOneiDZs2LKfmkmR6nTGVtji1CVvnREKV
3EVxjbcIYZ5L4dIgVezZ5Abyj7/D7kklGAF5ULQ8AxIGWGNQ51ZsyjgptLy5
TrO7WcN1rd6cZPFY2l4WItUcpoE1v2MpvsQKl8U3wdotHcLL6wXw7GA+GK5V
4KN/+3PQygAOuPUF1Nb/hqXqjVR64RJf7bUdlx5REXuZRMGnynn48OJZDvSw
xs+hqWA6Whbem2ai8uIVJU//EzDn+3AerX9McDSrJtNviVDxsYa89jtygt5C
br5ijqofevAgJ33Um5kOqZdqKChiPi1qaoO1oj3kqQ4VfNdW0fEhxaJE6sxz
9M25QDsJzWIvwNXKV2RfMpjBdDgv/p0oHJGfRxo3HPjVVxs2yzLj9JFJguja
HbvpOrJ7z16g19VOq5ZvohkWb0mxYRcJ3T7T4OGmlHV4IZ85sAEa5kyGERcT
aO1hF9w+yQ/sf+8BGHoVQhaqS3yGmaLcpEZ6/9KZZ5QrcafLAFEmqYviFoxn
C/tHMFVyGaoKbejmjlFc2bGWYx62k7zXOQgv+cchqSf2K3OUFBZ3gEOYOU7U
TALzWRLp4Y/v6Ff3EN5ZupvT15nyfrWpPKW6EGSri2nzCR8A5Rl87M0czN+6
DF4Z/QSNnlb4/r6EYfA/Lt8toh4O4/j+AW9h2HJFXlvggGaFr63fHpuNR3Xq
YGD7cej0/mlt9DqU7jrPhkn74qw/jVfggPfZ3GLcA9ImaML1u7GSTl95TBl4
AWZldIJcTW8+3NyNzaatwJjOVFqS0El68x1FW+0JODHcnvpXHhXajkxFfZ8p
LJfdF88LVvT66jeKct4lqF4X8bCtDK4cORDT+hwgi0m1QrTfDM6ofk8eBgH8
9HwbHTeZwM/j/0BGaIjgtd6OzVffgF65AnS97BSb9ofi+T+iUCvqQLf71yDx
zFDOUA1jz8kddC3kNBwveCBMeZbC5Qpl5BHiwac+rObc7pO4eGITTArJp9gu
e/yeaMfHr+/AedHewqFKJ9Kf1gc9XLqE1yohoufWbXS+1g8ldRm0sCre+kBj
JR0csglkUzZID72zoKUhYbDYYwE7b+qDMh87hSzlXmCT/0IMXp4sxiyZZz37
Wh/eHB/E7pXeWJ7kjjoXPsKWlw9oeb93MD/AHNesc2chVIUH/FnCj/sWQOrz
r3BSkONHReVQvPGfBgZeoRfaKrh2jDLKX3XDlPh6mOHpg2l1auCmqEOfF6qj
+zFz6PHwpPRR0hmIPm2Hbybp4iyVDfR64l6w7PZdPJmcQN111DlrmYJQcPsZ
2cWfI4Np08GwcClnz+kQbbcYY21jnbC6tUy42FsQo0YO5G8+Z0Dp6GG+0zOW
9g6YC823VsDyFydQeVGdMCGmJ7QIxug0YQGMVTOFrUOnQo2FHRZhqWA9NJ+C
X6eB3FU/chzSDxKaF1Gf0I0QXrOc1srGCJH9XPHQZ0socmiCpbMyYKxvTzK/
f5qqlh2mzoFD0XVUCo8YZsNHHkez4RAjHHBDh46t2yt2BPTkw3k/hbk3FHl4
+TtRWwfgxmU3ELU2Y1N0smC0bTMrzXBh/XlNNOJiBYUZForn/9SD44J4sH1n
gxcCQinqhiMkbgRIavxKly524/6rTMi4eCubaB4j5dG51PPiSrbwX8GR/VvE
fe2zqH7uLjaY0UUP3L6RjU0BuA09QKflwkVpxUZICukFuqbjBMNkRyrfrw9V
mhPF64mREJSlgsOlCei1REvwvHcYgnoYwbsPEZR/045cTnnQX6NPlP1EHfK2
AAXV2dLHOj3co/IRbH6epxETI4Wz813FrICZ4sZCa35o9UkYP/supf9cy9KV
4Wx0agdomSvBrpkbaIVOMCluG4O/aA29/aGDb4K18MHYxdRr93GSvXhd7Fwl
Ea6q1dKcgZ600dUBDE5NxbwHSNFb5gg/mm5Q+7V8XlVogWkrDHCObhQ0yA6D
NtcnpK20G2aO6ou7FHpxRMJhnKm/Czf+/Q0h4ea4cN96PP+jlfbodCcr+ffC
OetlYPLv7w6b8wp2351G2Z5z2aXMhSNbHsH06J7c1bgUCjQ/QHioBaX3XAiP
qjQxvtwHWyc6kpfaBzrSqk2HZr+EY/cNKaX4A0zhE+QbqAV9trqzw58XID47
AKX9+mLcv17X7DgAinzmCTsbV5HflU5B7dJJKlncncvdtrNHj244/ec98hiR
j135Ttw18x6lWi+TDD81AE+fdcZZ9UaoNyuE7i5R5XWjlqM4ZxuluWWCdZcL
mk56DsdXxdPzIf68+4wlpSx8SW8NysTxuT/px/NBuHpMDLZau4HxseW8P9yW
1Q+vJMoshvutpbj80iFchiliomd/aP1SJ/h/XkPNY3OoEO1wsdEsXvrlPHt3
yfKlmlZJ7p/NlPjssJh8Ux8XWL0m30FruVS9kMasjaBSnWr6GtUurHoviyFn
R3D83Epw0WiEJRvV2GVZDvT3GEO+Dn70te4fL5wrYHJSEFUPluOrSta8qYtE
pWQpVU79SVdnROKs0nEg47yATiQeoMTTrULzoFh4eXWgMN8ikORXjsBFU/LR
fvEiru8byutcgkmMmww7q+by45dWXDWA6GucFmf2j6PnT47AxV5L6HGwOm+Q
KpFFYQMdSJTBSbdNaN1jG3YrXiH0uuwOVK+ALwxGcfWxS7CkboqQ6F8kliaN
puXH20SZ7wQPvQu5d6Qjof0zaPXwpHEjuyhqjiNMrWsEw8ntQtfrF+CSowrr
VRTxZ8QRDhxvI21WiWHL01pc/7pNGDxzMSZItTlLW8JKoZZs/TuLPh79A/cW
jsQ/pz6B/45MWmylx99+HEa7JgmWhbaTX0Iiv9HaDes7DOBdmAiLngg0OuIK
aHwbglcNhmODTU+u003i0B0bJLZPZ7BD2wR8ueoeDejcD4eq1fE/uSrK/b4G
N5ZGYtHwm9J149TR4PsUODx2pbDxhAx1DnsLtq+eQMC3X6Bfa0Hn3ncTL0fF
4cB9DvjENI432Slz4BVvVDX/IWhohWBN2kB6WyuPjZ5P6Muj4fi73oV1jhUJ
2QvnoSTUX2w9nAAyHtMoMeUfA7IFnLIqmGKPy6D+/YUkU/O35MSoBjQd0Ed4
vGgIf3megg4Z+6QOZpngKD8Iy3Tdedayy6TbbTgX9LlN6yvVuHC0N/+6cVX4
uX+PsDd9g3D6jCA5sWkcpmeZYkrIH7JxIhhjPhqnhVrxyGfd2H3cAcKECOgK
zcOakqO0MeG7+EA+lgKGFQqR5t7s46LIvwM3cUHrbuq77KjA48xg/r3f4ino
zzfvu0P31IvCcYkbD21po4HPLgqW8ZfFgyM9MDvGB507meTC43COcqmk9JAu
1zz5CNVR+dxddjRqFoZDzCgdLmlRg00H9uKT7i1imdkaevHzOe9dsh48LTxA
LTOVjRZVCptP1EOztjaNM+yBUfuPoK9TiVCQ5UpjNprzYR99MeStC2/LUsLX
e/ajRmYffpsZynwrGeqXZ+DxbzJi5N0zJO30w9i2tew6eJW0LUkPNXNKYX9F
FexxkaGct+bUZL0LncYU097y6zDPtUYs+dNGRx86YGJJMD23jOG68c2kMioV
s37rsvn9TEmdqi1dbq6XFDw0opjMI5xgNR+3KnqiT8409G+KpLvRKmj8NpX3
fTgNmp6mXHn+l1Q796g0ZvZ+DL5BYsDTVXh43xBxc/JmeqBzCIyC5tOKqDpI
tzhOetFOksYfxvDlZZ3wJTYebfetp9zph+l7zFRh+8ShGPpJHaelGvFMnEKz
W2K5KSANXF4P+Vc3ddo3Nlb4rQBYNaFYsE+rILcL46h2uhMF2z+nYoODKG13
FWc9AOFM7F7uWDaYgyIn8Kg6c7azkwH3oz6wMKER3jvngukrY+i1ZBLtLFYH
228yoDX7PIiJOlQYrS5UXkzBW2fCYd+JPvgwcZfg21nGhll14rrl9bRhdRk0
u/hx9jIU9ypnwbXqRLJZ8A2eRs9h7aWaJC+VYZteJvDDZBKfTFLhhjUgLmmU
x8HPdrNGojFHfjzAe7cFSu53Gw6/eBluvvsKykYXkY3cAda4vBxblrSAluEW
HLvIgcZmykLLkzbyelZEJsHOYFDuB0pnVXjEDnUeIe3PV6Jz4XR8LdSfzpb6
ZdrB7GtpQmmyOak9n4g6E9ZKTs2JBjuHUjrrOYkNNL7B5w1TYH3lLVKTs2CN
woPiO896uDboGFQWNVPTtXzcMFuZV4aeg6gfG/CrJBijbk8SKtxm8YpEB3iQ
vIb1+jLlzUmnUc1KuGfcXtzoqcsNuQV056UbeE1WIR1pOASfW0dvb5+Rypxv
gbvyubQt9zT9ffWUSjYb8u5b2ZIdNjFg4LGPfs8tF86FxHG14k7YYKmLy7Nn
/mO4Om45BKAxKB7CBw3kLf1fgY2sAoSY9cBtax5DXagWxutpwoo0gaPUmaxW
XYCUxh7cdncaDF1YhHeFOrHXsOMQUDEDJFIr6L59GQaWz6LMsYyHJnwTxrSd
ExfrTONM3URQjCax5sDJf97yCLyLmg0y1tr/PHgvrO4Zi8vmefFmzbO4uFMT
v6aPw7HVTaJM0UKu3lJMo+Y9hVZPHdFibE9hV1cXVN3/To+edkg2dYvAR+XN
4PpQBmX+0+bPqctE1wt+7FpgwFE3Gyl320rueLwaolY8B73j9jy1wAoGGXXn
V2c+0eS0eIx4s423tDnzmKjJ4qqx+7gj8zT92TEKBh7qL+q/78dVh8PgleVQ
6m+diSNkN0GZ/Xs4M0qezPKncvN/81FrdC9u00iH2EyV0ouFOzHGoQ5q3LV5
5C5T4stXIBtOkFXUNeCqOOxWmwpnGnRB99pL+GjSE3M5m6qL8mjIrDl40es3
WM115+NHTgozNRKhbNk0aYysO3mvGAMPtNeT2+mbdMdxJd6xVCNXn8UUaC7D
cRfuws5fA/DqtGk8aaEp60WP4Mm6JlSUs5FrpqmAzT5DuvrRiYs/D8alxseo
5HUwfyq+yQYy3dn13S0KddBHV5XuOFbenONSLsA5pw28x6scCkaM5LW76+Ho
h1E4pWo4/6f+E+Qz39HrW/r45IwC/nbQ5sG7MrHSS1lY8HE3qA9ZJEacXw2D
p2RCZW9/3LUtnpLVx/C41Qxqx+bTG3G+oPRXie0fB6NwYjbr7UyBsxILqbd/
Hj9vDcMirXkY/D0Bzp0dzM8uIc+aIA9JI0JpjamtUHN+G5rl3yeTGVeEiRfz
4EhuNc1bt4pWfzQQRtk0k/dKT7CMOQ4y04OFR6Nmk1rlQHJ22Id55XpY9dVS
GDAV0PJhPMeHXQQ1h1pygP0Uq5QHEX3noeX9l1SVWCzQgQz6tGYLJoxNEO4r
ucKW6FrR7nEBdnWbIjQ5HeT5owpR2vCXzBxC0LPxHm3ZPhqTlzhQd78xLP3w
jQZ8DsLWkAXw1mcILukXQSUPvNFK2ZlUfb1h645pHP66P/8Qt8GzyDEoyRvM
/T4Ll3SlHcLtAwdA1XIhnPs7lPfoFIDZ08MwLEcGsUIVl9dVCA25snxN9RYt
8Z9IJ3VUcestGa6WZtLnrzN4tPpuiJCPoFaDMuHVkZnwMHwg6L+/QZ3r+orC
El9RLnYPFPdaiVdmq2DEpUnYY0Y0vgyvheZr+pClep6aQmwwaMZbeFiYRt1y
/9Dlh7G0YPsIdLz5j/OSsTi1ciWa/ujHCjWf6WLvFtqbIUgDX8ynLZJd4DXv
M/20Ww1TLlmD3ABTvFhoyuZTTwqZo/ph0ORD/Kp3uTg0rAeqC0Xw97wRPz6e
w+/gIKT0+A7Nuw3EPl9/wpZ4CV82dOFc/e7Qq1hFJPl+4JZ6B9os4kGuXQ3r
VbbyVfVl8DSoFY5PNsTvd6vhV1A63Sk7LU7t3wV+W3Sov9xL0MuZzEobmGUO
y+IXnU4KjDDFAd3keU1rKw0P24cZJxR5ZOr/GN4Ec8/UQo3LcRpb0Uh37DZj
4EA15vUVolHZJGxPtWCzM5FwUlUdzer24pU1n+nUZZKsiv4qjVVLo10zhuOz
1yvE+mP9xJPGstIW+3LoM2c43JchUM7K4XMj0kVJfJNom2KDLn2Owexb9TQs
zIhdYwdIuhaGgGg4n+pS9cX4X1Jx3VpFPjp+h0RF3wNfFl+jeVpR4gVLFeTM
FrLxsMEXbo3ig+R08F6/Hct//vPY7Y7U3Xkpj5hym1Zq+YHr1d48eucm/qX6
HJTT+vBpozKxSrTjdbIK+L7vakpY8gCqQwYyN7uKFwY7oaf7JMhPv02fHJ+L
pWrG4sySfux75L5gvHU3llma8havI8Jyy0rpTLNHLDXczOYTpeLn7tkw55Cs
MLl9LtgOTWRNGoGrRp2Al+1Z4hSPGpJ7VAM+S4ey9soKMPtjxSr780SrtiTM
vqCH9xaM4autc1imbwxH/9Xi0Nuv4a/iHmiq2C5G64dw04u1JHjo8sTYt0LM
31cUWbQFYMgl6vZ4JP532J32Wg9ABQV7jP3gz4G6N6nWK0EsgPMkzBzKk6te
WwlyChw94BQprezBTxe4sKXpfpDImODch/vEuW9W08M2JZjRGQkL/s09Q+4o
Su1Mo/FL+BgamnaEbKYgG3e/Smcybonei+x4d9Ff4VZjAdxUN6fwypn/28Ph
PNc1PHHpGSi/lQRPWpA8x5RBmNkwniDpzg9OjOaTXt2x8sQujpRTBd3zslgq
84yKjqzi28Y9SIAIchiTBC5jN+LNQSVorL+PRg3ZKXyP8YSUp52Q+caVVzjZ
w6onMbA1oBbg0B44NeMjbHd6Qf8HZQz9NA==
                "], "Biases" -> 
               RawArray["Real32",{
                 0.008118053898215294, -0.005732689518481493, \
-0.00457769026979804, -0.004326863680034876, -0.009705142118036747, \
-0.00917939841747284, 0.005908626597374678, -0.002949317218735814, 
                 0.0060177152045071125`, -0.00818934477865696, \
-0.007638010662049055, 
                 0.009173428639769554, -0.007287896703928709, \
-0.008249219506978989, 
                 0.004516777116805315, -0.00002277960447827354, \
-0.012785550206899643`, 0.010339515283703804`, -0.012134159915149212`, 
                 0.003979707136750221, -0.00828453991562128, \
-0.006283472292125225, 0.007026258390396833, 0.006250834558159113, 
                 0.004305505193769932, -0.0046462249010801315`, 
                 0.002000757958739996, -0.01361990999430418, \
-0.0014041002141311765`, -0.0030156404245644808`, -0.005074746906757355, 
                 0.006497680209577084, -0.010843753814697266`, \
-0.008681001141667366, 0.004053380340337753, 0.0068258726969361305`, 
                 0.006469869986176491, -0.007495767902582884, \
-0.005614284425973892, -0.007617263589054346, -0.00460085878148675, \
-0.006991396192461252, -0.007916245609521866, 0.0030535287223756313`, 
                 0.0026602884754538536`, -0.0029336404986679554`, \
-0.006159830838441849, -0.00874666403979063, -0.006994183640927076, 
                 0.015454172156751156`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
fyf8H7iQL04=
                "], "Biases" -> 
               RawArray["Real32",{-0.003902602009475231, 
                 0.0014551744097843766`, 
                 0.008952824398875237, -0.004710656125098467, 
                 0.005411363206803799, -0.011206195689737797`, \
-0.005159321241080761, 0.005196658428758383, 
                 0.009867213666439056, -0.011269834823906422`, \
-0.009451675228774548, 0.007736932020634413, 
                 0.006951919291168451, -0.000795545696746558, \
-0.0060690054669976234`, 0.007419061381369829, -0.005397432018071413, 
                 0.0010667773894965649`, 0.005392324645072222, 
                 0.0004823149065487087, 
                 0.0006543398485518992, -0.00009239926293957978, 
                 0.0051499842666089535`, -0.007166851311922073, \
-0.010529504157602787`, -0.009196548722684383, 0.004676134325563908, 
                 0.008783644996583462, 
                 0.010533050633966923`, -0.005310163367539644, \
-0.010380611754953861`, 0.011526799760758877`, 0.0055096871219575405`, 
                 0.009529022499918938, 0.000047667374019511044`, 
                 0.009199811145663261, -0.005547606851905584, 
                 0.009397315792739391, -0.00934742670506239, 
                 0.013243323192000389`, 
                 0.0018490918446332216`, -0.007077497895807028, \
-0.0070631662383675575`, 0.007689049933105707, 
                 0.0033600032329559326`, -0.004528441000729799, 
                 0.00033725419780239463`, -0.007963143289089203, \
-0.0069408356212079525`, -0.00872827135026455}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
nMlzH86nD41jeEdrCBzvu4R/nnSCTzeMccAzdZavrwNDYRV/jg4Wkmdc47zX
GZLzD7Wg+GqcqPDlbHFwrDrun+eABzaNx/KHi+H3nxLqtDvEa7OG8vSlf+nS
oB7cJJaydutkyB6jx50FCrjC/AwqKvqQ3YoNrJJcBeoL2yHnsRnWap6ElfER
sMj1Imk62FHP3hG8f2Ex9PDvjabX1+CCJjkOeWrJh5fLccu+JPpoe4OmVE4V
K4fVgINVOVzMmcgTVqnhlJhGcFndG2fbvKKLChUwsKc8Z13sIj/3qXB2iCya
m+aCl74n6jaNZNmsbmS8OJUbtZcLtrWRUFBvz6FhyFfX1dLW56th7icn2vZg
HE+qz+OgD80wwGo0zbMeJrr9HkCqW/bBnYnncap1Cy1ucESnj/J88uEh4WvF
NFxb2QkR68Jp+bE97FP8Tmqw7DLULy+GOw7REGXxA0LXTcCrR5RoW0UVLKk6
KRQvK6EdyR44WONfBuv2hSM3LHHhKg8IKHwEy0PWg9fFCbTrykyYFejI1VFv
QVCQo9slDTTe8zYlmA6leTbhPC+ARM1We1zzcBfKqN9lh9xg3HtpIheJHiy3
rE5snnWGbIJ9SFmtUDT89AXkfk1nmxOX4eLYx5B07xRtCB8gfOy7lqcMkeHG
sTrkXTMQryxJEJ2VyoXPhSNh1SxZUK/rRkWhe/BCYY003XoRKi2Zh7YBiOst
jMTQuErI7aXHT/919j6X74g2V30w27I766q78IDDqdhpd53KTkuKe2zbQwrf
XOjDGxme/FkB900xFjSzI/DK4x+Q9/kibV4nAz2GZAllMxVh57zRNDD+KMxy
fUnNsqbgvyWRnjx9BDebVIXcolqY932aNPn0bl5Sbwrr8yL54yXFf7wVwZC6
VZDp2J2GGBVRH78AYd5vCW4ZuJPvv20T2vkMjS8spmJvJ7pRk4Seg0ZhSm87
iskyKC6++c+/bp7k4cc/kum7Nng27S1VjbDDdLU0KHboEE/dNsf4c448fvoU
MA29Ry/1tahA5xjk/2M7zE+R8+dtlvgXHSh++6QMNjyoIB+12Wh7q0u4NLOL
IIKgmbLBeagP2x8bgvoHG4W1dXPw0okfcLZsICToTxQH1r6S/tw1j7sGJ+LR
rFnkrX4SVPPDpav+juefthLs96lVGNc4lyT23anN/CudCF9H31sHc5LOZG7b
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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.0009617233299650252, -0.010395027697086334`, 
                 0.002034461125731468, 0.00978254433721304, 
                 0.0027294373139739037`, 0.007442652713507414, 
                 0.007414839696139097, 
                 0.007968423888087273, -0.003327556187286973, 
                 0.01740144193172455, 
                 0.012600681744515896`, -0.009862123988568783, 
                 0.005777071230113506, -0.008375974372029305, 
                 0.009048816747963428, 
                 0.012167663313448429`, -0.0026181747671216726`, \
-0.009878423996269703, 
                 0.0066903638653457165`, -0.009572095237672329, \
-0.002850041026249528, 0.003722132183611393, -0.005121873691678047, 
                 0.0031183965038508177`, 0.0035612015053629875`, 
                 0.0027320757508277893`, 
                 0.0008044486166909337, -0.007152988109737635, 
                 0.00424216128885746, -0.006148695480078459, \
-0.007348931394517422, 
                 0.0037826434709131718`, -0.007247392553836107, \
-0.005371745675802231, 0.007787934970110655, -0.006676082033663988, 
                 0.009176472201943398, 
                 0.009183326736092567, -0.008356011472642422, \
-0.00855448842048645, 0.0076696365140378475`, 
                 0.00463646138086915, -0.008308175951242447, \
-0.002527266275137663, 0.008999457582831383, 
                 0.009558837860822678, -0.013139422051608562`, 
                 0.0030783414840698242`, 0.005461022723466158, 
                 0.010719719342887402`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "13" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.00842017587274313, -0.007113260682672262, \
-0.009815165773034096, 0.008290126919746399, -0.007791590876877308, 
                 0.009356378577649593, 
                 0.005997281987220049, -0.005314359907060862, 
                 0.004767884034663439, 0.008030522614717484, 
                 0.006498266477137804, -0.007888893596827984, 
                 0.006031222641468048, -0.010247541591525078`, 
                 0.009810743853449821, -0.01004841923713684, \
-0.010481332428753376`, 0.009948410093784332, 0.003932468593120575, 
                 0.0053062355145812035`, 0.0072983806021511555`, 
                 0.0024504188913851976`, 0.0012493225513026118`, 
                 0.0068211364559829235`, 0.0011222256580367684`, 
                 0.0073790280148386955`, -0.004798557609319687, \
-0.0024314159527420998`, -0.00824156403541565, -0.007433316670358181, 
                 0.005769827403128147, 
                 0.008766037411987782, -0.002885699039325118, 
                 0.0111174201592803, -0.005644379649311304, \
-0.007487501483410597, -0.0005378322093747556, -0.007264560554176569, 
                 0.0012821207055822015`, 
                 0.009010497480630875, -0.0021474668756127357`, \
-0.00701143080368638, 0.008847995661199093, -0.006587490439414978, 
                 0.006117572542279959, -0.009517904371023178, 
                 0.008901179768145084, -0.0040809460915625095`, \
-0.009270885027945042, 0.0072238994762301445`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "14" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "15" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{
                 0.0008130886126309633, -0.006497271358966827, 
                 0.008927817456424236, 0.00480212178081274, 
                 0.0028611740563064814`, 0.011481295339763165`, 
                 0.0026884519029408693`, -0.006711116526275873, 
                 0.010120836086571217`, -0.008848907425999641, 
                 0.009621217846870422, -0.0076544699259102345`, \
-0.002210259437561035, 0.008141604252159595, -0.008232060819864273, 
                 0.00993403885513544, -0.007570056244730949, \
-0.0071508013643324375`, -0.0006344819557853043, -0.008907775394618511, 
                 0.009465825743973255, 
                 0.0022230749018490314`, -0.008179783821105957, \
-0.007986725308001041, -0.009777403436601162, 0.006045444402843714, 
                 0.005186345428228378, -0.00488166743889451, 
                 0.008906401693820953, -0.008932607248425484, 
                 0.00968821719288826, -0.007122626528143883, 
                 0.00924422312527895, -0.00873225461691618, \
-0.010076712816953659`, -0.007481479085981846, -0.01078246533870697, 
                 0.0009913863614201546, -0.006751160603016615, 
                 0.009202666580677032, 
                 0.00873937364667654, -0.0075836386531591415`, 
                 0.009696516208350658, -0.007327461615204811, \
-0.008897144347429276, 0.009492968209087849, -0.005724977236241102, 
                 0.009322631172835827, 0.0019527438562363386`, 
                 0.008400236256420612}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "16" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "17" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXlI03EcQEVz2TwWZY0hap5TUeY8sNg+nzxQtIjyxmaaQrPDzBY4E5V0
c6WpZIInlfdRQWVLnPy+H2eSx+wgSEaZBlZU0hIqJRIy/eM9eDyP3AtJSmsr
K6tLdptKylFHqVQ5l5N5W3EqJz80JH9r2mwSsonyXT+rEtazrPKvGOJp4uqe
/uKu+zRyouUPTFBaCwPHFXh/qENubr6HSkkPbTxrkgf83ofm2niuLLMPqw9t
49TzQoi9lsdk/QPM1SiHH+piMCli6aGqiJQGAXnaLrCN7DN0Z+Q2Y3pvDLax
oZNdJ9DRYk9hPAcodxYjV/+GabRRXO+UI8VGS3H6Wxo1L+TgwUU9bJgkrEm+
HzWTKczWtYXNFCzLvmxoDWZRI8aIu+RF45HQapngdpQE4QrvMwj7VZS0PYDK
VxM5Q6mIPtUYKc4vATp9dqF41h2WNUaI+NOAqdsnuXVTJU7qHNG/fYoqXK+i
SBCAM3UObLBFz6LTFOQxooIQQQcUJkaxlz3uNOrbBexKCXlNGyFGp2aK98/h
9GI4ilYMrFmajk5L39lAZSU+6B5mc87+6P3Xlq35pVDBIB8N071QcdcXJGYe
rsFO2HPRmSZsM7FmTIHJxXbYF32EvHQuNDIuRX1QiWxZfxTbgqWY4JdAfWka
4PhvodP/HNk71YBLfCXnNm3k4o7l0nyPGNO1P1njwi2Wez4QQgvVsCq7Qa28
Ckx9Fc+mKBI/zkVQqmSShQU2wL/HkWCTPSQbEBTDo6xZGL/pQnOHe8HOpQwM
cVJY0exG64kMzi22iXR7zbAuiJArZ4a4cE8hvcgXkuuTs8zSxmevs/mUZ2mX
8d2bcKmmisa61ZBRrYXh0QPsP+TAIrY=
                "], "Biases" -> 
               RawArray["Real32",{
                 0.009136003442108631, -0.008896219544112682, \
-0.006578672677278519}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.0.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 1.2528656, "MeanInputsPerSecond" -> 
        45974.60413950227|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {-0.0001399187076857556, 
              0.00042306402026423404`, -0.0001071471818209205, 
              0.00016570956437206522`}, 
             "StandardDeviation" -> {0.9998468032643897, 1.0001609199668149`, 
              0.9992662406686026, 0.9994146376212926}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 738322549587594830|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
             "(f1f2f3f4)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 4, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 17850, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 300, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15204678362573099`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[133505], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.2682603`6.880101399426731, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.049078130441317334`, 0.028779544396422354`], "Accuracy" -> 
         Around[0.9801927448351446, 0.016512727170852746`], "EvaluationTime" -> 
         0.00014063832361805749`, "TestSize" -> 141, "ModelMemory" -> 162384, 
         "ModelUtility" -> 2.2102702422499347`, "TrainingSize" -> 30, 
         "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 599376, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.049078130441317334`, 0.02035021100216955]}, 
         "AccuracyHistory" -> {
           Around[0.9801927448351446, 0.011676261358393331`]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           8, "NumberOfParameters" -> 17850, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
         "FinalTrainingSize" -> 171|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5004283403130206, 0.14974742587847992`], "Accuracy" -> 
              Around[0.8801178026301961, 0.0358046187337004], 
              "EvaluationTime" -> 0.00009663516428288374, "TestSize" -> 163, 
              "ModelMemory" -> 56280, "ModelUtility" -> -0.05899583586315216, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 3481472, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5004283403130206, 0.10588742030390304`]}, 
              "AccuracyHistory" -> {
                Around[0.8801178026301961, 0.02531768870439845]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.08979209634765627, 0.03091788292799465], "Accuracy" -> 
              Around[0.962947458457567, 0.022423428319020475`], 
              "EvaluationTime" -> 0.00007415013318264109, "TestSize" -> 141, 
              "ModelMemory" -> 56280, "ModelUtility" -> 1.6504990650620057`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 280264, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.08979209634765627, 0.021862244678316805`]}, 
              "AccuracyHistory" -> {
                Around[0.962947458457567, 0.015855758221829844`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1258635075127253, 0.07702996490691344], "Accuracy" -> 
              Around[0.981331733416308, 0.03260801223563184], 
              "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 34, 
              "ModelMemory" -> 56280, "ModelUtility" -> 1.2639242409027298`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 293000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1258635075127253, 0.05446841054024027]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00023362595138949453`, "MeanCrossEntropy" -> 
             Around[0.1258635075127253, 0.07702996490691344], "ModelMemory" -> 
             56280, "TrainingMemory" -> 293000, "TrainingTime" -> 
             1.1278648347330984`|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.131126948209086, 0.3986739424080451], "Accuracy" -> 
              Around[0.8894222749183746, 0.03463356168215333], 
              "EvaluationTime" -> 0.00021842851722220097`, "TestSize" -> 163, 
              "ModelMemory" -> 186192, "ModelUtility" -> -0.8845090147488787, 
              "TrainingSize" -> 8, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 811040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.131126948209086, 0.2819050481591038]}, 
              "AccuracyHistory" -> {
                Around[0.8894222749183746, 0.024489626322093186`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.08923510253062014, 0.051315941846327776`], "Accuracy" -> 
              Around[0.9838759221490515, 0.014952362321521653`], 
              "EvaluationTime" -> 0.00025250956246254436`, "TestSize" -> 141, 
              "ModelMemory" -> 186192, "ModelUtility" -> 1.6144380482334482`, 
              "TrainingSize" -> 30, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 798608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.08923510253062014, 0.03628585046251289]}, 
              "AccuracyHistory" -> {
                Around[0.9838759221490515, 0.01057291679230619]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.104839211343111, 0.07666803424870915], "Accuracy" -> 
              Around[0.981331733416308, 0.03260801223563184], 
              "EvaluationTime" -> 0.0007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 186192, "ModelUtility" -> 1.4256471707189398`, 
              "TrainingSize" -> 137, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 802168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.104839211343111, 0.0542124869175047]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0007387901269145822, "MeanCrossEntropy" -> 
             Around[0.104839211343111, 0.07666803424870915], "ModelMemory" -> 
             186192, "TrainingMemory" -> 802168, "TrainingTime" -> 
             6.553968094990168|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           3|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           4|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           5|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           6|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 7850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           7|>, <|"Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.049078130441317334`, 0.028779544396422354`], 
              "Accuracy" -> Around[0.9801927448351446, 0.016512727170852746`],
               "EvaluationTime" -> 0.00014063832361805749`, "TestSize" -> 141,
               "ModelMemory" -> 162384, "ModelUtility" -> 2.2102702422499347`,
               "TrainingSize" -> 30, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 599376, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.049078130441317334`, 0.02035021100216955]}, 
              "AccuracyHistory" -> {
                Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7008029011887525, 0.2497815452378551], "Accuracy" -> 
              Around[0.8962233671012853, 0.03366401181897637], 
              "EvaluationTime" -> 0.00018485114510042032`, "TestSize" -> 163, 
              "ModelMemory" -> 162384, 
              "ModelUtility" -> -0.40650362019593955`, "TrainingSize" -> 8, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              597968, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7008029011887525, 0.1766222244529417]}, 
              "AccuracyHistory" -> {
                Around[0.8962233671012853, 0.023804051039142272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15450461141267896`, 0.0962203505446876], "Accuracy" -> 
              Around[0.9527603048448796, 0.05111045855369069], 
              "EvaluationTime" -> 0.00046614505660620985`, "TestSize" -> 34, 
              "ModelMemory" -> 162384, "ModelUtility" -> 1.056971177294075, 
              "TrainingSize" -> 137, "TrainingTime" -> 1., "TrainingMemory" -> 
              612256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.15450461141267896`, 0.0680380623582953]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448796, 0.03614055183286866]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046614505660620985`, "MeanCrossEntropy" -> 
             Around[0.15450461141267896`, 0.0962203505446876], "ModelMemory" -> 
             162384, "TrainingMemory" -> 612256, "TrainingTime" -> 
             1.749362416109024|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 2850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06644269247189084, 0.030314797862055827`], "Accuracy" -> 
              Around[0.9801927448351446, 0.016512727170852746`], 
              "EvaluationTime" -> 0.00007876283693199428, "TestSize" -> 141, 
              "ModelMemory" -> 60376, "ModelUtility" -> 1.9309288179680384`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 304904, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06644269247189084, 0.021435799138559128`]}, 
              "AccuracyHistory" -> {
                Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1179136393863263, 0.07638447323192617], "Accuracy" -> 
              Around[0.981331733416308, 0.03260801223563184], 
              "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 34, 
              "ModelMemory" -> 60376, "ModelUtility" -> 1.3228124913981323`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 400632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1179136393863263, 0.05401197899965731]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00023362595138949453`, "MeanCrossEntropy" -> 
             Around[0.1179136393863263, 0.07638447323192617], "ModelMemory" -> 
             60376, "TrainingMemory" -> 400632, "TrainingTime" -> 
             1.185652469138264|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 17850|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 171, 
      "PreprocessorEvaluationTime" -> 5.0625*^-6, "PreprocessorMemory" -> 
      65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8602226312666226`17.339187341692433*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 2.042839894394685, 
          "ElapsedTimes" -> 3.4610965, "ExperimentCounts" -> 3|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 2.918342706278121, 
          "ElapsedTimes" -> 3.1170381, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 137, "TimeBudgets" -> 4.169061008968746, 
          "ElapsedTimes" -> 6.293249100000001, "ExperimentCounts" -> 4|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
           803269050161587613|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
           3873503148790622222|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
           699058557945447889|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
           4483023431942159786|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 14.820912, 
      "MaxTrainingMemory" -> 4962008, "DataMemory" -> 26048, "FunctionMemory" -> 
      395952, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 29, 12, 3, 52.6748485`9.47417814252059}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.860073267212433*^9, 3.8601544602431192`*^9, 
  3.8602190327169924`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"b3d7cd32-04f2-425d-b48d-079eb03d4123"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"nnet", ",", "\"\<MethodDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8600732784103823`*^9, 3.860073280566741*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"5849627a-6fd6-4129-87c0-4bdf4cfa8477"],

Cell[BoxData[
 TagBox[
  PanelBox["\<\"An neural networks is composed of layers of artificial neuron \
units. Each \\nunit computes its value as a function of the unit values in \
the previous layer. Information \\nis processed layer by layer from the \
feature layer to the output layer which gives the class probabilities. It is \
\\nalso called a feed-forward neural network or a multi-layer perceptron.\"\>",
   BaseStyle->{LineIndent -> 0}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.860073281609988*^9, 3.8601544678513412`*^9, 
  3.8602190349328055`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"bc672652-43a3-479d-97be-2853a90aa7b5"]
}, Open  ]],

Cell["The training accuracy is around 98%.", "Text",
 CellChangeTimes->{{3.860154474354809*^9, 
  3.860154495176897*^9}},ExpressionUUID->"1945dfb2-bb9d-4ebc-900c-\
75d073f3ae27"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ClassifierInformation", "[", "nnet", "]"}]], "Input",
 CellChangeTimes->{{3.8600732949509516`*^9, 3.8600732967309885`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"8c31a105-f0c8-44e3-a89c-946441eb72e3"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical"}, 
                  10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["Adelie"], 
                  TextCell["Adelie"]], 
                 InterpretationBox[
                  Cell["Chinstrap"], 
                  TextCell["Chinstrap"]], 
                 InterpretationBox[
                  Cell["Gentoo"], 
                  TextCell["Gentoo"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.0", "1.7"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.0192744835144651461`3., 1.6512727170852745662`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "NeuralNetwork",ExpressionUUID->
                   "a4ef82f6-2242-4f01-badf-8fb27c876020"],
                  TextCell["NeuralNetwork"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"NetworkDepth\"", "8"}, {
                    "MaxTrainingRounds", "300"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 300}}, 
                   Alignment -> Left, Frame -> All, FrameStyle -> 
                   GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.29`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"51.8`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0490781304413173344`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0287795443964223539`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0084809583515273734`3."}], "\", \"", 
                   "0.1066372192341620423`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0084809583515273734`3.,
                    ", ", 0.1066372192341620423`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"400.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"171", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"14.8`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.692290866675313}, {
                    3.4011973816621555`, -3.0143417519326468`}, {
                    4.919980925828125, -2.255327423036044}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.692290866675313}}, {{
                    3.4011973816621555`, -3.0143417519326468`}}, {{
                    4.919980925828125, -2.255327423036044}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -1.0478785446612375`}, {
                    2.0794415416798357`, -0.43051254312113496`}, {
                    2.0794415416798357`, -0.43051254312113496`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -3.897204048321114}, {
                    3.4011973816621555`, -2.552872800619242}, {
                    3.4011973816621555`, -2.552872800619242}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -3.569455912578064}, {
                    4.919980925828125, -1.7064597054579493`}, {
                    4.919980925828125, -1.7064597054579493`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-3.1433445788913876`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-3.1433445788913876`, \
-0.692290866675313}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.8801178026301961}, {
                    3.4011973816621555`, 0.9801927448351446}, {
                    4.919980925828125, 0.981331733416308}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.8801178026301961}}, {{3.4011973816621555`, 
                    0.9801927448351446}}, {{4.919980925828125, 
                    0.981331733416308}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.8738082132949452}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.8738082132949452, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.692290866675313}, {
                    3.4011973816621555`, -2.4102583214933593`}, {
                    4.919980925828125, -2.0725572329042308`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.12321443505177114`}, {
                    3.4011973816621555`, -2.4164807906792434`}, {
                    4.919980925828125, -2.255327423036044}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.3555285995443912}, {
                    3.4011973816621555`, -3.0143417519326468`}, {
                    4.919980925828125, -1.8675313357585042`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -2.7114154701952566`}, {
                    4.919980925828125, -2.1378027920711804`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.692290866675313}}, {{
                    3.4011973816621555`, -2.4102583214933593`}}, {{
                    4.919980925828125, -2.0725572329042308`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.12321443505177114`}}, {{
                    3.4011973816621555`, -2.4164807906792434`}}, {{
                    4.919980925828125, -2.255327423036044}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.3555285995443912}}, {{
                    3.4011973816621555`, -3.0143417519326468`}}, {{
                    4.919980925828125, -1.8675313357585042`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -2.7114154701952566`}}, {{
                    4.919980925828125, -2.1378027920711804`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-3.1886504289873367`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-3.1886504289873367`, 
                    0.12321443505177114`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.692290866675313}, {
                    3.4011973816621555`, -3.0143417519326468`}, {
                    4.919980925828125, -2.255327423036044}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.692290866675313}}, {{
                    3.4011973816621555`, -3.0143417519326468`}}, {{
                    4.919980925828125, -2.255327423036044}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -1.0478785446612375`}, {
                    2.0794415416798357`, -0.43051254312113496`}, {
                    2.0794415416798357`, -0.43051254312113496`}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -3.897204048321114}, {
                    3.4011973816621555`, -2.552872800619242}, {
                    3.4011973816621555`, -2.552872800619242}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -3.569455912578064}, {
                    4.919980925828125, -1.7064597054579493`}, {
                    4.919980925828125, -1.7064597054579493`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-3.1433445788913876`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-3.1433445788913876`, \
-0.692290866675313}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.8801178026301961}, {
                    3.4011973816621555`, 0.9801927448351446}, {
                    4.919980925828125, 0.981331733416308}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.8801178026301961}}, {{3.4011973816621555`, 
                    0.9801927448351446}}, {{4.919980925828125, 
                    0.981331733416308}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.8738082132949452}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.8738082132949452, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.692290866675313}, {
                    3.4011973816621555`, -2.4102583214933593`}, {
                    4.919980925828125, -2.0725572329042308`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.12321443505177114`}, {
                    3.4011973816621555`, -2.4164807906792434`}, {
                    4.919980925828125, -2.255327423036044}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.3555285995443912}, {
                    3.4011973816621555`, -3.0143417519326468`}, {
                    4.919980925828125, -1.8675313357585042`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -2.7114154701952566`}, {
                    4.919980925828125, -2.1378027920711804`}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.692290866675313}}, {{
                    3.4011973816621555`, -2.4102583214933593`}}, {{
                    4.919980925828125, -2.0725572329042308`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 100}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.12321443505177114`}}, {{
                    3.4011973816621555`, -2.4164807906792434`}}, {{
                    4.919980925828125, -2.255327423036044}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 1000}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.3555285995443912}}, {{
                    3.4011973816621555`, -3.0143417519326468`}}, {{
                    4.919980925828125, -1.8675313357585042`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 8}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -2.7114154701952566`}}, {{
                    4.919980925828125, -2.1378027920711804`}}}]}, 
                    Column[{
                    Style["NeuralNetwork", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"NetworkDepth", 2}, {MaxTrainingRounds, 300}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-3.1886504289873367`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-3.1886504289873367`, 
                    0.12321443505177114`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{297., {109., 112.79924185733051`}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 171, "ClassNumber" -> 3, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical"|>, 
            "f2" -> <|"Type" -> "Numerical"|>, 
            "f3" -> <|"Type" -> "Numerical"|>, 
            "f4" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 4|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                 Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                 Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                 False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
          "Perfect", "StructurePreserving" -> False, "Missing" -> 
          "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 171, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                   "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 4, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.045528, "MaxTrainingMemory" -> 206872, 
                   "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                   "LanguageVersion" -> {13., 0}, "Date" -> 
                   DateObject[{
                    2022, 4, 29, 12, 3, 37.9076148`9.33130134711287}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                   "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                   "Windows", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                  "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[16.53064340630656, 0.593442758765043], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
              "ID" -> 31956639518117771|>], 
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {44.13157894736843, 16.94970760233918, 
               202.20467836257308`, 4241.666666666666}, 
              "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
               14.416088368344866`, 827.828308046025}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>},
               "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
              3699363863601728199, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {3}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`,
          "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {3, 4}, 0., {
       1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
     "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
     "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "Method" -> "NeuralNetwork", "Network" -> 
       NetChain[<|
         "Type" -> "Chain", 
          "Nodes" -> <|
           "1" -> <|"Type" -> "Linear", 
              "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBTgOx/CFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAQAAAD5fIS879FNP/gUUT4PRwY+yVswPhdA674YQoM+XvfpvTUIl77o
iXi+aml/PHm5ub4eAhQ/uYHJPhT9Lz7dUjw7TtA2vrQWgz2gDWI/6ff1vuJ1
Xz2sBBQ9YKPWvvEhCr9ZXcC/FS2NvsJuS77NWbW9VaLTvTvVZL/PK+I+zlo3
PwI/M7/cidI968unPZ111r0Vyp49H03vvt6ZTL9K0a0+u/wlvp+IO7/AnfY+
Ezkkv62YWT/JTRc9TFndvmLEe787u4E+qzpSv6SamL6USKe807lRP4CHPD+r
q8U+e1eTv+xtfD8M2tS9IzaePIZbKL/HBNY9aeHsPoK4hL3AnLU+BLOHPun4
GT9QugE/ExnQPpH+R788gxq/yS6mv7U2qT7iaEw/nDGyvedsBD/9BG++2qdr
vizWwb61Jks/5AMdPwRKqbsMtNQ9UGOIvlCkJb9g5n09veDIPtzSa7x6so4+
ZKquPlxEqT0IYM8+miu+vQ1zer5vWfm+YHMKvxhTFz6OypO/H1lBvgRXHT/e
bdS+Gk/MvsyO/j1tDki9GSa9PscgJb7Wxiy++HiyPrR7lj5k8o6/rk2vvoMX
BD92ex8+EM6Iu2JZgT1jUQW/v082vkKxDT83UVu8tLv9vtQmUz/AEkg+ZFn/
vk8WDb/DKfk+2vLtPfaqLr9JdCC+YgE0P1LU6LxIWqG+29paPlM7Qz+8FR67
HH2fPl6Ggb1m0dw98wvCv7tiKr/5K8u+YpwmP8WhUj+27wq/MpEpv7ay8r7Y
l4W+ccvtvoOjEL1cAhI/6XbSPippKT+adBW+eTIfv+7Zqr5GE/c+hQTjPh5u
mTy15k2+rNSjva1NgD8mpJ4/9MEzv6bW6z7XTOq7jXMEv6v81D5UyYs9QUyO
v5XoRb4X7dy+d4QXP89WN7+WfRK/JLuBPmTavj5CqK8+O02uPSaZCr8utZ8+
2GKmvfhF5D6T1mu/vbM9Pd47AL/Shrm+7DfKvnCmHz8w0w2+dmwmvT/gBr5/
av6+gboBP5TIzT7BHx6/g9oGP2+IQT7pYSs/Xuzavq9FsT5rq/Y962UmP654
ln8=
                 "], "Biases" -> 
                RawArray["Real32",{0.008238964714109898, 
                  0.0042387088760733604`, -0.007122373208403587, \
-0.006742947269231081, -0.003138901200145483, 
                  0.008549626916646957, -0.0012945823837071657`, 
                  0.00537297734990716, -0.00929246935993433, 
                  0.00505730789154768, 0.01143923681229353, 
                  0.00829259678721428, -0.0005529316840693355, \
-0.002232388826087117, -0.013145995326340199`, -0.003988500684499741, 
                  0.005954225081950426, 0.008999787271022797, 
                  0.005118168890476227, -0.002102658385410905, \
-0.010970782488584518`, 0.00429162010550499, 
                  0.004312912933528423, -0.007976589724421501, \
-0.000043631065636873245`, -0.008268720470368862, -0.002284304704517126, 
                  0.004618549719452858, -0.009017692878842354, \
-0.006660228129476309, -0.007147116120904684, -0.00565392104908824, \
-0.003585674101486802, -0.013806580565869808`, -0.0044875177554786205`, 
                  0.005827981047332287, -0.007245345041155815, 
                  0.007874365895986557, -0.004738732241094112, 
                  0.0026919529773294926`, 0.016716204583644867`, 
                  0.006819548085331917, 0.008249832317233086, 
                  0.008093059994280338, -0.009989716112613678, \
-0.012856800109148026`, -0.012086082249879837`, -0.009932535700500011, 
                  0.006201373878866434, -0.004319242667406797}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                4, "$InputDimensions" -> {4}|>, 
              "Inputs" -> <|
               "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>,
               "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "3" -> <|"Type" -> "Linear", 
              "Arrays" -> <|"Weights" -> CompressedData["
1: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
+9so19AM9DP6oX1hIjyp6KArcb04oWgYL/YOwbtj1HDUODVoCg5Dpw27SbFv
Pzinp83bJkvZW0yQKr13FN4U5WGOYZZk9Vo3ONC2DG81nRFCTXrzows66PPd
y37Lh0Lw0+2Fj4O2iPNNUsHVW5/LXjlCWtFhcVDYEUoO2oD7ppuIC8KMaO6q
A9INMZ/B2OkVmn4u5SCVVRRRtxTD19eI9Qu3iD8KDpDVP+10pUOBBg7X4l97
noODzUmoO6cIF88fEMTyczRlKOKSj1Mpu9aFN/xJJR3RhMt+aeFkLzNc2GYp
1g56BnvFAug1S5lypFeEK1576cCUjzBctYOubXDA0a2Kf2dMFenM98Wo+wtx
/hELcI8dyj9/HqV/X0+E4D+ncQ1G4O+qs+KNQb2FBCVrMUVuFZs+mofvjwfR
9nItCNdxZb8rvXGC2jceHqDOkTcT+HhDPzRTGMJmk+3R491kvH8wkD1CfsB4
fgIbhqfi8/gH9g6V2tQrxoN2+X4l37PLaa7CItKeZPh33jWcv931CPY7HBJb
zpHgbzSQZj4bxpujJvKMx2MgqSVVckHdiYeH++Cj2074JVWBpR0HQdUjn8at
MOOI6C/wUucZrRlRDOVu/8Lv/kUYl9RGSpW/hZFfV1Gfg4foI03l2S3LwNVp
o/g5WRYHW+yVDquaSxHiESo3TcDAcYX05FMIBz07DgEWR2GnNEGacP6BsBRV
qTHLmK/dy6N9dpX09HUV2P3TCndX3ZHMyenPF9qVULu+CJLadbD5uT1t3zSM
Ent/Ao3XLRBXpIdmeVVg+OG8tJ+VBE+5/7Xw+8WUc/IoxWh20bbzadCgsIV3
SIfD2dIAXvZsECbK59KDdcGQ5xsv/KshiquUlIUpl+Uh4mgAT57UAH8aNbnC
ZJGoPb4E+gwAjAw+QLMT1PBogDXdVEmnnvmfqVBVifs0sjCgZDiFrI6m+EMf
xy3oHsvb25dhr/xefPCKnZDhck6cN0cJ88pkcHeVLVa0bqKVPwsF/SXBNEZu
F/lOXU9xRv9BpaIjO8ao002jCEzsvkaue1zZTk+fzvd6a+9otJr2fhvAI2YN
YoP8teTosQHGX+ii1gUD6YHTZSo3MOIdReWwPbMfDtp1AbZ6rmKbeA0e/ms4
/3y5V5iyQAZzN6zCBU+V6e2HDbyveAiuvKeBQad6sMykQjq6ZCVtcIik+lQD
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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.007967818528413773, -0.003920276649296284, \
-0.009531746618449688, -0.00601106695830822, 
                  0.0025845759082585573`, -0.005183896981179714, 
                  0.018510663881897926`, 
                  0.005416764412075281, -0.0068092201836407185`, \
-0.004779357463121414, -0.00800650380551815, 0.011197770945727825`, 
                  0.00749938003718853, 
                  0.008710363879799843, -0.004318987485021353, \
-0.0005771415890194476, -0.007530923001468182, -0.010726584121584892`, \
-0.0069440193474292755`, 0.0060008252039551735`, -0.006065211724489927, 
                  0.006101271137595177, -0.013255919329822063`, \
-0.008596880361437798, -0.005423029884696007, 0.0035043670795857906`, 
                  0.003809411311522126, 0.015094266273081303`, 
                  0.008436121046543121, 
                  0.01273930910974741, -0.004905374720692635, 
                  0.0013938986230641603`, 0.011005557142198086`, 
                  0.005724549759179354, -0.009899202734231949, \
-0.005643712356686592, -0.005739795975387096, 
                  0.01060617808252573, -0.0026409272104501724`, \
-0.01264505460858345, -0.012302553281188011`, 
                  0.007428459823131561, -0.008714258670806885, 
                  0.003168156836181879, 0.008140960708260536, 
                  0.009520942345261574, -0.009614476934075356, \
-0.006093342788517475, 0.006172630935907364, -0.005179620813578367}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "5" -> <|"Type" -> "Linear", 
              "Arrays" -> <|"Weights" -> CompressedData["
1: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

                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.005662576295435429, -0.009059331379830837, 
                  0.005364240612834692, 0.005384140647947788, 
                  0.005631275475025177, -0.01142091304063797, 
                  0.00013908674009144306`, -0.006019925232976675, \
-0.004785450641065836, 0.0011842171661555767`, 
                  0.006798877380788326, -0.012596143409609795`, \
-0.008567798882722855, -0.007363011594861746, -0.004101647529751062, \
-0.006922990549355745, 0.005192582029849291, -0.00019372715905774385`, 
                  0.005708834156394005, 0.006790077313780785, 
                  0.0023647365160286427`, -0.008299623616039753, 
                  0.008535238914191723, -0.004969933070242405, \
-0.0050194719806313515`, 0.007383626885712147, -0.0047912197187542915`, 
                  0.008067423477768898, -0.0030157011933624744`, 
                  0.008005855605006218, 0.003445828566327691, 
                  0.008664680644869804, 
                  0.006933336146175861, -0.002206554403528571, 
                  0.010470420122146606`, -0.007201770320534706, 
                  0.004483520984649658, 0.007017505820840597, 
                  0.014744794927537441`, -0.004276404157280922, 
                  0.006279020570218563, 0.0062895240262150764`, 
                  0.013073067180812359`, 
                  0.005738182924687862, -0.008684013970196247, 
                  0.007560359314084053, 0.007586869411170483, 
                  0.011362964287400246`, 0.006514559034258127, 
                  0.0011721686460077763`}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "7" -> <|"Type" -> "Linear", 
              "Arrays" -> <|"Weights" -> CompressedData["
1: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
w6onMbA1oBbg0B44NeMjbHd6Qf8HZQz9NA==
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.008118053898215294, -0.005732689518481493, \
-0.00457769026979804, -0.004326863680034876, -0.009705142118036747, \
-0.00917939841747284, 0.005908626597374678, -0.002949317218735814, 
                  0.0060177152045071125`, -0.00818934477865696, \
-0.007638010662049055, 
                  0.009173428639769554, -0.007287896703928709, \
-0.008249219506978989, 
                  0.004516777116805315, -0.00002277960447827354, \
-0.012785550206899643`, 0.010339515283703804`, -0.012134159915149212`, 
                  0.003979707136750221, -0.00828453991562128, \
-0.006283472292125225, 0.007026258390396833, 0.006250834558159113, 
                  0.004305505193769932, -0.0046462249010801315`, 
                  0.002000757958739996, -0.01361990999430418, \
-0.0014041002141311765`, -0.0030156404245644808`, -0.005074746906757355, 
                  0.006497680209577084, -0.010843753814697266`, \
-0.008681001141667366, 0.004053380340337753, 0.0068258726969361305`, 
                  0.006469869986176491, -0.007495767902582884, \
-0.005614284425973892, -0.007617263589054346, -0.00460085878148675, \
-0.006991396192461252, -0.007916245609521866, 0.0030535287223756313`, 
                  0.0026602884754538536`, -0.0029336404986679554`, \
-0.006159830838441849, -0.00874666403979063, -0.006994183640927076, 
                  0.015454172156751156`}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "9" -> <|"Type" -> "Linear", 
              "Arrays" -> <|"Weights" -> CompressedData["
1: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
fyf8H7iQL04=
                 "], "Biases" -> 
                RawArray["Real32",{-0.003902602009475231, 
                  0.0014551744097843766`, 
                  0.008952824398875237, -0.004710656125098467, 
                  0.005411363206803799, -0.011206195689737797`, \
-0.005159321241080761, 0.005196658428758383, 
                  0.009867213666439056, -0.011269834823906422`, \
-0.009451675228774548, 0.007736932020634413, 
                  0.006951919291168451, -0.000795545696746558, \
-0.0060690054669976234`, 0.007419061381369829, -0.005397432018071413, 
                  0.0010667773894965649`, 0.005392324645072222, 
                  0.0004823149065487087, 
                  0.0006543398485518992, -0.00009239926293957978, 
                  0.0051499842666089535`, -0.007166851311922073, \
-0.010529504157602787`, -0.009196548722684383, 0.004676134325563908, 
                  0.008783644996583462, 
                  0.010533050633966923`, -0.005310163367539644, \
-0.010380611754953861`, 0.011526799760758877`, 0.0055096871219575405`, 
                  0.009529022499918938, 0.000047667374019511044`, 
                  0.009199811145663261, -0.005547606851905584, 
                  0.009397315792739391, -0.00934742670506239, 
                  0.013243323192000389`, 
                  0.0018490918446332216`, -0.007077497895807028, \
-0.0070631662383675575`, 0.007689049933105707, 
                  0.0033600032329559326`, -0.004528441000729799, 
                  
                  0.00033725419780239463`, -0.007963143289089203, \
-0.0069408356212079525`, -0.00872827135026455}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "10" -> <|
             "Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "11" -> <|
             "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
nMlzH86nD41jeEdrCBzvu4R/nnSCTzeMccAzdZavrwNDYRV/jg4Wkmdc47zX
GZLzD7Wg+GqcqPDlbHFwrDrun+eABzaNx/KHi+H3nxLqtDvEa7OG8vSlf+nS
oB7cJJaydutkyB6jx50FCrjC/AwqKvqQ3YoNrJJcBeoL2yHnsRnWap6ElfER
sMj1Imk62FHP3hG8f2Ex9PDvjabX1+CCJjkOeWrJh5fLccu+JPpoe4OmVE4V
K4fVgINVOVzMmcgTVqnhlJhGcFndG2fbvKKLChUwsKc8Z13sIj/3qXB2iCya
m+aCl74n6jaNZNmsbmS8OJUbtZcLtrWRUFBvz6FhyFfX1dLW56th7icn2vZg
HE+qz+OgD80wwGo0zbMeJrr9HkCqW/bBnYnncap1Cy1ucESnj/J88uEh4WvF
NFxb2QkR68Jp+bE97FP8Tmqw7DLULy+GOw7REGXxA0LXTcCrR5RoW0UVLKk6
KRQvK6EdyR44WONfBuv2hSM3LHHhKg8IKHwEy0PWg9fFCbTrykyYFejI1VFv
QVCQo9slDTTe8zYlmA6leTbhPC+ARM1We1zzcBfKqN9lh9xg3HtpIheJHiy3
rE5snnWGbIJ9SFmtUDT89AXkfk1nmxOX4eLYx5B07xRtCB8gfOy7lqcMkeHG
sTrkXTMQryxJEJ2VyoXPhSNh1SxZUK/rRkWhe/BCYY003XoRKi2Zh7YBiOst
jMTQuErI7aXHT/919j6X74g2V30w27I766q78IDDqdhpd53KTkuKe2zbQwrf
XOjDGxme/FkB900xFjSzI/DK4x+Q9/kibV4nAz2GZAllMxVh57zRNDD+KMxy
fUnNsqbgvyWRnjx9BDebVIXcolqY932aNPn0bl5Sbwrr8yL54yXFf7wVwZC6
VZDp2J2GGBVRH78AYd5vCW4ZuJPvv20T2vkMjS8spmJvJ7pRk4Seg0ZhSm87
iskyKC6++c+/bp7k4cc/kum7Nng27S1VjbDDdLU0KHboEE/dNsf4c448fvoU
MA29Ry/1tahA5xjk/2M7zE+R8+dtlvgXHSh++6QMNjyoIB+12Wh7q0u4NLOL
IIKgmbLBeagP2x8bgvoHG4W1dXPw0okfcLZsICToTxQH1r6S/tw1j7sGJ+LR
rFnkrX4SVPPDpav+juefthLs96lVGNc4lyT23anN/CudCF9H31sHc5LOZG7b
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
                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.0009617233299650252, -0.010395027697086334`, 
                  0.002034461125731468, 0.00978254433721304, 
                  0.0027294373139739037`, 0.007442652713507414, 
                  0.007414839696139097, 
                  0.007968423888087273, -0.003327556187286973, 
                  0.01740144193172455, 
                  0.012600681744515896`, -0.009862123988568783, 
                  0.005777071230113506, -0.008375974372029305, 
                  0.009048816747963428, 
                  0.012167663313448429`, -0.0026181747671216726`, \
-0.009878423996269703, 
                  0.0066903638653457165`, -0.009572095237672329, \
-0.002850041026249528, 0.003722132183611393, -0.005121873691678047, 
                  0.0031183965038508177`, 0.0035612015053629875`, 
                  0.0027320757508277893`, 
                  0.0008044486166909337, -0.007152988109737635, 
                  0.00424216128885746, -0.006148695480078459, \
-0.007348931394517422, 
                  0.0037826434709131718`, -0.007247392553836107, \
-0.005371745675802231, 0.007787934970110655, -0.006676082033663988, 
                  0.009176472201943398, 
                  0.009183326736092567, -0.008356011472642422, \
-0.00855448842048645, 0.0076696365140378475`, 
                  0.00463646138086915, -0.008308175951242447, \
-0.002527266275137663, 0.008999457582831383, 
                  0.009558837860822678, -0.013139422051608562`, 
                  0.0030783414840698242`, 0.005461022723466158, 
                  0.010719719342887402`}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "12" -> <|
             "Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "13" -> <|
             "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray[
                  "Real32",{-0.00842017587274313, -0.007113260682672262, \
-0.009815165773034096, 0.008290126919746399, -0.007791590876877308, 
                  0.009356378577649593, 
                  0.005997281987220049, -0.005314359907060862, 
                  0.004767884034663439, 0.008030522614717484, 
                  0.006498266477137804, -0.007888893596827984, 
                  0.006031222641468048, -0.010247541591525078`, 
                  0.009810743853449821, -0.01004841923713684, \
-0.010481332428753376`, 0.009948410093784332, 0.003932468593120575, 
                  0.0053062355145812035`, 0.0072983806021511555`, 
                  0.0024504188913851976`, 0.0012493225513026118`, 
                  0.0068211364559829235`, 0.0011222256580367684`, 
                  0.0073790280148386955`, -0.004798557609319687, \
-0.0024314159527420998`, -0.00824156403541565, -0.007433316670358181, 
                  0.005769827403128147, 
                  0.008766037411987782, -0.002885699039325118, 
                  0.0111174201592803, -0.005644379649311304, \
-0.007487501483410597, -0.0005378322093747556, -0.007264560554176569, 
                  0.0012821207055822015`, 
                  0.009010497480630875, -0.0021474668756127357`, \
-0.00701143080368638, 0.008847995661199093, -0.006587490439414978, 
                  0.006117572542279959, -0.009517904371023178, 
                  0.008901179768145084, -0.0040809460915625095`, \
-0.009270885027945042, 0.0072238994762301445`}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "14" -> <|
             "Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "15" -> <|
             "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.0008130886126309633, -0.006497271358966827, 
                  0.008927817456424236, 0.00480212178081274, 
                  0.0028611740563064814`, 0.011481295339763165`, 
                  0.0026884519029408693`, -0.006711116526275873, 
                  0.010120836086571217`, -0.008848907425999641, 
                  0.009621217846870422, -0.0076544699259102345`, \
-0.002210259437561035, 0.008141604252159595, -0.008232060819864273, 
                  0.00993403885513544, -0.007570056244730949, \
-0.0071508013643324375`, -0.0006344819557853043, -0.008907775394618511, 
                  0.009465825743973255, 
                  0.0022230749018490314`, -0.008179783821105957, \
-0.007986725308001041, -0.009777403436601162, 0.006045444402843714, 
                  0.005186345428228378, -0.00488166743889451, 
                  0.008906401693820953, -0.008932607248425484, 
                  0.00968821719288826, -0.007122626528143883, 
                  0.00924422312527895, -0.00873225461691618, \
-0.010076712816953659`, -0.007481479085981846, -0.01078246533870697, 
                  0.0009913863614201546, -0.006751160603016615, 
                  0.009202666580677032, 
                  0.00873937364667654, -0.0075836386531591415`, 
                  0.009696516208350658, -0.007327461615204811, \
-0.008897144347429276, 0.009492968209087849, -0.005724977236241102, 
                  0.009322631172835827, 0.0019527438562363386`, 
                  0.008400236256420612}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "16" -> <|
             "Type" -> "Elementwise", "Arrays" -> <||>, 
              "Parameters" -> <|
               "Function" -> 
                NeuralNetworks`ValidatedParameter[
                 "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
            "17" -> <|
             "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXlI03EcQEVz2TwWZY0hap5TUeY8sNg+nzxQtIjyxmaaQrPDzBY4E5V0
c6WpZIInlfdRQWVLnPy+H2eSx+wgSEaZBlZU0hIqJRIy/eM9eDyP3AtJSmsr
K6tLdptKylFHqVQ5l5N5W3EqJz80JH9r2mwSsonyXT+rEtazrPKvGOJp4uqe
/uKu+zRyouUPTFBaCwPHFXh/qENubr6HSkkPbTxrkgf83ofm2niuLLMPqw9t
49TzQoi9lsdk/QPM1SiHH+piMCli6aGqiJQGAXnaLrCN7DN0Z+Q2Y3pvDLax
oZNdJ9DRYk9hPAcodxYjV/+GabRRXO+UI8VGS3H6Wxo1L+TgwUU9bJgkrEm+
HzWTKczWtYXNFCzLvmxoDWZRI8aIu+RF45HQapngdpQE4QrvMwj7VZS0PYDK
VxM5Q6mIPtUYKc4vATp9dqF41h2WNUaI+NOAqdsnuXVTJU7qHNG/fYoqXK+i
SBCAM3UObLBFz6LTFOQxooIQQQcUJkaxlz3uNOrbBexKCXlNGyFGp2aK98/h
9GI4ilYMrFmajk5L39lAZSU+6B5mc87+6P3Xlq35pVDBIB8N071QcdcXJGYe
rsFO2HPRmSZsM7FmTIHJxXbYF32EvHQuNDIuRX1QiWxZfxTbgqWY4JdAfWka
4PhvodP/HNk71YBLfCXnNm3k4o7l0nyPGNO1P1njwi2Wez4QQgvVsCq7Qa28
Ckx9Fc+mKBI/zkVQqmSShQU2wL/HkWCTPSQbEBTDo6xZGL/pQnOHe8HOpQwM
cVJY0exG64kMzi22iXR7zbAuiJArZ4a4cE8hvcgXkuuTs8zSxmevs/mUZ2mX
8d2bcKmmisa61ZBRrYXh0QPsP+TAIrY=
                 "], "Biases" -> 
                RawArray["Real32",{
                  0.009136003442108631, -0.008896219544112682, \
-0.006578672677278519}]|>, 
              "Parameters" -> <|
               "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
                50, "$InputDimensions" -> {50}|>, 
              "Inputs" -> <|
               "Input" -> 
                NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
              "Outputs" -> <|
               "Output" -> 
                NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>|>, 
          "Edges" -> {
           NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Inputs", "Input"], 
            NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
            NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
            NeuralNetworks`NetPath["Outputs", "Output"] -> 
            NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"]}, 
          "Inputs" -> <|
           "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
          "Outputs" -> <|
           "Output" -> 
            NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, <|
         "Version" -> "13.0.3", "Unstable" -> False|>], 
       "Training" -> <|
        "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
         TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
         "TotalTrainingTime" -> 1.2528656, "MeanInputsPerSecond" -> 
         45974.60413950227|>, "InputType" -> "NumericalVector", "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {-0.0001399187076857556, 
               0.00042306402026423404`, -0.0001071471818209205, 
               0.00016570956437206522`}, 
              "StandardDeviation" -> {0.9998468032643897, 1.0001609199668149`,
                0.9992662406686026, 0.9994146376212926}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 738322549587594830|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
              "(f1f2f3f4)", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "FeatureNumber" -> 4, "Calibrator" -> 
       None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
         "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
         "NumberOfParameters" -> <|"Value" -> 17850, "Options" -> <||>|>, 
         "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
         "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
         "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
         "NetInitializationMethod" -> <|
          "Value" -> Automatic, "Options" -> <||>|>, 
         "OptimizationMethod" -> <|
          "Value" -> {"ADAM", "L2Regularization" -> None}, 
           "Options" -> <||>|>, 
         MaxTrainingRounds -> <|"Value" -> 300, "Options" -> <||>|>, 
         ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
         "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
         TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
         "NetTrainOptions" -> <|
          "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
           "Options" -> <||>|>, 
         "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
         "ValidationSetRatio" -> <|
          "Value" -> 0.15204678362573099`, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "PanelCell" -> CellObject[133505], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       0.2682603`6.880101399426731, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.049078130441317334`, 0.028779544396422354`], "Accuracy" -> 
          Around[0.9801927448351446, 0.016512727170852746`], "EvaluationTime" -> 
          0.00014063832361805749`, "TestSize" -> 141, "ModelMemory" -> 162384,
           "ModelUtility" -> 2.2102702422499347`, "TrainingSize" -> 30, 
          "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 599376, 
          "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
            Around[0.049078130441317334`, 0.02035021100216955]}, 
          "AccuracyHistory" -> {
            Around[0.9801927448351446, 0.011676261358393331`]}, 
          "Configuration" -> {
           "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
            8, "NumberOfParameters" -> 17850, "ActivationFunction" -> "SELU", 
            "L2Regularization" -> None, "Dropout" -> None, 
            "NetInitializationMethod" -> Automatic, 
            "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
            MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
            "EarlyStopping" -> False, TrainingProgressReporting -> None, 
            "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
          "FinalTrainingSize" -> 171|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Vector[TypeSystem`AnyType, 1], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 2|>, 
              "NumberOfParameters" -> <|"Value" -> 2850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> None|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 100|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.5004283403130206, 0.14974742587847992`], "Accuracy" -> 
               Around[0.8801178026301961, 0.0358046187337004], 
               "EvaluationTime" -> 0.00009663516428288374, "TestSize" -> 163, 
               "ModelMemory" -> 56280, "ModelUtility" -> -0.05899583586315216,
                "TrainingSize" -> 8, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 3481472, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.5004283403130206, 0.10588742030390304`]}, 
               "AccuracyHistory" -> {
                 Around[0.8801178026301961, 0.02531768870439845]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.08979209634765627, 0.03091788292799465], "Accuracy" -> 
               Around[0.962947458457567, 0.022423428319020475`], 
               "EvaluationTime" -> 0.00007415013318264109, "TestSize" -> 141, 
               "ModelMemory" -> 56280, "ModelUtility" -> 1.6504990650620057`, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.15848931924611134`, 
               "TrainingMemory" -> 280264, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.08979209634765627, 0.021862244678316805`]}, 
               "AccuracyHistory" -> {
                 Around[0.962947458457567, 0.015855758221829844`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.1258635075127253, 0.07702996490691344], "Accuracy" -> 
               Around[0.981331733416308, 0.03260801223563184], 
               "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 34, 
               "ModelMemory" -> 56280, "ModelUtility" -> 1.2639242409027298`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.3981071705534972, 
               "TrainingMemory" -> 293000, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1258635075127253, 0.05446841054024027]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00023362595138949453`, "MeanCrossEntropy" -> 
              Around[0.1258635075127253, 0.07702996490691344], "ModelMemory" -> 
              56280, "TrainingMemory" -> 293000, "TrainingTime" -> 
              1.1278648347330984`|>, "Index" -> 1|>, <|
           "Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 8|>, 
              "NumberOfParameters" -> <|"Value" -> 17850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> 0.01|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.131126948209086, 0.3986739424080451], "Accuracy" -> 
               Around[0.8894222749183746, 0.03463356168215333], 
               "EvaluationTime" -> 0.00021842851722220097`, "TestSize" -> 163,
                "ModelMemory" -> 186192, 
               "ModelUtility" -> -0.8845090147488787, "TrainingSize" -> 8, 
               "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
               811040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[1.131126948209086, 0.2819050481591038]}, 
               "AccuracyHistory" -> {
                 Around[0.8894222749183746, 0.024489626322093186`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.08923510253062014, 0.051315941846327776`], "Accuracy" -> 
               Around[0.9838759221490515, 0.014952362321521653`], 
               "EvaluationTime" -> 0.00025250956246254436`, "TestSize" -> 141,
                "ModelMemory" -> 186192, "ModelUtility" -> 
               1.6144380482334482`, "TrainingSize" -> 30, "TrainingTime" -> 
               1.5848931924611136`, "TrainingMemory" -> 798608, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.08923510253062014, 0.03628585046251289]}, 
               "AccuracyHistory" -> {
                 Around[0.9838759221490515, 0.01057291679230619]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.104839211343111, 0.07666803424870915], "Accuracy" -> 
               Around[0.981331733416308, 0.03260801223563184], 
               "EvaluationTime" -> 0.0007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 186192, "ModelUtility" -> 1.4256471707189398`,
                "TrainingSize" -> 137, "TrainingTime" -> 3.981071705534973, 
               "TrainingMemory" -> 802168, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.104839211343111, 0.0542124869175047]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.0007387901269145822, "MeanCrossEntropy" -> 
              Around[0.104839211343111, 0.07666803424870915], "ModelMemory" -> 
              186192, "TrainingMemory" -> 802168, "TrainingTime" -> 
              6.553968094990168|>, "Index" -> 2|>, <|
           "Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 2|>, 
              "NumberOfParameters" -> <|"Value" -> 2850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> 0.01|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            3|>, <|"Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 8|>, 
              "NumberOfParameters" -> <|"Value" -> 17850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> None|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            4|>, <|"Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 2|>, 
              "NumberOfParameters" -> <|"Value" -> 2850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> None|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            5|>, <|"Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 4|>, 
              "NumberOfParameters" -> <|"Value" -> 7850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> 0.01|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            6|>, <|"Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 4|>, 
              "NumberOfParameters" -> <|"Value" -> 7850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> None|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 1000|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            7|>, <|"Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 8|>, 
              "NumberOfParameters" -> <|"Value" -> 17850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> None|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 300|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.049078130441317334`, 0.028779544396422354`], 
               "Accuracy" -> 
               Around[0.9801927448351446, 0.016512727170852746`], 
               "EvaluationTime" -> 0.00014063832361805749`, "TestSize" -> 141,
                "ModelMemory" -> 162384, "ModelUtility" -> 
               2.2102702422499347`, "TrainingSize" -> 30, "TrainingTime" -> 
               0.5011872336272722, "TrainingMemory" -> 599376, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.049078130441317334`, 0.02035021100216955]}, 
               "AccuracyHistory" -> {
                 Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.7008029011887525, 0.2497815452378551], "Accuracy" -> 
               Around[0.8962233671012853, 0.03366401181897637], 
               "EvaluationTime" -> 0.00018485114510042032`, "TestSize" -> 163,
                "ModelMemory" -> 162384, 
               "ModelUtility" -> -0.40650362019593955`, "TrainingSize" -> 8, 
               "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
               597968, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.7008029011887525, 0.1766222244529417]}, 
               "AccuracyHistory" -> {
                 Around[0.8962233671012853, 0.023804051039142272`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.15450461141267896`, 0.0962203505446876], "Accuracy" -> 
               Around[0.9527603048448796, 0.05111045855369069], 
               "EvaluationTime" -> 0.00046614505660620985`, "TestSize" -> 34, 
               "ModelMemory" -> 162384, "ModelUtility" -> 1.056971177294075, 
               "TrainingSize" -> 137, "TrainingTime" -> 1., "TrainingMemory" -> 
               612256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.15450461141267896`, 0.0680380623582953]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448796, 0.03614055183286866]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00046614505660620985`, "MeanCrossEntropy" -> 
              Around[0.15450461141267896`, 0.0962203505446876], "ModelMemory" -> 
              162384, "TrainingMemory" -> 612256, "TrainingTime" -> 
              1.749362416109024|>, "Index" -> 8|>, <|
           "Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 2|>, 
              "NumberOfParameters" -> <|"Value" -> 2850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> 0.01|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 300|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.06644269247189084, 0.030314797862055827`], "Accuracy" -> 
               Around[0.9801927448351446, 0.016512727170852746`], 
               "EvaluationTime" -> 0.00007876283693199428, "TestSize" -> 141, 
               "ModelMemory" -> 60376, "ModelUtility" -> 1.9309288179680384`, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.3981071705534972, 
               "TrainingMemory" -> 304904, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.06644269247189084, 0.021435799138559128`]}, 
               "AccuracyHistory" -> {
                 Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.1179136393863263, 0.07638447323192617], "Accuracy" -> 
               Around[0.981331733416308, 0.03260801223563184], 
               "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 34, 
               "ModelMemory" -> 60376, "ModelUtility" -> 1.3228124913981323`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.6309573444801932, 
               "TrainingMemory" -> 400632, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1179136393863263, 0.05401197899965731]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00023362595138949453`, "MeanCrossEntropy" -> 
              Around[0.1179136393863263, 0.07638447323192617], "ModelMemory" -> 
              60376, "TrainingMemory" -> 400632, "TrainingTime" -> 
              1.185652469138264|>, "Index" -> 9|>, <|
           "Value" -> "NeuralNetwork", 
            "Options" -> <|
             "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
              "NetworkDepth" -> <|"Value" -> 8|>, 
              "NumberOfParameters" -> <|"Value" -> 17850|>, 
              "ActivationFunction" -> <|"Value" -> "SELU"|>, 
              "L2Regularization" -> <|"Value" -> None|>, 
              "Dropout" -> <|"Value" -> 0.01|>, 
              "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
              "OptimizationMethod" -> <|
               "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
              MaxTrainingRounds -> <|"Value" -> 300|>, 
              ValidationSet -> <|"Value" -> Automatic|>, 
              "EarlyStopping" -> <|"Value" -> False|>, 
              TrainingProgressReporting -> <|"Value" -> None|>, 
              "NetTrainOptions" -> <|"Value" -> Automatic|>, 
              "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
           "Experiments" -> {}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
              1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
            10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["NeuralNetwork"]], 
            TypeSystem`Assoc[TypeSystem`AnyType, 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, 1], 
               TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 171, 
       "PreprocessorEvaluationTime" -> 5.0625*^-6, "PreprocessorMemory" -> 
       65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8602226312666226`17.339187341692433*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 8, "TimeBudgets" -> 2.042839894394685, 
           "ElapsedTimes" -> 3.4610965, "ExperimentCounts" -> 3|>, <|
          "TrainingSizes" -> 30, "TimeBudgets" -> 2.918342706278121, 
           "ElapsedTimes" -> 3.1170381, "ExperimentCounts" -> 4|>, <|
          "TrainingSizes" -> 137, "TimeBudgets" -> 4.169061008968746, 
           "ElapsedTimes" -> 6.293249100000001, "ExperimentCounts" -> 4|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
            803269050161587613|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
            3873503148790622222|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
            699058557945447889|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
            4483023431942159786|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 14.820912, 
       "MaxTrainingMemory" -> 4962008, "DataMemory" -> 26048, 
       "FunctionMemory" -> 395952, "LanguageVersion" -> {13., 0}, "Date" -> 
       DateObject[{2022, 4, 29, 12, 3, 52.6748485`9.47417814252059}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{3.8600732979062624`*^9, 3.8601544699648914`*^9, 
  3.8602190377788916`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"7bbb882b-5629-4bed-8efc-04ac97df0200"]
}, Open  ]],

Cell["\<\
The test accuracy is around 98.5% approximately which is slightly \
overfitting. The confusion matrix says that the species Gentoo is accurately \
predicted here too. Neural Networks seems like the best fit for the data when \
compared to the other models we have built now.\
\>", "Text",
 CellChangeTimes->{{3.8601545204981937`*^9, 3.8601546226079426`*^9}, {
  3.860155023381487*^9, 
  3.8601550711223154`*^9}},ExpressionUUID->"59f03028-a6cb-4fa6-9560-\
2976832f6371"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurennet", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"nnet", ",", "testingData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.860073322061079*^9, 3.860073328412774*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"a48af896-a788-4d22-925e-c02ad154d15c"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "708f2a58-feac-4d52-9af1-fa5892995a38"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "171"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.2", "1.0"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.2456140350877120682`3., 1.0069193740062523101`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"49.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    48.5380116959064267235`3., 3.8331852752130370909`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9624450350288843437`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0224406706902144926`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9175636936484553585`3.", "\", \"", 
                   "1.0073263764093134398`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9175636936484553585`3., 
                   ", ", 1.0073263764093134398`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0382783209143307615`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0233142019099017786`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0083500829054727957`3."}], "\", \"", 
                   "0.0849067247341343256`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0083500829054727957`3.,
                    ", ", 0.0849067247341343256`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.58`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"8.92`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.8820802670894659, 
                  0.537138421973156, 0.005870893570712858}}, {{1., 1., 1.}, {
                  0.8937049590798363, 0.7051643404533617, 
                  0.2947318986498746}, {1., 1., 1.}}, {{1., 0.42, 0.}, {
                  0.9383329260197041, 0.8854203686174744, 
                  0.7093533029292117}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 
                  1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"Adelie\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.963855421686747`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "Adelie", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.963855421686747}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.03614457831325301`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "Adelie", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.08333333333333333}], 
                    Row[{"Row fraction = ", 0.03614457831325301}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["33", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" examples of \"", "\"Chinstrap\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9565217391304347`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{33, " examples of ", "Chinstrap", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9166666666666666}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9565217391304347}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Adelie", " misclassified as ", 
                    "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["55", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" examples of \"", "\"Gentoo\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{55, " examples of ", "Gentoo", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.963855421686747`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{83, " example", "s", " of class ", "Adelie"}], 
                    Row[{"Recall = ", 0.963855421686747}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{33, " example", "s", " of class ", "Chinstrap"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " of class ", "Gentoo"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{80, " example", "s", " classified as ", "Adelie"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "36", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{36, " example", "s", " classified as ", 
                    "Chinstrap"}], 
                    Row[{"Precision = ", 0.9166666666666666}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " classified as ", "Gentoo"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{2.5, 
                    FormBox[
                    RotationBox["\"Adelie\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"Chinstrap\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"Gentoo\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{2.5, 
                    FormBox["83", TraditionalForm]}, {1.5, 
                    FormBox["33", TraditionalForm]}, {0.5, 
                    FormBox["55", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["80", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["36", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["55", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"Adelie\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"Chinstrap\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"Gentoo\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->196.8,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 171, "ClassNumber" -> 3, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 4|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 171, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                    "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.045528, "MaxTrainingMemory" -> 206872,
                     "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 29, 12, 3, 37.9076148`9.33130134711287}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[16.53064340630656, 0.593442758765043], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 31956639518117771|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {44.13157894736843, 16.94970760233918, 
                 202.20467836257308`, 4241.666666666666}, 
                "StandardDeviation" -> {5.642730392182068, 
                 1.9473891434192623`, 14.416088368344866`, 827.828308046025}, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                3699363863601728199, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 
           0.20689655172413793`, "Gentoo" -> 0.39655172413793105`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwBTgOx/CFib1JmAgAAAHMIAAAAUmF3QXJyYXlTBgAAAFJlYWwzMmwCAAAA
MgAAAAQAAAD5fIS879FNP/gUUT4PRwY+yVswPhdA674YQoM+XvfpvTUIl77o
iXi+aml/PHm5ub4eAhQ/uYHJPhT9Lz7dUjw7TtA2vrQWgz2gDWI/6ff1vuJ1
Xz2sBBQ9YKPWvvEhCr9ZXcC/FS2NvsJuS77NWbW9VaLTvTvVZL/PK+I+zlo3
PwI/M7/cidI968unPZ111r0Vyp49H03vvt6ZTL9K0a0+u/wlvp+IO7/AnfY+
Ezkkv62YWT/JTRc9TFndvmLEe787u4E+qzpSv6SamL6USKe807lRP4CHPD+r
q8U+e1eTv+xtfD8M2tS9IzaePIZbKL/HBNY9aeHsPoK4hL3AnLU+BLOHPun4
GT9QugE/ExnQPpH+R788gxq/yS6mv7U2qT7iaEw/nDGyvedsBD/9BG++2qdr
vizWwb61Jks/5AMdPwRKqbsMtNQ9UGOIvlCkJb9g5n09veDIPtzSa7x6so4+
ZKquPlxEqT0IYM8+miu+vQ1zer5vWfm+YHMKvxhTFz6OypO/H1lBvgRXHT/e
bdS+Gk/MvsyO/j1tDki9GSa9PscgJb7Wxiy++HiyPrR7lj5k8o6/rk2vvoMX
BD92ex8+EM6Iu2JZgT1jUQW/v082vkKxDT83UVu8tLv9vtQmUz/AEkg+ZFn/
vk8WDb/DKfk+2vLtPfaqLr9JdCC+YgE0P1LU6LxIWqG+29paPlM7Qz+8FR67
HH2fPl6Ggb1m0dw98wvCv7tiKr/5K8u+YpwmP8WhUj+27wq/MpEpv7ay8r7Y
l4W+ccvtvoOjEL1cAhI/6XbSPippKT+adBW+eTIfv+7Zqr5GE/c+hQTjPh5u
mTy15k2+rNSjva1NgD8mpJ4/9MEzv6bW6z7XTOq7jXMEv6v81D5UyYs9QUyO
v5XoRb4X7dy+d4QXP89WN7+WfRK/JLuBPmTavj5CqK8+O02uPSaZCr8utZ8+
2GKmvfhF5D6T1mu/vbM9Pd47AL/Shrm+7DfKvnCmHz8w0w2+dmwmvT/gBr5/
av6+gboBP5TIzT7BHx6/g9oGP2+IQT7pYSs/Xuzavq9FsT5rq/Y962UmP654
ln8=
                   "], "Biases" -> 
                  RawArray["Real32",{0.008238964714109898, 
                    0.0042387088760733604`, -0.007122373208403587, \
-0.006742947269231081, -0.003138901200145483, 
                    0.008549626916646957, -0.0012945823837071657`, 
                    0.00537297734990716, -0.00929246935993433, 
                    0.00505730789154768, 0.01143923681229353, 
                    0.00829259678721428, -0.0005529316840693355, \
-0.002232388826087117, -0.013145995326340199`, -0.003988500684499741, 
                    0.005954225081950426, 0.008999787271022797, 
                    0.005118168890476227, -0.002102658385410905, \
-0.010970782488584518`, 0.00429162010550499, 
                    0.004312912933528423, -0.007976589724421501, \
-0.000043631065636873245`, -0.008268720470368862, -0.002284304704517126, 
                    0.004618549719452858, -0.009017692878842354, \
-0.006660228129476309, -0.007147116120904684, -0.00565392104908824, \
-0.003585674101486802, -0.013806580565869808`, -0.0044875177554786205`, 
                    0.005827981047332287, -0.007245345041155815, 
                    0.007874365895986557, -0.004738732241094112, 
                    0.0026919529773294926`, 0.016716204583644867`, 
                    0.006819548085331917, 0.008249832317233086, 
                    0.008093059994280338, -0.009989716112613678, \
-0.012856800109148026`, -0.012086082249879837`, -0.009932535700500011, 
                    0.006201373878866434, -0.004319242667406797}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+9so19AM9DP6oX1hIjyp6KArcb04oWgYL/YOwbtj1HDUODVoCg5Dpw27SbFv
Pzinp83bJkvZW0yQKr13FN4U5WGOYZZk9Vo3ONC2DG81nRFCTXrzows66PPd
y37Lh0Lw0+2Fj4O2iPNNUsHVW5/LXjlCWtFhcVDYEUoO2oD7ppuIC8KMaO6q
A9INMZ/B2OkVmn4u5SCVVRRRtxTD19eI9Qu3iD8KDpDVP+10pUOBBg7X4l97
noODzUmoO6cIF88fEMTyczRlKOKSj1Mpu9aFN/xJJR3RhMt+aeFkLzNc2GYp
1g56BnvFAug1S5lypFeEK1576cCUjzBctYOubXDA0a2Kf2dMFenM98Wo+wtx
/hELcI8dyj9/HqV/X0+E4D+ncQ1G4O+qs+KNQb2FBCVrMUVuFZs+mofvjwfR
9nItCNdxZb8rvXGC2jceHqDOkTcT+HhDPzRTGMJmk+3R491kvH8wkD1CfsB4
fgIbhqfi8/gH9g6V2tQrxoN2+X4l37PLaa7CItKeZPh33jWcv931CPY7HBJb
zpHgbzSQZj4bxpujJvKMx2MgqSVVckHdiYeH++Cj2074JVWBpR0HQdUjn8at
MOOI6C/wUucZrRlRDOVu/8Lv/kUYl9RGSpW/hZFfV1Gfg4foI03l2S3LwNVp
o/g5WRYHW+yVDquaSxHiESo3TcDAcYX05FMIBz07DgEWR2GnNEGacP6BsBRV
qTHLmK/dy6N9dpX09HUV2P3TCndX3ZHMyenPF9qVULu+CJLadbD5uT1t3zSM
Ent/Ao3XLRBXpIdmeVVg+OG8tJ+VBE+5/7Xw+8WUc/IoxWh20bbzadCgsIV3
SIfD2dIAXvZsECbK59KDdcGQ5xsv/KshiquUlIUpl+Uh4mgAT57UAH8aNbnC
ZJGoPb4E+gwAjAw+QLMT1PBogDXdVEmnnvmfqVBVifs0sjCgZDiFrI6m+EMf
xy3oHsvb25dhr/xefPCKnZDhck6cN0cJ88pkcHeVLVa0bqKVPwsF/SXBNEZu
F/lOXU9xRv9BpaIjO8ao002jCEzsvkaue1zZTk+fzvd6a+9otJr2fhvAI2YN
YoP8teTosQHGX+ii1gUD6YHTZSo3MOIdReWwPbMfDtp1AbZ6rmKbeA0e/ms4
/3y5V5iyQAZzN6zCBU+V6e2HDbyveAiuvKeBQad6sMykQjq6ZCVtcIik+lQD
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
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.007967818528413773, -0.003920276649296284, \
-0.009531746618449688, -0.00601106695830822, 
                    0.0025845759082585573`, -0.005183896981179714, 
                    0.018510663881897926`, 
                    0.005416764412075281, -0.0068092201836407185`, \
-0.004779357463121414, -0.00800650380551815, 0.011197770945727825`, 
                    0.00749938003718853, 
                    0.008710363879799843, -0.004318987485021353, \
-0.0005771415890194476, -0.007530923001468182, -0.010726584121584892`, \
-0.0069440193474292755`, 0.0060008252039551735`, -0.006065211724489927, 
                    0.006101271137595177, -0.013255919329822063`, \
-0.008596880361437798, -0.005423029884696007, 0.0035043670795857906`, 
                    0.003809411311522126, 0.015094266273081303`, 
                    0.008436121046543121, 
                    0.01273930910974741, -0.004905374720692635, 
                    0.0013938986230641603`, 0.011005557142198086`, 
                    0.005724549759179354, -0.009899202734231949, \
-0.005643712356686592, -0.005739795975387096, 
                    0.01060617808252573, -0.0026409272104501724`, \
-0.01264505460858345, -0.012302553281188011`, 
                    0.007428459823131561, -0.008714258670806885, 
                    0.003168156836181879, 0.008140960708260536, 
                    
                    0.009520942345261574, -0.009614476934075356, \
-0.006093342788517475, 0.006172630935907364, -0.005179620813578367}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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

                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.005662576295435429, -0.009059331379830837, 
                    0.005364240612834692, 0.005384140647947788, 
                    0.005631275475025177, -0.01142091304063797, 
                    0.00013908674009144306`, -0.006019925232976675, \
-0.004785450641065836, 0.0011842171661555767`, 
                    0.006798877380788326, -0.012596143409609795`, \
-0.008567798882722855, -0.007363011594861746, -0.004101647529751062, \
-0.006922990549355745, 0.005192582029849291, -0.00019372715905774385`, 
                    0.005708834156394005, 0.006790077313780785, 
                    0.0023647365160286427`, -0.008299623616039753, 
                    0.008535238914191723, -0.004969933070242405, \
-0.0050194719806313515`, 0.007383626885712147, -0.0047912197187542915`, 
                    0.008067423477768898, -0.0030157011933624744`, 
                    0.008005855605006218, 0.003445828566327691, 
                    0.008664680644869804, 
                    0.006933336146175861, -0.002206554403528571, 
                    0.010470420122146606`, -0.007201770320534706, 
                    0.004483520984649658, 0.007017505820840597, 
                    0.014744794927537441`, -0.004276404157280922, 
                    0.006279020570218563, 0.0062895240262150764`, 
                    0.013073067180812359`, 
                    0.005738182924687862, -0.008684013970196247, 
                    0.007560359314084053, 0.007586869411170483, 
                    0.011362964287400246`, 0.006514559034258127, 
                    0.0011721686460077763`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
w6onMbA1oBbg0B44NeMjbHd6Qf8HZQz9NA==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.008118053898215294, -0.005732689518481493, \
-0.00457769026979804, -0.004326863680034876, -0.009705142118036747, \
-0.00917939841747284, 0.005908626597374678, -0.002949317218735814, 
                    0.0060177152045071125`, -0.00818934477865696, \
-0.007638010662049055, 
                    0.009173428639769554, -0.007287896703928709, \
-0.008249219506978989, 
                    0.004516777116805315, -0.00002277960447827354, \
-0.012785550206899643`, 0.010339515283703804`, -0.012134159915149212`, 
                    0.003979707136750221, -0.00828453991562128, \
-0.006283472292125225, 0.007026258390396833, 0.006250834558159113, 
                    0.004305505193769932, -0.0046462249010801315`, 
                    0.002000757958739996, -0.01361990999430418, \
-0.0014041002141311765`, -0.0030156404245644808`, -0.005074746906757355, 
                    0.006497680209577084, -0.010843753814697266`, \
-0.008681001141667366, 0.004053380340337753, 0.0068258726969361305`, 
                    0.006469869986176491, -0.007495767902582884, \
-0.005614284425973892, -0.007617263589054346, -0.00460085878148675, \
-0.006991396192461252, -0.007916245609521866, 0.0030535287223756313`, 
                    0.0026602884754538536`, -0.0029336404986679554`, \
-0.006159830838441849, -0.00874666403979063, -0.006994183640927076, 
                    0.015454172156751156`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
fyf8H7iQL04=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.003902602009475231, 
                    0.0014551744097843766`, 
                    0.008952824398875237, -0.004710656125098467, 
                    0.005411363206803799, -0.011206195689737797`, \
-0.005159321241080761, 0.005196658428758383, 
                    0.009867213666439056, -0.011269834823906422`, \
-0.009451675228774548, 0.007736932020634413, 
                    0.006951919291168451, -0.000795545696746558, \
-0.0060690054669976234`, 0.007419061381369829, -0.005397432018071413, 
                    0.0010667773894965649`, 0.005392324645072222, 
                    0.0004823149065487087, 
                    0.0006543398485518992, -0.00009239926293957978, 
                    0.0051499842666089535`, -0.007166851311922073, \
-0.010529504157602787`, -0.009196548722684383, 0.004676134325563908, 
                    0.008783644996583462, 
                    0.010533050633966923`, -0.005310163367539644, \
-0.010380611754953861`, 0.011526799760758877`, 0.0055096871219575405`, 
                    0.009529022499918938, 0.000047667374019511044`, 
                    0.009199811145663261, -0.005547606851905584, 
                    0.009397315792739391, -0.00934742670506239, 
                    0.013243323192000389`, 
                    0.0018490918446332216`, -0.007077497895807028, \
-0.0070631662383675575`, 0.007689049933105707, 
                    0.0033600032329559326`, -0.004528441000729799, 
                    0.00033725419780239463`, -0.007963143289089203, \
-0.0069408356212079525`, -0.00872827135026455}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
nMlzH86nD41jeEdrCBzvu4R/nnSCTzeMccAzdZavrwNDYRV/jg4Wkmdc47zX
GZLzD7Wg+GqcqPDlbHFwrDrun+eABzaNx/KHi+H3nxLqtDvEa7OG8vSlf+nS
oB7cJJaydutkyB6jx50FCrjC/AwqKvqQ3YoNrJJcBeoL2yHnsRnWap6ElfER
sMj1Imk62FHP3hG8f2Ex9PDvjabX1+CCJjkOeWrJh5fLccu+JPpoe4OmVE4V
K4fVgINVOVzMmcgTVqnhlJhGcFndG2fbvKKLChUwsKc8Z13sIj/3qXB2iCya
m+aCl74n6jaNZNmsbmS8OJUbtZcLtrWRUFBvz6FhyFfX1dLW56th7icn2vZg
HE+qz+OgD80wwGo0zbMeJrr9HkCqW/bBnYnncap1Cy1ucESnj/J88uEh4WvF
NFxb2QkR68Jp+bE97FP8Tmqw7DLULy+GOw7REGXxA0LXTcCrR5RoW0UVLKk6
KRQvK6EdyR44WONfBuv2hSM3LHHhKg8IKHwEy0PWg9fFCbTrykyYFejI1VFv
QVCQo9slDTTe8zYlmA6leTbhPC+ARM1We1zzcBfKqN9lh9xg3HtpIheJHiy3
rE5snnWGbIJ9SFmtUDT89AXkfk1nmxOX4eLYx5B07xRtCB8gfOy7lqcMkeHG
sTrkXTMQryxJEJ2VyoXPhSNh1SxZUK/rRkWhe/BCYY003XoRKi2Zh7YBiOst
jMTQuErI7aXHT/919j6X74g2V30w27I766q78IDDqdhpd53KTkuKe2zbQwrf
XOjDGxme/FkB900xFjSzI/DK4x+Q9/kibV4nAz2GZAllMxVh57zRNDD+KMxy
fUnNsqbgvyWRnjx9BDebVIXcolqY932aNPn0bl5Sbwrr8yL54yXFf7wVwZC6
VZDp2J2GGBVRH78AYd5vCW4ZuJPvv20T2vkMjS8spmJvJ7pRk4Seg0ZhSm87
iskyKC6++c+/bp7k4cc/kum7Nng27S1VjbDDdLU0KHboEE/dNsf4c448fvoU
MA29Ry/1tahA5xjk/2M7zE+R8+dtlvgXHSh++6QMNjyoIB+12Wh7q0u4NLOL
IIKgmbLBeagP2x8bgvoHG4W1dXPw0okfcLZsICToTxQH1r6S/tw1j7sGJ+LR
rFnkrX4SVPPDpav+juefthLs96lVGNc4lyT23anN/CudCF9H31sHc5LOZG7b
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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.0009617233299650252, -0.010395027697086334`, 
                    0.002034461125731468, 0.00978254433721304, 
                    0.0027294373139739037`, 0.007442652713507414, 
                    0.007414839696139097, 
                    0.007968423888087273, -0.003327556187286973, 
                    0.01740144193172455, 
                    0.012600681744515896`, -0.009862123988568783, 
                    0.005777071230113506, -0.008375974372029305, 
                    0.009048816747963428, 
                    0.012167663313448429`, -0.0026181747671216726`, \
-0.009878423996269703, 
                    0.0066903638653457165`, -0.009572095237672329, \
-0.002850041026249528, 0.003722132183611393, -0.005121873691678047, 
                    0.0031183965038508177`, 0.0035612015053629875`, 
                    0.0027320757508277893`, 
                    0.0008044486166909337, -0.007152988109737635, 
                    0.00424216128885746, -0.006148695480078459, \
-0.007348931394517422, 
                    0.0037826434709131718`, -0.007247392553836107, \
-0.005371745675802231, 0.007787934970110655, -0.006676082033663988, 
                    0.009176472201943398, 
                    0.009183326736092567, -0.008356011472642422, \
-0.00855448842048645, 0.0076696365140378475`, 
                    0.00463646138086915, -0.008308175951242447, \
-0.002527266275137663, 0.008999457582831383, 
                    0.009558837860822678, -0.013139422051608562`, 
                    0.0030783414840698242`, 0.005461022723466158, 
                    0.010719719342887402`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "13" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.00842017587274313, -0.007113260682672262, \
-0.009815165773034096, 0.008290126919746399, -0.007791590876877308, 
                    0.009356378577649593, 
                    0.005997281987220049, -0.005314359907060862, 
                    0.004767884034663439, 0.008030522614717484, 
                    0.006498266477137804, -0.007888893596827984, 
                    0.006031222641468048, -0.010247541591525078`, 
                    0.009810743853449821, -0.01004841923713684, \
-0.010481332428753376`, 0.009948410093784332, 0.003932468593120575, 
                    0.0053062355145812035`, 0.0072983806021511555`, 
                    0.0024504188913851976`, 0.0012493225513026118`, 
                    0.0068211364559829235`, 0.0011222256580367684`, 
                    0.0073790280148386955`, -0.004798557609319687, \
-0.0024314159527420998`, -0.00824156403541565, -0.007433316670358181, 
                    0.005769827403128147, 
                    0.008766037411987782, -0.002885699039325118, 
                    0.0111174201592803, -0.005644379649311304, \
-0.007487501483410597, -0.0005378322093747556, -0.007264560554176569, 
                    0.0012821207055822015`, 
                    0.009010497480630875, -0.0021474668756127357`, \
-0.00701143080368638, 0.008847995661199093, -0.006587490439414978, 
                    0.006117572542279959, -0.009517904371023178, 
                    0.008901179768145084, -0.0040809460915625095`, \
-0.009270885027945042, 0.0072238994762301445`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "14" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "15" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl2k01+/Tx4nsohLRXkrInvX7mdFKSpISlSUVlSylaCchO2mRhJCoJK2S
72eGoj2V9lLRpn2PtPx09z/nfnDNOde5nlwzZ94z79eQ+eEeQd1kZGRWKP0L
HgGrxkZEBKyZofC/S2BAiJVlyP8eLf//RE8voMCRtvx2Tx/6U3INGqaORI3t
K6FqnCd+90uUrPQqhoVOquSqoIbhaWa8UxwvyO64TIFHFCBl1Qj0vNoE1d9v
we3rPrB4ynvSzimGQbMjJT8a24Sflt35i+wQtl66ijujgGQyXtNxr2pesMSb
Fq2aQtddU1krx8Wh3bqJ8rWK4b79ScGqdJO4W30sRJ0I4hPrvsCQ94H837On
oNppKV5eOZvOqNVJfl01gJRj52mwXSy87HVaOD1gO2ye6EZ7nD7WZPcYgtrP
ffis+l5YN7RUqjfvKNZu0YUReXsktU7xwr2l8/Fs+EEy6yB4/NkEdxnZcJlH
PId2vbJP2XsEzxx7Ro2zK6Hlpz+9MZwGMjnLxeJ7+viAdtJgp63sNvYafIKh
/NprH1xu6IRnDVPZRPccXRzWj+9H6IpLd8nihsmTuP+MTqi36ABX1Qmcxss4
yC1Z/PqtP8g75PGyW0zHzkXyvC2jeKQqiuGJY3GX9kbhheVbUa73S4i7Y8J5
t+phf40SuBlekzysrq/RktWj50dT4M9tc9whW4Xj8CMYrEzCDN2PoLHsO/1o
XMzXCovokeojOuWmjH0e/KF+e+tpTchgmCmREsTb4WQFZy4vOkNtwWaYMEms
Ceg2lQpneIiL/R05ysqVxo4tomXDjXh9phrK3uuB2z3bqDVjH2msuyA8tqmA
XyNGc3tmi3iv1oxLTHfAfE8dQWeiCfTcfxUO9dkv/Mqvge03EtltZz6M1GiH
5QvUeNHUNGmGkz76hQ9HgxuN8OCBJjxoOyLO6h7OqtIAaI+x4o3vR9MLVzVh
5nc7LFbKgCsz7tDzAY8o2eIBfC8cB+c+uYub3eVQS1kVI8ZMFOYvL67Jj7sC
p34thFWfk/CdTyFO1pLBjMdX6an3WdLfbgm/09fz4R1J6JzqDyG3fPm+USQr
3mtEjXUXxQkF28Ds6h9x9OgEUNo/RNxiVw2d4xTgs/FGtp5fT09jrrNilwaf
T12K35rmwP7eW9liWhsM1erBRua9Ke5pf8irLKJkSy2JJzaTc8EnCNn5E1Za
efH46nR4nJbMOf61YpetK87ruYHG+wbDhOGxaKzyRDBZ0INf7ZfB8ypbuKF/
G3wKbBN2f1vI+VX+eH3JSGHryhtkqj2Cb94ug4pzszBqkz+Pk8nDWzfMeH29
PrmVdefZRc74e81kh5idGdKkx3lk8zwRh27UgvqqQDq34xl8uWWFQvFqDH10
DL7mK8LoOjVu9fRhs54R+Pu2taRNfEK5/xXQ9GgS/cOT6UHJJdLL3S8+fOAq
migs4qQX26hU+AMV66ox+YID/6gbRV/NBfqVrYYDSkMkffEYgdVFCNUW6Ftr
ESxPECWTHgazZth/ULb9KRuMKIPiN5dBQW44h7CeGNHggHoLj1OYXR8cvM4S
72n9lAQP9+SLt0z478BIeBveAR5FS7iz4DWs6GcKD5vKIMJoLa9cYsAjnD9C
ivYo1NfYDO2QIg6R2Y/FT3tA40Kg+nTGswPTxG1TH9ExvZui96OL2PHIClv+
zKTg/0J4zApT3PZ0CQ76c5Q/PKzifXEaWPhtM6dFyOLH+ATQ8zhGgxdPoNEH
ntHltqOg9PcMBXn3wehZYyTlhsH0rukjnehsFOeeieJfb3di/O8Z0DEgTxp1
WoE9B8iyU50qbtJYSTrjnkjVrn4QbPzvwdW1VoKL+RXqcW0wBjttpKe/E0Aw
MxU8sl8KNXXHRU1ygKEnDnMOzMS3wQ1w6k1/nqCjgk8SvPmU1lRBQbtSTDh4
jBZNvACWA3bQ0MQ+nOgq0KEzSnz9mql4YkgNFUbmwKIx/nxUszc5nyuGzppe
aBz3gdrebKQ+F5rAKkZWTPk5AbpW7yTjW0vRZrMidfN3FSaJZ0S3yWPJuoc3
j1jalxcvSKRMxdNioJ0tz/mbit1PbeScqa30xW60OGnwV6or2IHtHZt4wm81
/HZ7DJw2+ABlGrn8QRJEeyYYsZLdMlwWag0/b83D2GWq/HJDPt3Yqctrn92n
WPs8stA8SIqT47E+bCQeNPZBvWlTuS0lQTjpFMFLk2x4yOcmeP6kBvzmSjhl
eTIayGRxY1YAJdTI8OwFndKV4/Jps+8Gyd5j/tCelcdaHh/BUl7CH15HQrdP
b4Tejb54vLMabhq3Ch6Nh4Ta7xro432cfJXH8vqNJtitxoNzmkpxgNlLwfez
OboUTacre7R5nUuwMPRfvUpsfFnFx4GGDFaD5OcHhRNRG6B77zwM2LIFjP2D
as700uJ3ThZs4KsFirlpVKV0n07/iuXGO658qaaT8occFgbMWCBO9q6mY/Mi
UONdupjsnC6O/RvHPnF3hd1aX4TAecp0VzMQExpLwPqYlJKmq9CZv6r0bcRJ
2FReBu+73lKfYWNxcEIpXNSdxaZTGnDMO3MYtTBXTLy+AZw6N4OLtwptXOjE
WcNvoPn5TsHxRW/yfbFSbJpTQf37rhd0N78XU+rGs8vSOJ7kpQiDbT1ZYhzN
fPsOHXxrBocTFXjpokp6U2VFpTvcycjXDZsP3ySztxN5wfN44foyQZw3uF08
k/2NPMwWwpJDZyhcJwRSPYB/bM0lebc1KH9IgWXOtkPM3xDq1ceMdef5g1uZ
KeauNiNjh/H4wMgCAx4HwroCDZyv8wyKA/6SXLlAJfWDIelbAWk82sWTteLQ
dUiJ6DB9Nkl29EB/SQAc8Qvm0o0fSWdpiuhc30kWv3tQTzTE1Cp/+urbIVr+
uAohA+wxJWF/zb01nmy5theHbHRBVXbFdquAmqSvdeL9C1Ww8JwjpsWYcpPK
Qb4V4gdUcY5Kx3gL09WV+Z7jBekorwTe4zMQdz2Q0uRj5/hCPkHU+AO8osOD
xMsWnLdcEa8UHUT3mFTJH68X9KfJFRfrGUE/QxVwWWTN35SshOTqBhyupUw3
x03iuosDcVToFRpf8NEh6O0u+m6xGsfNUSfHzY9hTaUmuM2sp2Wxs+nR8Cdk
eckMHz9wxa3OpQ77+2dLPiRpQurvavisH84XTqXBztar8OO0Ayus75J288nE
g22edPXaVsoruSt9Ft2Tq56+oxPOoTx1iA2Vu2TAhqQLUPVHFLtP6qDbciEo
2EbRvlgDbBtZQHl2lyWeH39Dj+HZAr21klpNcYbl9WWQJ6sLxt/n8GCbOMG7
7wRsnJaAnnaRtPuZPv4OC7JXXjQLt07KQoV5h4SKiGR4H+xMPZrTxYHqwXys
b5n4Me4HzTeewrN3C5g5Q47n1s6E86MFdrofJtzPTmLlj8thl5IyJmqog2H2
copMfkqWFf+RyUgfbJOoo+/7QaT/rFm8Juqz/PqpaKeigMLWIFzwuo511x+h
N0cYAvQ84c/9nv807yJ+PzkIwmZb4PoHqhyzKINPNzrC31B90Ng+irP9VmLi
zW0Smxf7BNvFZhD3RYSMyBmonjSPZzltw35jN5P/q+eQZhEqvoGhwirDQn4V
oMCmO2agpc8+qLsyCG4Nn8ojOhoo7asG/he6Auolf8Ttb5JB+vrfXPPL4et/
W2CRTSdpqBijhrwWVbmd4DLjYyAbHAEvu6lhQJAOPzy+U9g2aznPbTwEc+80
C6cks6Crcy9c+SjHY1tbIGp2b+YuLUzVeSeYHu2FxQu1aXpZKhipAL89bwaB
qxqgKTKboufPFF2t38L3IZPQcUB/FBwmokVXjdgvTJVqOpeJxjfnwAhZTfq6
4CCNad0lFMdpC4/6yvAfQRT3qOdD+KIiOpFgLWTVTcN5dheocPx2nrBCD+ed
VcAYO39I/z5B+DPijZj3+QDorcwBGnPHIfLxURqfuAivHEmhNx23Se5qCTSd
08b7CUqs2lYjvVZniLNSyqhn7VXhkH4lXPk5j59Xe9Fb/1tglsxCQ1Agq7++
JhzZYELhP81h1ZmDQq1XBvd4clHc/MNQOJt3UlAwSZNGf2qlpy9d+X3+SaoO
6C/NyLYWO5a1AHV35Jq0yxQnL8+u25heN88TGqMW8yJlI84yMBajz9mzSupA
SpjYCGsWJ9G0PFN8bFiOUxQ28+OZ6FB+3pROPYniRM8NoKsWwZvHpJD1D4B+
XfJ86HsrRb0pweQAdY7MUsRfRZk0NMASh4cpYYrKFhzi+0Pctc4HL+87I255
fRyCk2qlvx5q0YU8ZeimNxEPeavhrwmJ0G/CDch7AIK6nA551nwF8bAdet+S
Y6uj43H+8VEs5vYmv3v9WXPVIBJ8h/HO3uZi8C8jLPbKh+Et+fD43gX6Y3ML
eq++BtplUzHVui+nJW4TmzMN8EponCQvNJZuvIqBGOOv0KtQg/fuBs76t7+n
/BiLajHppPGpCSznKKN3jzRxXFGJ5HTNfbq6Oo8j15kBbF5JLdvccI16Enwp
KoGwhjyqSjFAT4Vf4pbx83hF2wweslYPMeE4VP0+zbkTB4uBvpqsZ/CNpte+
o59PU6j2qZzwZ5ILO3QVwMng/+Di6qVsLfOEBqiO4rMzFFGc80LEdAU02/sB
6s5sInPvWiEkZ75YNu0y9TzbHXXbgoQwx8OQ/fSJw8DJubjsmxrPXL+bXpfK
8bBoEPUS2sU5sg1oZaII9ftGYntJAHf2GIr9NdIpyrTDocMkGZXN3XlWqBp9
NXSmpZhAu9WjqHLNAunYBXfpjXIHBIVvQt+c52J4WqhEw+U2GdXp45x9Y2lv
LzOsKwMYaqLKq4V6an/kgmlN2fD73XfgqlLuZmoE5TVWuD/JF/eGxLO5khUu
f7BO7NcRx9lt1pBnKMJzvSGcdjZTzE79IOQZvqOSklC4MHwkTrJ7QP4QRaUp
u6mb5niKTDpE+k/NMGPgR3Bq6gFbd6XyXu7OJPpB/M1x7HZ8n+BwYDPvWVQC
9TknwWHXFjh3Npo9HrpzuKMqrozaSGP/ZlDzrIv4Luc3KSR1p6djItFqggdf
a7ATSTqOXc9ZoMq/Pr+hXgNNNUckt/f/grk2w7nw52SY7nAJloS1iksrJ1Nc
7HsqdzsEicPmUVpVD44f9RlWmNVy5ZMD8GBQHq14Ng7zLuuwa1YIzt23B46H
rhHHhmRDxrcUQM0OyDs6kcNNFFg/IR/mr6iCfsNaHfTU43l6wUMYlp5HV24/
hpzzMaxSeJjkTWcgmCwWZxrupVo/XZz+aQD7yxCd2nKJ/FbHstORqThp7wLM
upQJ13JvoN6nKI6UO0b7phtzQ5g9lqUu5Yasbdh1ch+FZ/wWdz0dRWHtO8F7
4CgePbkIvAKS6Ypcjdjit5sssn8Io71C4bFHEhjKBNPczfZoET0YzBKr4MDj
aJxzLxHlYgZRk6oj7104GuXaDqLynHWstaYQC9/+8x/5w/BwizlaZTni24sr
8V3TDJI7fEFc4zWaQ5Jug/kFKbi5vCcb1xtQfv+m1HjwN3p3Uw4UfgRjTLMa
7UrQwydZjyAzuSdv3iKD47Iy7YJD9CGu8Zh4skMF14dFop+nDE2d/0bw+uLM
E5OMhFUh9nAN06EtRIZeL6wkn844XqNhiBdtKkjdNwfE/S/hjrwCu7Xoc/8/
t6HeYzRGKoznX8dz6GpwqfS8FVPA3OtUHBfLi/q+EB56zsDIxqPgMCyLBiwN
5zjZOPjSKGKnox4vODeXzXUMSM+zkWqFlaLzMWua/60PHLpQDO/GDeWk05N5
n+p+akv4RpeaiGzOPkLTnefp4QpFPKckA67ejZDangs5hQsclKdlglDqJcbK
XyeloERxk11fyvkyDE/4Von6+EdIbThLzzLk2OTDV+oWUkWf6/piYc5OiMlR
Q1WfJp51N1acbq2Dt2aU0/lgMwoNX45lKjugM2YrhsUuBD/rfTzf5D63uL+E
LSkH6c7+SlqU3Idt+vyEJdOs8HbRE9j9zYU2SV/Ch4pRaGRzifLzqjih/gX8
eaortBlZo9l+VawwzhdvGsuKSwoCeaCLhWRC71diHQ/kQVMN+a1PMO8zk6Fl
+lO4dKKFeGaAEi5ovUjPh16HDYXxIAiKmNXrizCl5plg9noQ6qgF4ZJXr+mv
YwTq7p8Mv0/r0VZ1X3QcWyMeHRpBLzcXwM134Xy7uE5wrBkpEXI+S28X6LCd
UjrYbtclhfh0KnEyJL/dgJenJcGclZNpVbwZTd04H1cUzCbbMneymu8k3R3F
ElOzeuin9IAuefRn55PulKvUR3hWKovTBk4RHVr20Ju570mw7YHqqwKxf7E1
nv6a9I+/o8HhpAz3uTer5tE0TZLztscbkzSRP1eC49kAGvEzG240fZakrJBD
4yn6GNWYKCw0iSYbq1byizgjCTHry6c1dLGnhRmH11VQv+brgo2xPc3yUhZ0
Wt/TartN4vMR2rxffSX6tp8UniqWw0FjNd6SpITHj7ZBj88CuznNErXXm/Gs
/84Ke1z2C12XhvDTpwfosOYG1FraTjG3I1BwPgKJ17aBTlozXaqdxQ81Kh3s
r3rz5yk+HBw7ll9YHKDeb9qo7zB1TnRSwiGqsSC/VwXz7VJAZcJ66GhYi96z
toL7EXusOt4I9a/i4F3RFnpQYoCPXksErYSfwpRepyUnvF4Li6b0Q4PwCNow
6hh6/NgCq+yS2KleCU0GKcDcRXehu1kv8sm7Sp2Or4WFXc2oWbmNLGbF85Xt
+eKZ9ZfBvlgXt4cpsu+HO+LVq7uAtQpQxacblmy9gTuOH+PSLxnCsoFm/CnR
DQ1tPtPzHQ5gY/DKPvT+Z1Ibvpc2uCvwViU3dDofRVcU2ymjORrmqMRh5MKf
lDV2FN5skcEdcQ10b4MqLDiSjQ73VVhBw4115fLAoMiUZSY8AYW+i1DP0E6Y
UZQFd9LXE2fZ4qR+8tCTk0FreIoQ3HgZtjRvhdrwdD5V0AYByq9pMu7m+LF+
7DUtkk/k24ojJBtB7aqXtK/rbta9ny8ZE/tHXCY3VeJ9eZXk18nx0G3MJjJa
cZ7Gh1+wL1QIQdXD8XA/qQ/yy4+nbUMOgVn3BTRyJwmVA5QF+Zq14sJ5nWKH
/g+Ycd4I5T6uBtuH8/Gp6zPqdsWUe5eOwpU334r7XUfyuAHLaUZTvlCmp89u
peN4omY/1hhqyc97HEd/8sX1pY+h6KQHN8s1c2D5BVLvmoynQ/c7OF9No+OL
dkNKoQztmRdDXUbeQuLvyfyypzytc4mloLkXKepuqZCkWUoZ+g8p5eIgfBz/
hbSXdFE3xTjo0Wse4mFD9Hv+CVKWPKS2f3t9gUUrOGssxWm9A/BTnD8MzU4U
BkgNeKyjAk7+oEgJ32VqXc33iJVTU5kM7NFohw7ucc7FhC12XKi4Hh/L6aJc
w0th09ZItjXJIdV+5eQTPwwdLHQ53/KFmD7RDIMqn8DLdV/BWjIVG5fm4Eza
YN9NXypNbCP46R/Bn9T++aLQYmHqTDssNGqB9o+D8GZrT24OKBAfOozGSX4H
qW34ZJ5+dDd9sgQyWZRKbtsE6HRKpfKmRAhf6c7rLK6JmQ4/YOk5A55Tc024
UWCAtkfP2J+uNAXZcd25LfIoOV+y4PNu72jOsnFYpKnMvbx/08MdNphV3ZNv
X7fh0wYF9OPkMDidnglnLqjxIy9PNq5tFw5rGZLJVy3BafFg7pa6RJhwbDe0
dtdAjed6NMU9h894rhbGTOsi23fyvFTnjv0K8yQyOjMBnB+F88IJMZTUfzMZ
fBqGouY68BzqDB+3PaDxR/fyngv/8sh/C/tzOuC3XpCw13WYeMrFlH6uuQfv
Ji+nj1a10G/9CaE+OFeIL42Bzq0F4qpYDeyR8R/ljDdllQY/dBvQh7TPjsTc
+H1gUrga1vsvdzAuuEPbc+dh1KGT9MLQnMu6ydO3wrNC6tYTdEYpHpNAhiZk
J6HegHa4m7cJ3KUWZFJpC0fePiT58MW8StEC/gb+gHxtC9CI2Mzb6+PxxF15
3Lj2rBga2ARdSq2w8+BpapkQhY+P2LOuUStkDzaARxaTseLoV1i64zgNuTIc
vH7eFZ8905YalS8XW/d6wMEjG6RX3z8RJ9ndhNudCZyhtBLTAorFFdf3QfOS
bmDXtUXoWeYPOP4PldyXx/R1fSlaaos9/4ks7VU5fBzwHNp0VFG6oy+7fTpE
6WvM+SFH08EdCjxnU439xKAQ7umwk83FEjoTZEwTbwENrnwFBa2V/MbNEW90
649bZtvikxGPpD/s5fiB0iPomTmRRs/3Y7Ovv+BTrT+mTkDuNkoJB6yqhgHq
3fD5+W2ksPc0HZ9bS87Tu3PDK1Xao7OUL/9SxgOtptLYq8M4YpYh3RzYDVUH
zqffp9Uk1wfspCSXPzBibTzNrNFkj2++bKk5mie01dC7W0546v4mmD/SUPCg
bMI5o2HdXF1e4LED+7+TwLn6EUThZ4Toe0O54u4AHtd9J+61uissEoZhkn8N
HNZdzNFHesLVp1vpeI8D4gDTQunYna/Fup5O4uhp//h3ZLYQr+hHz53+QHtu
ulhR8gaaQZHn3neiA2FvaW/ibHzXex0VqipjcLACqo9KYdFxEg+a8Z52ey3G
IbuqySZci6e5PKGu2ScpfuwOMbhyL1yI/UWtelqw60Q29LMaKlbPH08HClTE
l9VJNFQ1lUY+PiWuzYoC7et3aMdaHbEq1IkzdUSKHpILhuaR7Few959Wp0tb
zmVyyodysc9yKZR/iKfJO7ZijcNw6jf4M5zwA9778D7sqV6DPuOtINpTRmo2
0IzWRmaJ6qrN8EcmkEvOWvKWL6Xi9oxsCut0xw9Pn9Izp2SQXWHI8o8O0xVP
T1yzMo4Xr9QApScx/N+vDFJrHE6qhaPpzYQEiv2uA3tvZEm+tCWyq/wgvrpE
kcdf8cUW1xw4XV0JZuud6JrDclI+ZASHx48WTG0vS1tfFQoh2mPofPII/mD0
gm7MbQQFneH4VXsnwdJimK2TCNlpKbg42wLP2yULl/a8p9i432LZ3EoYNmgT
4RZFUiwYyiqfEDVVL0OXfRf9fmnBo8aqcenyTXx93g/hd34JfTyXDjUly2hz
7MXTo+Xz+NyLUDzmmERVaUvQxq6adzcr4ePjyvz12W141WHGbxJ7YktZjnRd
nR5+DpJQztRymrg5H+fJH+IeM7PowcQeuL3Ukd+OOQhDjYZz/quNDpZTWsSr
P46CkNpOqTc+UOAVEzw/WhO7naoSXzj50b4kHTR0mkEVlS8kzWrLSbEomILm
lbNzn1eSOy1DQfahKQ8Kj+ehtxzZ/Jgnv1trzfiyVhynOpTMyhVhisdsrPmy
Ab0tt3DN+VZylkGQndEmeB14LrwoKebVB2bzmiB98dKEQGo8nStsnvLP08Tb
cN9RdQJ0uNOQkxrU+7YPaHU+g4GVi+HIl/44JtAanwxrlGqb1cJTFRlA9f5k
nPlCqOyzBsv/sZTHvXyQ7pDnrugVuKV3b+hab8I/VPLFDc1rUTZIl1f846cg
0yFY9J89TDHKoq7dp+Bvsgomd5/NB9NyhcMrbEHjuyZeta0AaYgCj9g+nsTW
zXzqW5PUoyuIw4pMMMssR5RdnCu8fROLxXeSxel/toqP/v21BYyh8l4fyK+w
rrmdlviP0wvoa/U4iP5eDp+ydYGaKihVIYjdPb9QuetIjLoTyEVH+qHvytHg
7T4T3d59kzzKnoSfi/dwruICqtc+L1YclmWVPQ/JtcCE+v7M4nbbFNoW2BuW
vngk2rZvF7z2+MFitwvC+gYFuvBYiStfXITD68Ikk3oZY8c9gZ/tahY6TiyA
d2VDePHMIPZXdhSVWq/RV19HHHgwjJq/yfOx0hSeplsJ6Sb7hQEtG3itKMuK
ekrIuiB82DkEJ2gl8N9ATdx4bCRrHNKnsKJrkNH7FBUfIeiyaYPReUFgv2gi
Wyss5CSdYZSs04e3jFPnBaqKWHVCj/sdPwS/I+IpaUYcBbprUu7STyRmzUP6
9FzieTuQVIf2oct1ZrB+dRyYT35B58ur4eMLPx63YD5usp0j1r/aJDrZXaUl
yeUQWtgbN8x3w8jxA7HIqw+3owzaZ2yCXk1T+JPCTggfnADRRtukwQPdOD2u
N55w8YF9qUWc5iAvWT+yP75zySYaZf6PwDRord4U0HUwAP9yL3i8zZQvbesN
C/8ocK9VcvDwSzL6jAunrXcFGhwzE0N6ajFqttH1uis0baUIl7oPFtwlltSZ
c4hK5gfApMsVdONTJ6jVjOeML3P4nN9RGDGrC/wy70BachtEtIzllHZzHjV9
oxC98DekWVTDSKt7cNW7BWoFJ76nYcMmBjJwZWUNaWVlshBgA82ZCbBPpphN
zJnMusVIWoKnSy5vqBa/GW4TO2aY0eS3MXC44444tjGHtcKKSccngyLqovly
SwK77utT83D6GQqwVsKfT+Twp1kNDPYTSeGSGiytSIdd3/YKs3wmUdOnBM6y
a4Dva05Q7g5Z/jp+Jvdv2AT79bJpVWaJmLBlINdG11Cu9i3oNUZW+qZmJJt2
j4LGSzEcuy5X8P6Szqq1SwRt940YWKYAqeNV8Xm3T1Qycgne3fiBnCO9Mafi
CaRI5rHXlUwKNvlMZSoh/MVOh500dvCrh8dq2Dod1HSPCnvDqum+rwJHNP7z
Qs7XpMXiErDNTKFTlet5wbI9NDLRABUqMmDxQkM0GHUWiiuM8LBLF4XOrqWd
R97Ri47tQuYaTzynMxmGf7wjHnR5BYU6l+ls/CwaskKV059cg16ZAk4Y0kH6
mytAPeKTuLHZkXtu78+2aYpiu3UJOF4eQTe6R3PoTCkdf5iMlcJG+nqjB/dX
shRfrc+Quplo8Gj3WJL9uBBv1ASK5anKUp/d2hzTNhDVk/KhLKwLwiWKtHWP
PVb/uksrn++BREt5XHxwNfwXVSLWfZuEsPMuhBy2A2uPCtoUsEFSf3w6t/su
g1EmsqLKqyZydb8HUz0SyMVhn3jlYF/c6T0CDG9W8eTdj8lorrukd3kdFANg
+U0tro1rhkK7j0LfM2chICqEE3I3Cz4j+vNvuZtCZsVWbNjTj16XzYDBCTHU
TSMKNikPpDGTXbHr36x8XKvJrWTBV/vNA79EYzgn0QNH1mb3P1a447AxF820
5vAVmjyyORdHKGzkpCd7eNF1HTb9uZtCVidSQ2cnFVxMpKzDedSQ54wLty0Q
1bxsKeH1NEq6dQYe/drEVk4fwaWwi9bdjpUedUjnYekxWPHJSPwS74UrMiPJ
4c5APLL8BRw4s1k8fkAe5D5WC7t9H8Gks1Z066cMuzUU87swOfR+lQyDf+cw
vtGGqUtk8dHZVay9dChefKmBw1+44N1Zg1jh9Xmyc9HB0IRQrpq4DQKDd9GU
hSxsUO6HDsPu0P7sLrqoVyjdbj2XR3afx3e2/autbC98f+QwY5UmH/KNJp+N
D6SHb3RH/9fdKe5AJDy5YEq5Iyfxsjki9Lres3b/R2Muc8gCX79j5NE4HG1u
TOEl4wPg2D4Jx+XGCDNu7gft32m4S7svfpvoAQN7u8Ht/udoY/UPoVttAuVs
MAKNHWX0oE2GzR0W8qovLmj9Qyrx8dwDL+z70u9nG0lhkaUkP6NIENy9YUDt
RJrXP5kULrSRkH2BNHAgD2r35eUt/vzg7XDcLNFg//ocKFs3mRendhceVj0T
z0zbJczMssYr+hHsbj+dG8JiqVamgj8PDYELyiMA3d5KzBeMhU+e4zDhvQ8b
OCzndYp/BQ0M45SXBrhPeTxYjNEm7yN7OadsNUWvG8TL+t6DRS9V6a/Ga+Gz
XwNEmQfxR/3FNGewlGYplYujzk0HOTGIIng3dW9+DTMzP5FirA7+R44YWrgd
lGWNWffwbAxzHwwLIp3ZPkID6tIVuVjWBP7s8KCMXt9hwrVQrJKvpoCCZ7T8
2T2en3NarNFLwSO1DeAutxK2r/TGqU4qYtPXc9RsskmYaBMKBy0jUHL9OLns
1MUvc3tz/6+3KTsyDGOnj+abrzIowLZOFBeLsKW7wMNnL6HmoGp8mRwBIzZu
ZY4dzzWjh7D8w5NCmIU5yLzVR4enyVKNmFmkc9oYLlq0SrZus+GZy1SgbUc1
KZbGIIdlovGjiTgz8D4EX+mktUPmiFsyo3HKygc1pQrDMaGoStj4ulLQTTtI
fRwErjYt5pb78uy1cBeY9XkNx0UDNn6hg94dPfH8pw1Y/sEBbs9sFVtiB4PD
oYEwcq0fjp5oSR9Wp/GrdnXMLr1J+rteg6HhFNZYJeXXZaMg8cg9sWuXOs8P
KcNjB8P4xMmPkFN2lHaGhtCWVFtY0vSS7qRVUWfZYq7TPAdrbqmxqoUfjlMc
x7v2F5Hdvm0w8dIcTiuRhdiLn6WanT1x5rcCYWRUBZXdvg9uRxP55fFpUPTN
Bz4sluAl2SToO8tbNP3gTnqLAqDn2whUvDOArrSm4PWtp/n2Hwc8VT8CNc2G
4Gbt6WKHcU/emC5HR16+gPxeMiwT4SR0LTXAET+P06K38+H/AB1P9U0=
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.0008130886126309633, -0.006497271358966827, 
                    0.008927817456424236, 0.00480212178081274, 
                    0.0028611740563064814`, 0.011481295339763165`, 
                    0.0026884519029408693`, -0.006711116526275873, 
                    0.010120836086571217`, -0.008848907425999641, 
                    0.009621217846870422, -0.0076544699259102345`, \
-0.002210259437561035, 0.008141604252159595, -0.008232060819864273, 
                    0.00993403885513544, -0.007570056244730949, \
-0.0071508013643324375`, -0.0006344819557853043, -0.008907775394618511, 
                    0.009465825743973255, 
                    0.0022230749018490314`, -0.008179783821105957, \
-0.007986725308001041, -0.009777403436601162, 0.006045444402843714, 
                    0.005186345428228378, -0.00488166743889451, 
                    0.008906401693820953, -0.008932607248425484, 
                    0.00968821719288826, -0.007122626528143883, 
                    0.00924422312527895, -0.00873225461691618, \
-0.010076712816953659`, -0.007481479085981846, -0.01078246533870697, 
                    0.0009913863614201546, -0.006751160603016615, 
                    0.009202666580677032, 
                    0.00873937364667654, -0.0075836386531591415`, 
                    0.009696516208350658, -0.007327461615204811, \
-0.008897144347429276, 0.009492968209087849, -0.005724977236241102, 
                    0.009322631172835827, 0.0019527438562363386`, 
                    0.008400236256420612}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "16" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "17" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXlI03EcQEVz2TwWZY0hap5TUeY8sNg+nzxQtIjyxmaaQrPDzBY4E5V0
c6WpZIInlfdRQWVLnPy+H2eSx+wgSEaZBlZU0hIqJRIy/eM9eDyP3AtJSmsr
K6tLdptKylFHqVQ5l5N5W3EqJz80JH9r2mwSsonyXT+rEtazrPKvGOJp4uqe
/uKu+zRyouUPTFBaCwPHFXh/qENubr6HSkkPbTxrkgf83ofm2niuLLMPqw9t
49TzQoi9lsdk/QPM1SiHH+piMCli6aGqiJQGAXnaLrCN7DN0Z+Q2Y3pvDLax
oZNdJ9DRYk9hPAcodxYjV/+GabRRXO+UI8VGS3H6Wxo1L+TgwUU9bJgkrEm+
HzWTKczWtYXNFCzLvmxoDWZRI8aIu+RF45HQapngdpQE4QrvMwj7VZS0PYDK
VxM5Q6mIPtUYKc4vATp9dqF41h2WNUaI+NOAqdsnuXVTJU7qHNG/fYoqXK+i
SBCAM3UObLBFz6LTFOQxooIQQQcUJkaxlz3uNOrbBexKCXlNGyFGp2aK98/h
9GI4ilYMrFmajk5L39lAZSU+6B5mc87+6P3Xlq35pVDBIB8N071QcdcXJGYe
rsFO2HPRmSZsM7FmTIHJxXbYF32EvHQuNDIuRX1QiWxZfxTbgqWY4JdAfWka
4PhvodP/HNk71YBLfCXnNm3k4o7l0nyPGNO1P1njwi2Wez4QQgvVsCq7Qa28
Ckx9Fc+mKBI/zkVQqmSShQU2wL/HkWCTPSQbEBTDo6xZGL/pQnOHe8HOpQwM
cVJY0exG64kMzi22iXR7zbAuiJArZ4a4cE8hvcgXkuuTs8zSxmevs/mUZ2mX
8d2bcKmmisa61ZBRrYXh0QPsP+TAIrY=
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.009136003442108631, -0.008896219544112682, \
-0.006578672677278519}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {3}, "$OutputSize" -> 3, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "13", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "14", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "15", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "16", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "17", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{3}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.0.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 1.2528656, "MeanInputsPerSecond" -> 
           45974.60413950227|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {-0.0001399187076857556, 
                 0.00042306402026423404`, -0.0001071471818209205, 
                 0.00016570956437206522`}, 
                "StandardDeviation" -> {0.9998468032643897, 
                 1.0001609199668149`, 0.9992662406686026, 0.9994146376212926},
                 "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 738322549587594830|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 4, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 8, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 17850, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 300, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15204678362573099`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[133505], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.2682603`6.880101399426731, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.049078130441317334`, 0.028779544396422354`], "Accuracy" -> 
            Around[0.9801927448351446, 0.016512727170852746`], 
            "EvaluationTime" -> 0.00014063832361805749`, "TestSize" -> 141, 
            "ModelMemory" -> 162384, "ModelUtility" -> 2.2102702422499347`, 
            "TrainingSize" -> 30, "TrainingTime" -> 0.5011872336272722, 
            "TrainingMemory" -> 599376, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.049078130441317334`, 0.02035021100216955]}, 
            "AccuracyHistory" -> {
              Around[0.9801927448351446, 0.011676261358393331`]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 8, "NumberOfParameters" -> 17850, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 300, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}, 
            "FinalTrainingSize" -> 171|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5004283403130206, 0.14974742587847992`], "Accuracy" -> 
                 Around[0.8801178026301961, 0.0358046187337004], 
                 "EvaluationTime" -> 0.00009663516428288374, "TestSize" -> 
                 163, "ModelMemory" -> 56280, 
                 "ModelUtility" -> -0.05899583586315216, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 3481472, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5004283403130206, 0.10588742030390304`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8801178026301961, 0.02531768870439845]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.08979209634765627, 0.03091788292799465], "Accuracy" -> 
                 Around[0.962947458457567, 0.022423428319020475`], 
                 "EvaluationTime" -> 0.00007415013318264109, "TestSize" -> 
                 141, "ModelMemory" -> 56280, "ModelUtility" -> 
                 1.6504990650620057`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.15848931924611134`, "TrainingMemory" -> 280264, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.08979209634765627, 0.021862244678316805`]}, 
                 "AccuracyHistory" -> {
                   Around[0.962947458457567, 0.015855758221829844`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1258635075127253, 0.07702996490691344], "Accuracy" -> 
                 Around[0.981331733416308, 0.03260801223563184], 
                 "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 
                 34, "ModelMemory" -> 56280, "ModelUtility" -> 
                 1.2639242409027298`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.3981071705534972, "TrainingMemory" -> 293000, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1258635075127253, 0.05446841054024027]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00023362595138949453`, 
                "MeanCrossEntropy" -> 
                Around[0.1258635075127253, 0.07702996490691344], 
                "ModelMemory" -> 56280, "TrainingMemory" -> 293000, 
                "TrainingTime" -> 1.1278648347330984`|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.131126948209086, 0.3986739424080451], "Accuracy" -> 
                 Around[0.8894222749183746, 0.03463356168215333], 
                 "EvaluationTime" -> 0.00021842851722220097`, "TestSize" -> 
                 163, "ModelMemory" -> 186192, 
                 "ModelUtility" -> -0.8845090147488787, "TrainingSize" -> 8, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 811040, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.131126948209086, 0.2819050481591038]}, 
                 "AccuracyHistory" -> {
                   Around[0.8894222749183746, 0.024489626322093186`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.08923510253062014, 0.051315941846327776`], 
                 "Accuracy" -> 
                 Around[0.9838759221490515, 0.014952362321521653`], 
                 "EvaluationTime" -> 0.00025250956246254436`, "TestSize" -> 
                 141, "ModelMemory" -> 186192, "ModelUtility" -> 
                 1.6144380482334482`, "TrainingSize" -> 30, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 798608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.08923510253062014, 0.03628585046251289]}, 
                 "AccuracyHistory" -> {
                   Around[0.9838759221490515, 0.01057291679230619]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.104839211343111, 0.07666803424870915], "Accuracy" -> 
                 Around[0.981331733416308, 0.03260801223563184], 
                 "EvaluationTime" -> 0.0007387901269145822, "TestSize" -> 34, 
                 "ModelMemory" -> 186192, "ModelUtility" -> 
                 1.4256471707189398`, "TrainingSize" -> 137, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 802168, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.104839211343111, 0.0542124869175047]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0007387901269145822, "MeanCrossEntropy" -> 
                Around[0.104839211343111, 0.07666803424870915], "ModelMemory" -> 
                186192, "TrainingMemory" -> 802168, "TrainingTime" -> 
                6.553968094990168|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              3|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              4|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              5|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              6|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 7850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              7|>, <|"Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.049078130441317334`, 0.028779544396422354`], 
                 "Accuracy" -> 
                 Around[0.9801927448351446, 0.016512727170852746`], 
                 "EvaluationTime" -> 0.00014063832361805749`, "TestSize" -> 
                 141, "ModelMemory" -> 162384, "ModelUtility" -> 
                 2.2102702422499347`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.5011872336272722, "TrainingMemory" -> 599376, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.049078130441317334`, 0.02035021100216955]}, 
                 "AccuracyHistory" -> {
                   Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7008029011887525, 0.2497815452378551], "Accuracy" -> 
                 Around[0.8962233671012853, 0.03366401181897637], 
                 "EvaluationTime" -> 0.00018485114510042032`, "TestSize" -> 
                 163, "ModelMemory" -> 162384, 
                 "ModelUtility" -> -0.40650362019593955`, "TrainingSize" -> 8,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 597968, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7008029011887525, 0.1766222244529417]}, 
                 "AccuracyHistory" -> {
                   Around[0.8962233671012853, 0.023804051039142272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15450461141267896`, 0.0962203505446876], "Accuracy" -> 
                 Around[0.9527603048448796, 0.05111045855369069], 
                 "EvaluationTime" -> 0.00046614505660620985`, "TestSize" -> 
                 34, "ModelMemory" -> 162384, "ModelUtility" -> 
                 1.056971177294075, "TrainingSize" -> 137, "TrainingTime" -> 
                 1., "TrainingMemory" -> 612256, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.15450461141267896`, 0.0680380623582953]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448796, 0.03614055183286866]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046614505660620985`, 
                "MeanCrossEntropy" -> 
                Around[0.15450461141267896`, 0.0962203505446876], 
                "ModelMemory" -> 162384, "TrainingMemory" -> 612256, 
                "TrainingTime" -> 1.749362416109024|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 2850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06644269247189084, 0.030314797862055827`], 
                 "Accuracy" -> 
                 Around[0.9801927448351446, 0.016512727170852746`], 
                 "EvaluationTime" -> 0.00007876283693199428, "TestSize" -> 
                 141, "ModelMemory" -> 60376, "ModelUtility" -> 
                 1.9309288179680384`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.3981071705534972, "TrainingMemory" -> 304904, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06644269247189084, 0.021435799138559128`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9801927448351446, 0.011676261358393331`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1179136393863263, 0.07638447323192617], "Accuracy" -> 
                 Around[0.981331733416308, 0.03260801223563184], 
                 "EvaluationTime" -> 0.00023362595138949453`, "TestSize" -> 
                 34, "ModelMemory" -> 60376, "ModelUtility" -> 
                 1.3228124913981323`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.6309573444801932, "TrainingMemory" -> 400632, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1179136393863263, 0.05401197899965731]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00023362595138949453`, 
                "MeanCrossEntropy" -> 
                Around[0.1179136393863263, 0.07638447323192617], 
                "ModelMemory" -> 60376, "TrainingMemory" -> 400632, 
                "TrainingTime" -> 1.185652469138264|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 17850|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
              10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         171, "PreprocessorEvaluationTime" -> 5.0625*^-6, 
         "PreprocessorMemory" -> 65712, "InputDimension" -> 4, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8602226312666226`17.339187341692433*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 2.042839894394685, 
             "ElapsedTimes" -> 3.4610965, "ExperimentCounts" -> 3|>, <|
            "TrainingSizes" -> 30, "TimeBudgets" -> 2.918342706278121, 
             "ElapsedTimes" -> 3.1170381, "ExperimentCounts" -> 4|>, <|
            "TrainingSizes" -> 137, "TimeBudgets" -> 4.169061008968746, 
             "ElapsedTimes" -> 6.293249100000001, "ExperimentCounts" -> 4|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
              803269050161587613|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
              3873503148790622222|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
              699058557945447889|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
              4483023431942159786|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 14.820912, 
         "MaxTrainingMemory" -> 4962008, "DataMemory" -> 26048, 
         "FunctionMemory" -> 395952, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 29, 12, 3, 52.6748485`9.47417814252059}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{46.7, 17.9, 195, 3300}, {45.4, 18.7, 188, 3525}, {
        45.2, 17.8, 198, 3950}, {46.1, 18.2, 178, 3250}, {
        45.7, 17., 195, 3650}, {49.8, 17.3, 198, 3675}, {
        46.5, 17.9, 192, 3500}, {46.9, 16.6, 192, 2700}, {
        53.5, 19.9, 205, 4500}, {50.6, 19.4, 193, 3800}, {
        49.3, 19.9, 203, 4050}, {49., 19.5, 210, 3950}, {
        47.5, 16.8, 199, 3900}, {49.6, 18.2, 193, 3775}, {
        50.9, 19.1, 196, 3550}, {50.2, 18.8, 202, 3800}, {
        47., 17.3, 185, 3700}, {45.7, 17.3, 193, 3600}, {
        52., 19., 197, 4150}, {46.4, 18.6, 190, 3450}, {
        52.2, 18.8, 197, 3450}, {52., 20.7, 210, 4800}, {
        50.8, 18.5, 201, 4450}, {51.4, 19., 201, 3950}, {
        58., 17.8, 181, 3700}, {46.6, 17.8, 193, 3800}, {
        49.5, 19., 200, 3800}, {50.2, 18.7, 198, 3775}, {
        45.6, 19.4, 194, 3525}, {51.7, 20.3, 194, 3775}, {
        50.7, 19.7, 203, 4050}, {46.2, 17.5, 187, 3650}, {
        46.4, 17.8, 191, 3700}, {46., 21.5, 194, 4200}, {
        41.1, 18.2, 192, 4050}, {39.6, 17.2, 196, 3550}, {
        42.9, 17.6, 196, 4700}, {42., 20.2, 190, 4250}, {
        37.3, 20.5, 199, 3775}, {40.5, 17.9, 187, 3200}, {
        33.1, 16.1, 178, 2900}, {36.6, 18.4, 184, 3475}, {
        37.8, 20., 190, 4250}, {34.1, 18.1, 193, 3475}, {
        42.2, 18.5, 180, 3550}, {37.8, 17.3, 180, 3700}, {
        39.2, 19.6, 195, 4675}, {39.6, 20.7, 191, 3900}, {
        40.3, 18., 195, 3250}, {37.3, 16.8, 192, 3000}, {
        38.6, 17., 188, 2900}, {41.4, 18.6, 191, 3700}, {
        38.2, 18.1, 185, 3950}, {42.1, 19.1, 195, 4000}, {
        39.1, 18.7, 181, 3750}, {38.2, 20., 190, 3900}, {
        32.1, 15.5, 188, 3050}, {40.9, 16.8, 191, 3700}, {
        38.1, 17.6, 187, 3425}, {38.6, 21.2, 191, 3800}, {
        38.1, 18.6, 190, 3700}, {41.1, 19.1, 188, 4100}, {
        39.6, 18.8, 190, 4600}, {37.5, 18.9, 179, 2975}, {
        36.2, 16.1, 187, 3550}, {41.4, 18.5, 202, 3875}, {
        39.7, 18.4, 190, 3900}, {35.9, 19.2, 189, 3800}, {
        39.2, 21.1, 196, 4150}, {36., 17.1, 187, 3700}, {
        37.9, 18.6, 172, 3150}, {36., 18.5, 186, 3100}, {
        39.2, 18.6, 190, 4250}, {36.2, 17.2, 187, 3150}, {
        38.3, 19.2, 189, 3950}, {37.7, 18.7, 180, 3600}, {
        37.2, 19.4, 184, 3900}, {38.8, 17.6, 191, 3275}, {
        39.7, 18.9, 184, 3550}, {37.8, 18.1, 193, 3750}, {
        37.6, 17., 185, 3600}, {39.7, 17.9, 193, 4250}, {
        37.2, 18.1, 178, 3900}, {38.8, 20., 190, 3950}, {
        41.1, 18.6, 189, 3325}, {39., 17.1, 191, 3050}, {
        39., 18.7, 185, 3650}, {36.7, 19.3, 193, 3450}, {
        41.1, 19., 182, 3425}, {40.7, 17., 190, 3725}, {
        42.3, 21.2, 191, 4150}, {35.5, 16.2, 195, 3350}, {
        38.6, 17.2, 199, 3750}, {42.5, 20.7, 197, 4500}, {
        39.5, 17.4, 186, 3800}, {41.1, 18.1, 205, 4300}, {
        35.6, 17.5, 191, 3175}, {44.1, 18., 210, 4000}, {
        40.6, 18.8, 193, 3800}, {40.3, 18.5, 196, 4350}, {
        42.8, 18.5, 195, 4250}, {36.3, 19.5, 190, 3800}, {
        38.9, 17.8, 181, 3625}, {40.9, 18.9, 184, 3900}, {
        36.8, 18.5, 193, 3500}, {40.2, 20.1, 200, 3975}, {
        36.5, 18., 182, 3150}, {36.4, 17., 195, 3325}, {
        40.6, 19., 199, 4000}, {41.3, 20.3, 194, 3550}, {
        37., 16.9, 185, 3000}, {37.5, 18.5, 199, 4475}, {
        45.8, 18.9, 197, 4150}, {43.1, 19.2, 197, 3500}, {
        39.8, 19.1, 184, 4650}, {37.8, 17.1, 186, 3300}, {
        50., 15.9, 224, 5350}, {45.7, 13.9, 214, 4400}, {
        46.1, 15.1, 215, 5100}, {50.8, 17.3, 228, 5600}, {
        44., 13.6, 208, 4350}, {46.4, 15., 216, 4700}, {
        48.6, 16., 230, 5800}, {50.5, 15.9, 222, 5550}, {
        48.4, 16.3, 220, 5400}, {44.5, 14.3, 216, 4100}, {
        46.2, 14.4, 214, 4650}, {46.9, 14.6, 222, 4875}, {
        49.5, 16.1, 224, 5650}, {46.2, 14.1, 217, 4375}, {
        43.4, 14.4, 218, 4600}, {45.2, 14.8, 212, 5200}, {
        50., 15.3, 220, 5550}, {42.8, 14.2, 209, 4700}, {
        46.5, 13.5, 210, 4550}, {47.2, 13.7, 214, 4925}, {
        50., 16.3, 230, 5700}, {48.4, 14.4, 203, 4625}, {
        45.3, 13.8, 208, 4200}, {55.1, 16., 230, 5850}, {
        45.2, 15.8, 215, 5300}, {50.8, 15.7, 226, 5200}, {
        49.4, 15.8, 216, 4925}, {45.4, 14.6, 211, 4800}, {
        48.1, 15.1, 209, 5500}, {49.2, 15.2, 221, 6300}, {
        47.5, 14.2, 209, 4600}, {49.6, 15., 216, 4750}, {
        46.4, 15.6, 221, 5000}, {47.5, 14., 212, 4875}, {
        53.4, 15.8, 219, 5500}, {50., 15.2, 218, 5700}, {
        48.7, 14.1, 210, 4450}, {50.4, 15.3, 224, 5550}, {
        46.1, 13.2, 211, 4500}, {47.3, 15.3, 222, 5250}, {
        43.5, 15.2, 213, 4650}, {49.8, 15.9, 229, 5950}, {
        42.7, 13.7, 208, 3950}, {45.1, 14.4, 210, 4400}, {
        47.7, 15., 216, 4750}, {47.2, 15.5, 215, 4975}, {
        45.5, 13.9, 210, 4200}, {51.1, 16.3, 220, 6000}, {
        47.5, 15., 218, 4950}, {47.6, 14.5, 215, 5400}, {
        48.8, 16.2, 222, 6000}, {45.5, 13.7, 214, 4650}, {
        46.2, 14.5, 209, 4800}, {47.8, 15., 215, 5650}, {
        49.9, 16.1, 213, 5400}}, 
      "Output" -> {
       "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo"}|>, 
    "Predictions" -> {
     "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap", "Adelie",
       "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap",
       "Chinstrap", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo"}, "LogProbabilities" -> CompressedData["
1:eJwVl3k8VVsbx0mSQubDcYY9nMg5VIZMSUiZc+gYosFwqMwqGVLIEM0pt0QD
FRoQGkTXekqGSqKJCrkVim4RinrVu+4fe39/3/3H3vuz1nrWfjYZGOURPENC
QuIKPqTw8b+OgeNaMjzQWzVqnz8mg7CHhz4VwNFaCYWtHWogvXJoxsecGOS4
XmJavngB5LWIN6fpqUJ2EHXs7v5E5CI2nO0t1IGzyhrj/9AE/FjhJiuXa4yw
h0otFIDIUtCuoE+DwsvSeK8UZfSfbzPlQ3T4X+6dy3RgZ9v/mkLyPtZjlzXI
14Xq/XBMZhkFIa3BjNQ/LIT9bONuAcgNOrtHGurApZP10fWqA/XYA0xnC2Cv
QuEuH5IEpidO/boIn2/wGnTA8fHlMu2tFPQfyTnlacRE2C+ZrRJA4PDv6Del
LLAxDe/ZmOWIKmOTC3X1FkD5Yb1xq2ICNsp32qtvXoyww0iqDijEzf87NUUb
7J9tqxFc+l899lzOam0Io5tlJREPkrOuHGQNSiDs5qJyAbQ/ih1yceGBmqX1
os6pmQj7Ges3AkBF4fv+yaBheevPfVXm8xD2hRXufOjfrpb6RpmCe9YPP/Fz
uAi7ueorPux4ONv/32wSZhridJyH8PnCj1o+VCt8PCZZS4H5jhB2uwwDYU/j
mvDBz7zIJtyTCwVNXoc+KlqgclZHofIUH1yK2+L1YT781bvOMLZpvB57FxO/
j+zUUMcFkTq8cGrxPvsgCmUkTUxVmlOw7vmceXIqFCR+9Xs+5weBsHuf+qwN
tuFRJaesaKjdndbVO6CEsG9rNuDDQPbJExJTC+CIy2NLpbGn9dib65bqQVG9
FEvnHAGKLcK3koaLEXbR+b18UF14u8bUlYIlOgvWbXVkIezjqrvxeqh3cE6o
o2FGIUxR/85F2IddpQSQ/8OjW+irAqdNvl486ZqC2nbqNkUdw/PbFO0R/5EE
RpdDUzSHRNgjB37yoeRbUSB1iwDl9uJvRQsXIexftlnrQs9dN68egoCdsV/6
dOqMEfaBXXl8UEqNPtQWSECQMMvazMIQYbdb3cEH/sTke7F5FbrUzNVZESUN
Q6PNl556UfBh2HnZ+C9ntHGocIQcYcHiifY05W4S7gzNOlrQE4h6iJxRvQMa
EKX44O6G+yT4Wx6yJS3yEMe+UNiSS0ACK4OyfCIPNjuzhaUMJ+SSbjuUKs8G
bdvC8tgMClpSn4V1ia1QSee1GxrHCMDMmz1MwLOnbz6F2FSjE72rb2nNkIbi
W88eFx2noFmz/qXhJn/U0On7e6YiFzDdDz3RBCWdQ8xd7bbIPHT8wT0LAjDd
PwUT4P5Q8bDg1nJEcbwHltiQgBlvZ0DA+rVO0Z7aK5HuXc/+17ie1uy5whG3
cCDC6W+Oo3MlWjM0UWrwUhpyE5cph36h4HUZMaPilRDNpUYeOq7kAuaQyR42
lA7LU8XXfVCUokGGqSUJb4nAN9dSmHD7/LOJFElbdLpcxu60GhfcOqUuf/xC
wlbta5mz5p5Brv7yZSEb5EDFZ4Wf+CcF0s+vSxzvikD56imhY6Xq4DrX+naK
N67zRoXsyvWVSHeHw9XBdmnYx1Z+tNKHhFl3vySttI5CXacrFvP91OFzm7dq
OJ8GB4sP9jN4dugoV3Y8UUwAtVyZNz7BhQoV6cPBW9Yj9xGf6/2JmqAbr1cn
9YKCoF/Dmu7Fdsj/SdZr//scuLbJbuKFOwkr0LuO00JL1Hh+KaMUzyNmbIwF
CcVFB8lK8Sb0WkNZ0CIi4LoBT1GxmwGc8tFYxYZs1DlpoTGYqwThSWzWO1sS
apTXDE99ckN5vk/aDI+xwKVs8L3YmISUO55exYbWqLzKcL3+Wy54r80rKjpP
QrwD+7vftA0auvY2dOl9LsR2RZFbmSRcOj1BGD9aicpkCtXefWfDy7R2y3ZH
CnYZ3T8YfHEtoiL1KkR4/Fd0+9iJPJlQGMkp6U9fiwZjfHN6dZgwZqb/JAjX
e8oh7dHCUjF6yrPSE7zgAub9hiwNOLgrSM4/3x9FH5C81zxHE8yaJBR28ig4
IRodvhpvh/Zv3KRiAxxorKhe9WgTCYZxjKXX71qjDZ/bFZ7xScC8fkGJANs1
uQYb45cjQVA9K3UpAZjd1/G4JUzUWh7krkFd/VuudjUQUPFo21TUey1IUm+t
Sw5ci+7e+dWZ7sSEgN5pHZt8Ej7uza/drbAKdT+f4PIrORA59DMjc4IA682k
Wd8iO5TZl0I33SBg7l3JTcd2cyHBqz2gLNIVpSmE9Rg2s8Fm7w2PJfj7xAos
5ikNWCFXRypLfT8BmC2a7wgQ70v3gVpbpBwoOXVHAu8fgZICdjUBGen1JV24
Xna5Vf6QGiIAM2pjOAH8D+PeFr9C0OnfTjtvX2LA6uSLDd1rKDjUs1P3U4kH
qj+RI9ccpwVvnR03Zeym4OX3osJZTbboQCbzJ1+LAEx1nYMEBKzQqJPUFKL0
Si2eVyMHMOGUEQeG5VMIX193JDGzg9OXRIDk7CL3rP0sGLqSocntc0aMkCTL
gkIC9Fsn3X4XseGMIIVVq7wMSZhv76HWEoB5oyGWhFbTgoClcBG9jc50Ld0m
C2YFAUbZi2mISYp7+2CyEH3r2TXo9mMOYL3tOUSCWrWK2YmSlegM3P6eKeSA
W9+6v5adISHt9RzK1cEaCbKMK7gsPI9ZxkqD1iTkZKO+zolU1LhxJEz6tzK8
WzTZM+xDQ3bpCVfRdBwaClb5J+6qKkxUZQfaXyJhz2RNRnXFGnTEb/aOP0u1
oEW/IDh2FwW/izqbChx8UWJEK2mI1yFmUmwtE9IfCI+4bHVGmXvEO8o+cACz
SmktF9YFhITlNzkiI783x3tT2HCqLGJDVSIJyaZy8cU1bigQjCR54yww6Mvb
JzxJQL5w7yYLTggaGnFJvqrDBUynmyINuDdpMTNwchXqIhWT55ty4bNi1gPJ
VQTE3Z9+EXRRDgqWvvtdpXsacWKS8762E3DwnNp5BSt35Gsw5CnVpgVlGrGb
92ZT0P3dd029vyMKd53SnhFGQNepb3Ptg/D+aXBW7Y+UDxpbOxp7NYAJP69O
nr0VS8GWusfZr1utUL7KDdkCFgmY3ksCCPDT/5yw7v5qFPDk/bMD7SyoHIxJ
uKWO67jqqlQezw2FsFs2ptmwcB8gTlyURUGW0lvPF+U2KMnb0+1/MgRgPro1
SkAN3PYzCbdHbT1VqV+fs2Ew8lVfbzMJX2RExbFpjuicYdmD5RNsEOa9jIh6
RcB29nhTJHJChaY75nr0cgDTdGseF7brj2bk4ftkL2qdU97LhkZGiNODahL+
Zh9nDg/HIJmLTTv2talBukdQbv03CkruKDg+7hPj8bw0Mb1SAz4feZ4UDgQM
/yWz6nV0LBoDh+ESXM8DqUfPqNFqcOZwz3CH8U80kvR5Q1rZIzReubMsRkSD
b2OJz17OIMLs0lnVj7yS9i2bekzBz5jQYw81VqPLrnyjbQQJonzRh/5BFvw9
zyya7vRGqVKmA/eeMgFStchC/NxmUsXhJaL/oyLFIKDv6PsjsmIzJHvCKtT9
DQ3KC3dtV+9lwmrOP0/tL4jQOVWXWfeNeIA58KMf78uSOIVoo+7iGkVxNZ7n
4hohw4uEB/ci1qybXIwSBMLpkH8pGPM6x9/ygwWvPXrniKSdkG1+oVvRHhoy
TFa4EZdZEHiiPeSjqTN6UzrH/qQeDzB1lONpuOB2w10tkolGh62C1d/RgOn5
iEHC2OmRYavGRSio0dtgnjENmAGemSTISf+X9NH1e6dOkO40bM5YwrX7oAFM
S8HVqQf+yGS2Ydt9fJ8IRXHr8gQWfDspv+cA6YKq5S1n5AfxAPPh10UEDMS/
msVJMEE/PKuEo+9pwCQy/Ciwk8OpnUY/z1YHPLtDw9jyTbSOIROQ4Z9tJh4+
SEesph2Kxw0zUwQk8B9ri9VuLkBVqz7slzCiAVMwjfvTwxE4afFQ2vY657FV
PMDcmW9EQsby/67oowOjATpHNpCAab/EkALXqcbJa2GGKD43bTlnnIYRvsyT
hy/wc2dUbB1pEKGBh7xvvPM8aM11fO6H+4e6j1uDlTuWIb2GhMMaavj/pSEh
+ckBCkbFOP0hUb/JUz9RGAWPIi4wHueogp/g1lFOcDyK23djqFOJhn9Vw170
1jAgdEuJz5WgEOS1cenQiQgeYPpaypAAS3FiLkIVjh6rL5WSgMlJfU4Ba3+5
o0evPuL9kNItyKLB/ovMngYNNuh+aJm2PuWA1Fzaf82/TwH/5Lm49ikG2K6+
O3PZ/GDkZWpyY7iCBsyeHD0CZJdc0covMkXvlhsMWk7SgNmphetKffd/aQHa
rBh3dSybB5jdMJcHW2c+Ib7UqKLLNj5npjVoEKVdY9W2M2D0HDO9vy8YBeV3
Pj96C/eDJhV5xhPqYGFyM+GxZhhSE2q+ufaVBsz8ETEJfok4zdVDQh/uvL0W
eJ1fszr08jULlH+pvGyOc0Qrcg+bjQfRkMnnxoQms8C/QdhPh7ogY+OqZ7FH
eYB5LHUmBXJFRsZVaTx09+b5aStfCvZE2PvZOquCqsxNdoR2IsqkGpu+x/AA
MyTYnoSL1jh9FyD90tANe3R54Cd80XrsphYMlEt7Pq4XIrkc4lxzOg8wjyiz
cX85B6c+GtVfdvq+5RUJmNoqMhRwpzZ4zq9ejGK7U9y/R/MAs+NtAg253Z9q
JKU0kVFpuvEXOQqChbKfkrOZYOI5K/dIpjda32b+tJimoa5gmwiZMsHz8iNz
+10+KNb7+KfclTR8Kl8g1f9OE+789WWfYZQvasupfck1p6Fgfqz+hnkcYGdX
XyiXt0O+W2YwXE1puP50Zu9EKQO6zuVqR18LQU7vXu/tL6YBkzErlQKGBU4l
NKpLKL2Z8YSGuDHhMmTPgYe9kZzL2bZIJCt+wxngAeaVLEsKPMNwElDoxpnE
A4YeNGCyIvF77Z++fibxM4E2mTHmDazjQVv0wvJ83JeurdNsazSyRkkpxiZp
J3H9SmzRk1Bkw9AnDnHwbwdUV7d5nJXJA8zjo38oiJTfEdfRwkIWxjlsu0EK
tm/mCUq9OXD7gMJBsekK9H9CNtAx
     "], "CountMatrix" -> {{80, 3, 0, 0}, {0, 33, 0, 0}, {0, 0, 55, 0}}, 
    "IndicesMatrix" -> {{{34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
        65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 
       100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 
       116}, {98, 113, 114}, {}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
        12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
       29, 30, 31, 32, 33}, {}, {}}, {{}, {}, {117, 118, 119, 120, 121, 122, 
       123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
       137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 
       151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 
       165, 166, 167, 168, 169, 170, 171}, {}}}, 
    "ExtendedClasses" -> {"Adelie", "Chinstrap", "Gentoo"}, "Weights" -> 
    SparseArray[Automatic, {171}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00011210877192982455`, "SingleEvaluationTime" -> 
    0.0035883625, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{3.8600733301363235`*^9, 3.860154503603342*^9, 
  3.860219046360118*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"00a9423c-52ef-4aab-9aa8-4264a8ebe8b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"measurennet", "/@", 
   RowBox[{"{", "\"\<FScore\>\"", "}"}]}], " ", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.8600733715260267`*^9, 3.8600733734563065`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"a1948ee7-5071-4638-87de-4a6b019c3ec9"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Adelie\"\>", "\[Rule]", "0.9815950920245399`"}], ",", 
        RowBox[{"\<\"Chinstrap\"\>", "\[Rule]", "0.9565217391304348`"}], ",", 
        RowBox[{"\<\"Gentoo\"\>", "\[Rule]", "1.`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8600733746700706`*^9, 3.8601546311803145`*^9, 
  3.86021905765519*^9},
 CellLabel->
  "Out[80]//TableForm=",ExpressionUUID->"a056abb2-3d27-4695-b8ff-\
5e18431a436f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"measurennet", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"{", 
     RowBox[{"377", ",", "269"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8600733955100594`*^9, 3.8600733974321117`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"d77cc669-0184-4f07-829f-f482ecddce69"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9723869466108146}, {0., 0.9824561403508771}}], 
          LineBox[{{0., 0.9824561403508771}, {0., 0.9925253340909397}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 0.9938650306748467}, {
           0.04678362573099415, 0.9938650306748467}}], 
          LineBox[{{0.04678362573099415, 0.9938650306748467}, {
           0.06298001568722976, 0.9938650306748467}}]}, {
          LineBox[{{0.04678362573099415, 0.9877300613496931}, {
           0.04678362573099415, 0.9938650306748467}}], 
          LineBox[{{0.04678362573099415, 0.9938650306748467}, {
           0.04678362573099415, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07646617909900748, 1.}, {0.09941520467836257, 1.}}], 
          LineBox[{{0.09941520467836257, 1.}, {0.12236423025771766`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.12450766073666947`, 1.}, {0.15204678362573099`, 1.}}], 
          LineBox[{{0.15204678362573099`, 1.}, {0.1795859065147925, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.17373390279456613`, 1.}, {0.2046783625730994, 1.}}], 
          LineBox[{{0.2046783625730994, 1.}, {0.23562282235163268`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21259997561784666`, 1.}, {0.24561403508771928`, 1.}}], 
          LineBox[{{0.24561403508771928`, 1.}, {0.2786280945575919, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3085694259921937, 1.}, {0.34502923976608185`, 1.}}], 
          LineBox[{{0.34502923976608185`, 1.}, {0.38148905353997, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4587284296824443, 1.}, {0.49707602339181284`, 1.}}], 
          LineBox[{{0.49707602339181284`, 1.}, {0.5354236171011814, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5115493286800488, 1.}, {0.5497076023391813, 1.}}], 
          LineBox[{{0.5497076023391813, 1.}, {0.5878658759983137, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5648027917289328, 1.}, {0.6023391812865497, 1.}}], 
          LineBox[{{0.6023391812865497, 1.}, {0.6398755708441667, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660856, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309904, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.721371905442408, 1.}, {0.7543859649122807, 1.}}], 
          LineBox[{{0.7543859649122807, 1.}, {0.7874000243821534, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7643771776483671, 1.}, {0.7953216374269005, 1.}}], 
          LineBox[{{0.7953216374269005, 1.}, {0.826266097205434, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8776357697422821, 1.}, {0.9005847953216374, 1.}}], 
          LineBox[{{0.9005847953216374, 1.}, {0.9235338209009927, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9302423322774742, 1.}, {0.9473684210526315, 1.}}], 
          LineBox[{{0.9473684210526315, 1.}, {0.9644945098277888, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9925253340909397}, 
             Offset[{3, 0}, {0., 0.9925253340909397}]}, {{0., 
             0.9925253340909397}, 
             Offset[{-3, 0}, {0., 0.9925253340909397}]}, {{0., 
             0.9723869466108146}, 
             Offset[{3, 0}, {0., 0.9723869466108146}]}, {{0., 
             0.9723869466108146}, 
             Offset[{-3, 0}, {0., 0.9723869466108146}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 0.9938650306748467}, 
             Offset[{0, 3}, {0.06298001568722976, 0.9938650306748467}]}, {{
             0.06298001568722976, 0.9938650306748467}, 
             Offset[{0, -3}, {0.06298001568722976, 0.9938650306748467}]}, {{
             0.030587235774758536`, 0.9938650306748467}, 
             Offset[{0, 3}, {0.030587235774758536`, 0.9938650306748467}]}, {{
             0.030587235774758536`, 0.9938650306748467}, 
             Offset[{0, -3}, {0.030587235774758536`, 
              0.9938650306748467}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.04678362573099415, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.04678362573099415, 1.0000000000000002`}]}, {{
             0.04678362573099415, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.04678362573099415, 1.0000000000000002`}]}, {{
             0.04678362573099415, 0.9877300613496931}, 
             Offset[{3, 0}, {0.04678362573099415, 0.9877300613496931}]}, {{
             0.04678362573099415, 0.9877300613496931}, 
             Offset[{-3, 0}, {0.04678362573099415, 
              0.9877300613496931}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12236423025771766`, 1.}, 
             Offset[{0, 3}, {0.12236423025771766`, 1.}]}, {{
             0.12236423025771766`, 1.}, 
             Offset[{0, -3}, {0.12236423025771766`, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, 3}, {0.07646617909900748, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, -3}, {0.07646617909900748, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.1795859065147925, 1.}, 
             Offset[{0, 3}, {0.1795859065147925, 1.}]}, {{0.1795859065147925, 
             1.}, Offset[{0, -3}, {0.1795859065147925, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, 3}, {0.12450766073666947`, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, -3}, {0.12450766073666947`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.23562282235163268`, 1.}, 
             Offset[{0, 3}, {0.23562282235163268`, 1.}]}, {{
             0.23562282235163268`, 1.}, 
             Offset[{0, -3}, {0.23562282235163268`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, 3}, {0.17373390279456613`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, -3}, {0.17373390279456613`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2786280945575919, 1.}, 
             Offset[{0, 3}, {0.2786280945575919, 1.}]}, {{0.2786280945575919, 
             1.}, Offset[{0, -3}, {0.2786280945575919, 1.}]}, {{
             0.21259997561784666`, 1.}, 
             Offset[{0, 3}, {0.21259997561784666`, 1.}]}, {{
             0.21259997561784666`, 1.}, 
             Offset[{0, -3}, {0.21259997561784666`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.38148905353997, 1.}, 
             Offset[{0, 3}, {0.38148905353997, 1.}]}, {{0.38148905353997, 1.},
              Offset[{0, -3}, {0.38148905353997, 1.}]}, {{0.3085694259921937, 
             1.}, Offset[{0, 3}, {0.3085694259921937, 1.}]}, {{
             0.3085694259921937, 1.}, 
             Offset[{0, -3}, {0.3085694259921937, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5354236171011814, 1.}, 
             Offset[{0, 3}, {0.5354236171011814, 1.}]}, {{0.5354236171011814, 
             1.}, Offset[{0, -3}, {0.5354236171011814, 1.}]}, {{
             0.4587284296824443, 1.}, 
             Offset[{0, 3}, {0.4587284296824443, 1.}]}, {{0.4587284296824443, 
             1.}, Offset[{0, -3}, {0.4587284296824443, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5878658759983137, 1.}, 
             Offset[{0, 3}, {0.5878658759983137, 1.}]}, {{0.5878658759983137, 
             1.}, Offset[{0, -3}, {0.5878658759983137, 1.}]}, {{
             0.5115493286800488, 1.}, 
             Offset[{0, 3}, {0.5115493286800488, 1.}]}, {{0.5115493286800488, 
             1.}, Offset[{0, -3}, {0.5115493286800488, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6398755708441667, 1.}, 
             Offset[{0, 3}, {0.6398755708441667, 1.}]}, {{0.6398755708441667, 
             1.}, Offset[{0, -3}, {0.6398755708441667, 1.}]}, {{
             0.5648027917289328, 1.}, 
             Offset[{0, 3}, {0.5648027917289328, 1.}]}, {{0.5648027917289328, 
             1.}, Offset[{0, -3}, {0.5648027917289328, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309904, 1.}, 
             Offset[{0, 3}, {0.7311885453309904, 1.}]}, {{0.7311885453309904, 
             1.}, Offset[{0, -3}, {0.7311885453309904, 1.}]}, {{
             0.6606243201660856, 1.}, 
             Offset[{0, 3}, {0.6606243201660856, 1.}]}, {{0.6606243201660856, 
             1.}, Offset[{0, -3}, {0.6606243201660856, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7874000243821534, 1.}, 
             Offset[{0, 3}, {0.7874000243821534, 1.}]}, {{0.7874000243821534, 
             1.}, Offset[{0, -3}, {0.7874000243821534, 1.}]}, {{
             0.721371905442408, 1.}, 
             Offset[{0, 3}, {0.721371905442408, 1.}]}, {{0.721371905442408, 
             1.}, Offset[{0, -3}, {0.721371905442408, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.826266097205434, 1.}, 
             Offset[{0, 3}, {0.826266097205434, 1.}]}, {{0.826266097205434, 
             1.}, Offset[{0, -3}, {0.826266097205434, 1.}]}, {{
             0.7643771776483671, 1.}, 
             Offset[{0, 3}, {0.7643771776483671, 1.}]}, {{0.7643771776483671, 
             1.}, Offset[{0, -3}, {0.7643771776483671, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9235338209009927, 1.}, 
             Offset[{0, 3}, {0.9235338209009927, 1.}]}, {{0.9235338209009927, 
             1.}, Offset[{0, -3}, {0.9235338209009927, 1.}]}, {{
             0.8776357697422821, 1.}, 
             Offset[{0, 3}, {0.8776357697422821, 1.}]}, {{0.8776357697422821, 
             1.}, Offset[{0, -3}, {0.8776357697422821, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9644945098277888, 1.}, 
             Offset[{0, 3}, {0.9644945098277888, 1.}]}, {{0.9644945098277888, 
             1.}, Offset[{0, -3}, {0.9644945098277888, 1.}]}, {{
             0.9302423322774742, 1.}, 
             Offset[{0, 3}, {0.9302423322774742, 1.}]}, {{0.9302423322774742, 
             1.}, Offset[{0, -3}, {0.9302423322774742, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQAWIQDQMs3wXvuBe8t3eoZ/zL+mW5vU1cDue+s+/tTaZf
jHEr3mkPUfXBPsV84l2XssNwvt7inT3PjE7B+RBzzsP56YZzj5aIXYbz/RNt
W7+KXIPzIebftP8PBu/tJc+mAoXuwOVBrhG/cB/OLwYreAjnp4ENeAznR4At
eALn+4Ed/AzOt2/6zfFO+QWa/S/hfNWtU6+EBb2G8yHueQPn8z41nXI94B2a
+97D+bDwzLUvErYSfA+Xh/FHw5u64Q0Abf/tVg==
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{1, 22, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
          10, 9, 8, 7, 6, 5, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21}]}}}], {{}, {}}}, {{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9723869466108146}, {0., 0.9824561403508771}}], 
          LineBox[{{0., 0.9824561403508771}, {0., 0.9925253340909397}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 0.9938650306748467}, {
           0.04678362573099415, 0.9938650306748467}}], 
          LineBox[{{0.04678362573099415, 0.9938650306748467}, {
           0.06298001568722976, 0.9938650306748467}}]}, {
          LineBox[{{0.04678362573099415, 0.9877300613496931}, {
           0.04678362573099415, 0.9938650306748467}}], 
          LineBox[{{0.04678362573099415, 0.9938650306748467}, {
           0.04678362573099415, 1.0000000000000002`}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07646617909900748, 1.}, {0.09941520467836257, 1.}}], 
          LineBox[{{0.09941520467836257, 1.}, {0.12236423025771766`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.12450766073666947`, 1.}, {0.15204678362573099`, 1.}}], 
          LineBox[{{0.15204678362573099`, 1.}, {0.1795859065147925, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.17373390279456613`, 1.}, {0.2046783625730994, 1.}}], 
          LineBox[{{0.2046783625730994, 1.}, {0.23562282235163268`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21259997561784666`, 1.}, {0.24561403508771928`, 1.}}], 
          LineBox[{{0.24561403508771928`, 1.}, {0.2786280945575919, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3085694259921937, 1.}, {0.34502923976608185`, 1.}}], 
          LineBox[{{0.34502923976608185`, 1.}, {0.38148905353997, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4587284296824443, 1.}, {0.49707602339181284`, 1.}}], 
          LineBox[{{0.49707602339181284`, 1.}, {0.5354236171011814, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5115493286800488, 1.}, {0.5497076023391813, 1.}}], 
          LineBox[{{0.5497076023391813, 1.}, {0.5878658759983137, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5648027917289328, 1.}, {0.6023391812865497, 1.}}], 
          LineBox[{{0.6023391812865497, 1.}, {0.6398755708441667, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660856, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309904, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.721371905442408, 1.}, {0.7543859649122807, 1.}}], 
          LineBox[{{0.7543859649122807, 1.}, {0.7874000243821534, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7643771776483671, 1.}, {0.7953216374269005, 1.}}], 
          LineBox[{{0.7953216374269005, 1.}, {0.826266097205434, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8267038794725722, 1.}, {0.8538011695906432, 1.}}], 
          LineBox[{{0.8538011695906432, 1.}, {0.8808984597087143, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8776357697422821, 1.}, {0.9005847953216374, 1.}}], 
          LineBox[{{0.9005847953216374, 1.}, {0.9235338209009927, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9302423322774742, 1.}, {0.9473684210526315, 1.}}], 
          LineBox[{{0.9473684210526315, 1.}, {0.9644945098277888, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9925253340909397}, 
             Offset[{3, 0}, {0., 0.9925253340909397}]}, {{0., 
             0.9925253340909397}, 
             Offset[{-3, 0}, {0., 0.9925253340909397}]}, {{0., 
             0.9723869466108146}, 
             Offset[{3, 0}, {0., 0.9723869466108146}]}, {{0., 
             0.9723869466108146}, 
             Offset[{-3, 0}, {0., 0.9723869466108146}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 0.9938650306748467}, 
             Offset[{0, 3}, {0.06298001568722976, 0.9938650306748467}]}, {{
             0.06298001568722976, 0.9938650306748467}, 
             Offset[{0, -3}, {0.06298001568722976, 0.9938650306748467}]}, {{
             0.030587235774758536`, 0.9938650306748467}, 
             Offset[{0, 3}, {0.030587235774758536`, 0.9938650306748467}]}, {{
             0.030587235774758536`, 0.9938650306748467}, 
             Offset[{0, -3}, {0.030587235774758536`, 
              0.9938650306748467}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0.04678362573099415, 1.0000000000000002`}, 
             Offset[{3, 0}, {0.04678362573099415, 1.0000000000000002`}]}, {{
             0.04678362573099415, 1.0000000000000002`}, 
             Offset[{-3, 0}, {0.04678362573099415, 1.0000000000000002`}]}, {{
             0.04678362573099415, 0.9877300613496931}, 
             Offset[{3, 0}, {0.04678362573099415, 0.9877300613496931}]}, {{
             0.04678362573099415, 0.9877300613496931}, 
             Offset[{-3, 0}, {0.04678362573099415, 
              0.9877300613496931}]}}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12236423025771766`, 1.}, 
             Offset[{0, 3}, {0.12236423025771766`, 1.}]}, {{
             0.12236423025771766`, 1.}, 
             Offset[{0, -3}, {0.12236423025771766`, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, 3}, {0.07646617909900748, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, -3}, {0.07646617909900748, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.1795859065147925, 1.}, 
             Offset[{0, 3}, {0.1795859065147925, 1.}]}, {{0.1795859065147925, 
             1.}, Offset[{0, -3}, {0.1795859065147925, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, 3}, {0.12450766073666947`, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, -3}, {0.12450766073666947`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.23562282235163268`, 1.}, 
             Offset[{0, 3}, {0.23562282235163268`, 1.}]}, {{
             0.23562282235163268`, 1.}, 
             Offset[{0, -3}, {0.23562282235163268`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, 3}, {0.17373390279456613`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, -3}, {0.17373390279456613`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.2786280945575919, 1.}, 
             Offset[{0, 3}, {0.2786280945575919, 1.}]}, {{0.2786280945575919, 
             1.}, Offset[{0, -3}, {0.2786280945575919, 1.}]}, {{
             0.21259997561784666`, 1.}, 
             Offset[{0, 3}, {0.21259997561784666`, 1.}]}, {{
             0.21259997561784666`, 1.}, 
             Offset[{0, -3}, {0.21259997561784666`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.38148905353997, 1.}, 
             Offset[{0, 3}, {0.38148905353997, 1.}]}, {{0.38148905353997, 1.},
              Offset[{0, -3}, {0.38148905353997, 1.}]}, {{0.3085694259921937, 
             1.}, Offset[{0, 3}, {0.3085694259921937, 1.}]}, {{
             0.3085694259921937, 1.}, 
             Offset[{0, -3}, {0.3085694259921937, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5354236171011814, 1.}, 
             Offset[{0, 3}, {0.5354236171011814, 1.}]}, {{0.5354236171011814, 
             1.}, Offset[{0, -3}, {0.5354236171011814, 1.}]}, {{
             0.4587284296824443, 1.}, 
             Offset[{0, 3}, {0.4587284296824443, 1.}]}, {{0.4587284296824443, 
             1.}, Offset[{0, -3}, {0.4587284296824443, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5878658759983137, 1.}, 
             Offset[{0, 3}, {0.5878658759983137, 1.}]}, {{0.5878658759983137, 
             1.}, Offset[{0, -3}, {0.5878658759983137, 1.}]}, {{
             0.5115493286800488, 1.}, 
             Offset[{0, 3}, {0.5115493286800488, 1.}]}, {{0.5115493286800488, 
             1.}, Offset[{0, -3}, {0.5115493286800488, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6398755708441667, 1.}, 
             Offset[{0, 3}, {0.6398755708441667, 1.}]}, {{0.6398755708441667, 
             1.}, Offset[{0, -3}, {0.6398755708441667, 1.}]}, {{
             0.5648027917289328, 1.}, 
             Offset[{0, 3}, {0.5648027917289328, 1.}]}, {{0.5648027917289328, 
             1.}, Offset[{0, -3}, {0.5648027917289328, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309904, 1.}, 
             Offset[{0, 3}, {0.7311885453309904, 1.}]}, {{0.7311885453309904, 
             1.}, Offset[{0, -3}, {0.7311885453309904, 1.}]}, {{
             0.6606243201660856, 1.}, 
             Offset[{0, 3}, {0.6606243201660856, 1.}]}, {{0.6606243201660856, 
             1.}, Offset[{0, -3}, {0.6606243201660856, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7874000243821534, 1.}, 
             Offset[{0, 3}, {0.7874000243821534, 1.}]}, {{0.7874000243821534, 
             1.}, Offset[{0, -3}, {0.7874000243821534, 1.}]}, {{
             0.721371905442408, 1.}, 
             Offset[{0, 3}, {0.721371905442408, 1.}]}, {{0.721371905442408, 
             1.}, Offset[{0, -3}, {0.721371905442408, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.826266097205434, 1.}, 
             Offset[{0, 3}, {0.826266097205434, 1.}]}, {{0.826266097205434, 
             1.}, Offset[{0, -3}, {0.826266097205434, 1.}]}, {{
             0.7643771776483671, 1.}, 
             Offset[{0, 3}, {0.7643771776483671, 1.}]}, {{0.7643771776483671, 
             1.}, Offset[{0, -3}, {0.7643771776483671, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8808984597087143, 1.}, 
             Offset[{0, 3}, {0.8808984597087143, 1.}]}, {{0.8808984597087143, 
             1.}, Offset[{0, -3}, {0.8808984597087143, 1.}]}, {{
             0.8267038794725722, 1.}, 
             Offset[{0, 3}, {0.8267038794725722, 1.}]}, {{0.8267038794725722, 
             1.}, Offset[{0, -3}, {0.8267038794725722, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9235338209009927, 1.}, 
             Offset[{0, 3}, {0.9235338209009927, 1.}]}, {{0.9235338209009927, 
             1.}, Offset[{0, -3}, {0.9235338209009927, 1.}]}, {{
             0.8776357697422821, 1.}, 
             Offset[{0, 3}, {0.8776357697422821, 1.}]}, {{0.8776357697422821, 
             1.}, Offset[{0, -3}, {0.8776357697422821, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9644945098277888, 1.}, 
             Offset[{0, 3}, {0.9644945098277888, 1.}]}, {{0.9644945098277888, 
             1.}, Offset[{0, -3}, {0.9644945098277888, 1.}]}, {{
             0.9302423322774742, 1.}, 
             Offset[{0, 3}, {0.9302423322774742, 1.}]}, {{0.9302423322774742, 
             1.}, Offset[{0, -3}, {0.9302423322774742, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[
           {GrayLevel[1], EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], 
            AbsoluteThickness[1.]}], 
            DiskBox[{0, 0}, Offset[{2., 2.}, {0., 0.}]]}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBWJGIGZiQACW74J33Ave2zvUM/5l/bLc3iYuh3Pf2ff2
JtMvxrgV77SHqPpgn2I+8a5L2WE4X2/xzp5nRqfgfIg55+H8dMO5R0vELsP5
/om2rV9FrsH5EPNv2v8Hg/f2kmdTgUJ34PIg14hfuA/nF4MVPITz08AGPIbz
I8AWPIHz/cAOfgbn2zf95nin/ALN/pdwvurWqVfCgl7D+RD3vIHzeZ+aTrke
8A7Nfe/hfADpsXLT
       "]]}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9824561403508771}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.982", "0.010"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9824561403508771, 0.010069193740062524`]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.02785460912426389`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9824561403508771, 0.010069193740062524`]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.02785460912426389}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.04678362573099415, 0.9938650306748467}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9938650306748467, 0.006134969325153594]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.047", "0.016"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.04678362573099415, 0.016196389956235614`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9655076718819573`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9938650306748467, 0.006134969325153594]}], 
          Row[{"RejectionRate = ", 
            Around[0.04678362573099415, 0.016196389956235614`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9655076718819573}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.09941520467836257, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.099", "0.023"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.09941520467836257, 0.02294902557935509]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9941602897517956`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.09941520467836257, 0.02294902557935509]}], 
          Row[{IndeterminateThreshold, " = ", 0.9941602897517956}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.15204678362573099`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.152", "0.028"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.15204678362573099`, 0.027539122889061518`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9971484425997591`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.15204678362573099`, 0.027539122889061518`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9971484425997591}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.2046783625730994, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.205", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.2046783625730994, 0.030944459778533263`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9976997114630656`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.2046783625730994, 0.030944459778533263`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9976997114630656}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.24561403508771928`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.246", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.24561403508771928`, 0.03301405946987261]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9984436483338013`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.24561403508771928`, 0.03301405946987261]}], 
          Row[{IndeterminateThreshold, " = ", 0.9984436483338013}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.2982456140350877, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.298", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.2982456140350877, 0.03508771929824568]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9987409226408053`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.2982456140350877, 0.03508771929824568]}], 
          Row[{IndeterminateThreshold, " = ", 0.9987409226408053}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.34502923976608185`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.35", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.34502923976608185`, 0.03645981377388813]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9990179579427828`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.34502923976608185`, 0.03645981377388813]}], 
          Row[{IndeterminateThreshold, " = ", 0.9990179579427828}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.39766081871345027`, 0.9999999999999999}}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9999999999999999`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.40", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.39766081871345027`, 0.03753638955761696]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9991463546887408`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9999999999999999}], 
          Row[{"RejectionRate = ", 
            Around[0.39766081871345027`, 0.03753638955761696]}], 
          Row[{IndeterminateThreshold, " = ", 0.9991463546887408}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.4502923976608187, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.45", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.4502923976608187, 0.038158273659132456`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.999221106937713`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.4502923976608187, 0.038158273659132456`]}], 
          Row[{IndeterminateThreshold, " = ", 0.999221106937713}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.49707602339181284`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.50", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.49707602339181284`, 0.03834759370936854]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9993271118292898`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.49707602339181284`, 0.03834759370936854]}], 
          Row[{IndeterminateThreshold, " = ", 0.9993271118292898}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5497076023391813, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.55", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5497076023391813, 0.03815827365913248]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9994137346027455`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5497076023391813, 0.03815827365913248]}], 
          Row[{IndeterminateThreshold, " = ", 0.9994137346027455}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6023391812865497, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6023391812865497, 0.037536389557617005`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9994887581592656`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6023391812865497, 0.037536389557617005`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9994887581592656}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6549707602339181, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.65", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6549707602339181, 0.0364598137738882]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9995363330009431`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6549707602339181, 0.0364598137738882]}], 
          Row[{IndeterminateThreshold, " = ", 0.9995363330009431}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.695906432748538, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.696", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.695906432748538, 0.035282112582452445`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9996837188926261`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.695906432748538, 0.035282112582452445`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9996837188926261}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.7543859649122807, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               TemplateBox[{"0.754", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.7543859649122807, 0.03301405946987272]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9997621271892985`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.7543859649122807, 0.03301405946987272]}], 
          Row[{IndeterminateThreshold, " = ", 0.9997621271892985}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.7953216374269005, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.795", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.7953216374269005, 0.030944459778533398`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998104992560691`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.7953216374269005, 0.030944459778533398`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998104992560691}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8538011695906432, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.854", "0.027"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8538011695906432, 0.027097290118071025`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998613873604197`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8538011695906432, 0.027097290118071025`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998613873604197}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9005847953216374, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.901", "0.023"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9005847953216374, 0.022949025579355267`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998920998568072`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.9005847953216374, 0.022949025579355267`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998920998568072}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9473684210526315, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.947", "0.017"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9473684210526315, 0.017126088775157276`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999467361999553`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.9473684210526315, 0.017126088775157276`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999467361999553}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9941520467836257, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"1.`", "\[Infinity]"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[1., 
                DirectedInfinity[1]]]}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9941520467836257, 0.005847953216374488]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999954821016865`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[1., 
             DirectedInfinity[1]]}], 
          Row[{"RejectionRate = ", 
            Around[0.9941520467836257, 0.005847953216374488]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999954821016865}]}], 
        "Tooltip"]& ]}}, {{}, {}}}},
  AspectRatio->Full,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9708528880891955},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->{377, 269},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1.0000000000000002`}, {0.9708528880891955, 
    1.0000000000000002`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8600733987344265`*^9, 3.860219065461173*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"02858d98-77c9-42d7-9ac4-4c968f7d22e3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Support Vector Machine :", "Subsection",
 CellChangeTimes->{{3.8601531725299664`*^9, 
  3.8601531813988767`*^9}},ExpressionUUID->"ab42dd64-5465-4963-88e5-\
1fffc5b5c4f9"],

Cell["\<\
In the SVM algorithm, we plot each observation as a point in n - dimensional \
space (where n is the number of features in this case 4) . We then perform \
our classification by finding a hyperplane that differentiates between the \
classes .\
\>", "Text",
 CellChangeTimes->{{3.8601547399515867`*^9, 
  3.860154880271594*^9}},ExpressionUUID->"eea57385-f2c4-48a6-aa8b-\
570663ca6f14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"svm", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingData", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.860072968312928*^9, 3.860072981533518*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"3545a0fd-3ff0-4c4b-bca1-2bf903a54b91"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                    Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Numerical", "Numerical", "Numerical", 
                    "Numerical"}, 10], "Tooltip"]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Adelie\"", "\"Chinstrap\"", "\"Gentoo\""},
                    "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["171", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 171, "ClassNumber" -> 3, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>, 
           "f3" -> <|"Type" -> "Numerical"|>, 
           "f4" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 4|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Numerical", "Numerical", "Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 171, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.004085090746150243, -0.3612744103301966, 
                   0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                   0.984330125195285}, {
                   0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                   0.01600787497426431, 
                   0.001811504406973886, -0.00020032542764021215`}}, 
                  "Precisions" -> {1.4588368163658181`*^-6, 
                   0.0215411092967585, 0.05960642825620558, 
                   0.4279510542010826}, "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                   "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                   "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 4, 
                   "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   2758349319774705302|>], "InputDimension" -> 0, 
                "OutputDimension" -> 4, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.0472018, "MaxTrainingMemory" -> 206864, 
                  "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 29, 12, 4, 29.679321`9.225028871044378}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                   "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                   0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[16.53064340630656, 0.593442758765043], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 31956639518117771|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Mean" -> {44.13157894736843, 16.94970760233918, 
              202.20467836257308`, 4241.666666666666}, 
             "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
              14.416088368344866`, 827.828308046025}, 
             "Output" -> <|
              "(f1f2f3f4)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
             "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             3699363863601728199, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {3}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`, 
        "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {3, 4}, 0., {
      1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
    "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
    "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "SVMParameters" -> <|
       "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
        0.09907105357994911, "SoftMarginParameter" -> 3, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100|>, 
      "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJwBkQJu/SFib1JlAgAAABQAAAAEAAAA6XTmb42a0L+5eD4nBnLmP95TBgPz
Gty/ZjQxUrEGyb/LLOEmqGfhv7cataA6bdU/ac1sTxJz9r8HlMuALyP0v57Q
LZCF7MS/8yWHMMlq6T85V3B316nmv8Rls6Y7aMa/MKW9aEob6r/t6tRwDVG/
v/S34sKSyPq/9Hjn1z8d87++nAE0GcFtv9t70IbFePY/qOSrrX732r8aNsHy
qqLHP50Vpj9SIOm/63qQiU2r2D/RfZH6lVTkvw3OnU+EL/S/VEqhO7U80T/j
urnRmav7P3SbFQpZKOm/zGJwUiC22z9dkN47nQ/kvyOf9foP4b8/PR6e3SHx
8L8NPq6sMlvtv9qKvAn2Z92/dLHkEKql6T84XdZl8j6zvyU/6z2ePdK/XkIN
UM0w8r/gIG0P2Tvfv4UoxqeNT/W/nHKiXeqd9r8tvGYmqFjmv+ZUIOf+WrQ/
MDQmoAGY5L+TnpCI3F3wv0B8mdz/I9U/1jbGp9cQ8D+zWcvE/wzgv/RS2h/m
rrq/MtTmHpxu0r8chF91oVe+v7J3aPB11PC/xrGswWVE8b+E4Hb285jivyTz
3IgqQ8e/Uh7bGjDR8L/F1QWmLUj0v24NqeSrwes/MqjTgBjl9T92gj7zd3Ll
P5jSZWn5Pa8/+IPDw9Bt7D/A9Ut7Z7jkP8iSYXty0t+/nEP8pLA2yT+NIpmv
KtrEv3RTV0VbPci/2J4LB4Lw8L8idSAF7df5v9iWpYTGEtO/DNgLPA8VyD/q
B3K/rIb3v/rFfztvs+i/Fdq7dDY40r9Of+MmYEPHP+Ulu98Ey/C/Cd8GqkEe
8b84xpcqCZC7v6PgxjxFNOM/8PX7UNTWjr/ws2rnPyfwvzt3aiI=
          "], 
         "supportVectorCoefficients" -> {3., 3., 3., 2.4409819055042505`, 
          2.7845529724751645`, 1.512425516072857, 1.5805619118456724`, 3., 
          0.810512654644151, 1.6395444463564925`, 
          3., -3., -3., -3., -1.9607600226439101`, -2.8078193842546777`, -3., \
-3., -3., -3.}, "rho" -> -0.12005452785740509`|>, <|
        "supportVectors" -> {{-0.5879177369349873, 1.0086616543051536`, 
          0.4005237139385449, 
          0.06535142425524958}, {-1.0741814302656365`, -0.2345462068961635, \
-0.2867753741155161, -0.4968681063136605}, {-0.15905005520252533`, 
          1.052363842394187, -0.36497969715892464`, 0.6453067785049251}, {
          2.741130071167883, 0.02582905290160658, 1.9315985357275745`, 
          2.189221461904194}, {0.05474373715722915, 0.18402376928278347`, 
          1.1556595765632538`, 
          1.2176770243228248`}, {-0.1740643260529336, -1.2654747492512521`, 
          0.3979429109694211, 0.2593555712954335}}, 
         "supportVectorCoefficients" -> {1.648444727113054, 
          1.8602889531483022`, 
          1.4035941393170297`, -0.07430486118616442, -2.538901394942617, \
-2.299121563449605}, "rho" -> 0.056362263088123254`|>, <|
        "supportVectors" -> {{
          0.709083712263839, -0.2777312391567922, -0.21678296758440288`, \
-1.0986380882895284`}, {-0.5811710180050942, -0.1817372482563765, \
-1.0510712670383282`, -1.2676216588273388`}, {0.8673915353796653, 
          1.3684315712257669`, 0.6702232123244147, 0.06101970111459315}, {
          0.8884052108297729, 0.6475102813853297, -0.4972196774381641, 
          0.19698150688102778`}, {2.741130071167883, 0.02582905290160658, 
          1.9315985357275745`, 2.189221461904194}, {
          0.29402555187648394`, -1.1982948594966463`, 
          0.5489468681979804, -0.052542823947628575`}, {0.05474373715722915, 
          0.18402376928278347`, 1.1556595765632538`, 1.2176770243228248`}}, 
         "supportVectorCoefficients" -> {2.4564061743206382`, 
          0.41300393635485644`, 1.804481647616439, 
          0.20867782278051425`, -0.6216817591353707, -3., \
-1.2608878219370767`}, "rho" -> 0.0877389339573849|>}, 
      "ProbabilityCoefficients" -> {{-6.9511566162109375`, 
       1.5748993158340454`}, {-7.1715569496154785`, 
       0.11650567501783371`}, {-7.00684118270874, 0.5728990435600281}}, 
      "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
         "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "SupportVectorMachine", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "KernelType" -> <|
         "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
        "GammaScalingParameter" -> <|
         "Value" -> 0.09907105357994911, "Options" -> <||>|>, 
        "SoftMarginParameter" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "MulticlassStrategy" -> <|
         "Value" -> "OneVersusOne", "Options" -> <||>|>, 
        "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
        "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[193329], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.132259`6.57297022820959, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.10134249392450378`, 0.03933042325739837], "Accuracy" -> 
         Around[0.981331733416308, 0.01630400611781592], "EvaluationTime" -> 
         0.00006881407037243174, "TestSize" -> 68, "ModelMemory" -> 18728., 
         "ModelUtility" -> 1.5213385763209009`, "TrainingSize" -> 137, 
         "TrainingTime" -> 0.039810717055349706`, "TrainingMemory" -> 
         147117.3333333333, "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
           Around[0.11020126138785548`, 0.05497918072824403], 
           Around[0.09248372646115208, 0.053438328114023076`]}, 
         "AccuracyHistory" -> {
           Around[0.981331733416308, 0.023057346572829186`], 
           Around[0.981331733416308, 0.023057346572829186`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
           "GammaScalingParameter" -> 0.09907105357994911, 
           "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}, 
         "FinalTrainingSize" -> 171|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.09907105357994911|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5345922492736722, 0.08867592836794873], "Accuracy" -> 
              Around[0.7860196413292989, 0.045301653578056586`], 
              "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
              "ModelMemory" -> 14888, "ModelUtility" -> -0.09954240834164285, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 262168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5345922492736722, 0.06270335027698908]}, 
              "AccuracyHistory" -> {
                Around[0.7860196413292989, 0.032033106444007635`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.12278076394644068`, 0.04778746331345336], "Accuracy" -> 
              Around[0.962947458457567, 0.022423428319020475`], 
              "EvaluationTime" -> 0.00006377974497735949, "TestSize" -> 141, 
              "ModelMemory" -> 17192, "ModelUtility" -> 1.3292371838600485`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 132792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.12278076394644068`, 0.03379083936464623]}, 
              "AccuracyHistory" -> {
                Around[0.962947458457567, 0.015855758221829844`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10134249392450378`, 0.03933042325739837], "Accuracy" -> 
              Around[0.981331733416308, 0.01630400611781592], 
              "EvaluationTime" -> 0.00006881407037243174, "TestSize" -> 68, 
              "ModelMemory" -> 18728., "ModelUtility" -> 1.5213385763209009`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.039810717055349706`, 
              "TrainingMemory" -> 147117.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.11020126138785548`, 0.05497918072824403], 
                Around[0.09248372646115208, 0.053438328114023076`]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`], 
                Around[0.981331733416308, 0.023057346572829186`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006881407037243174, "MeanCrossEntropy" -> 
             Around[0.10134249392450378`, 0.03933042325739837], "ModelMemory" -> 
             18728., "TrainingMemory" -> 147117.3333333333, "TrainingTime" -> 
             0.24921698052217842`|>, "Index" -> 1|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.04284255371261575|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.14189306452613357`, 0.09068217994015305], "Accuracy" -> 
              Around[0.9527603048448795, 0.05111045855369065], 
              "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 25384, "ModelUtility" -> 1.1392392385571801`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 151232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.14189306452613357`, 0.06412198436846094]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1789743338750649, 0.04451961839550031], "Accuracy" -> 
              Around[0.9499148849786256, 0.025879802441676963`], 
              "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 141,
               "ModelMemory" -> 19240, "ModelUtility" -> 0.978803960807462, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              131576, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.1789743338750649, 0.03148012406329563]}, 
              "AccuracyHistory" -> {
                Around[0.9499148849786256, 0.01829978380227795]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000056469102206169774`, "MeanCrossEntropy" -> 
             Around[0.1789743338750649, 0.04451961839550031], "ModelMemory" -> 
             19240, "TrainingMemory" -> 131576, "TrainingTime" -> 
             0.22111872336272723`|>, "Index" -> 2|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.13231134821540158`|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.1501046163281339, 0.09794541338406397], "Accuracy" -> 
              Around[0.9527603048448795, 0.05111045855369065], 
              "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 25896, "ModelUtility" -> 1.0806023140541448`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 157368, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1501046163281339, 0.06925786598999126]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.19417513180260854`, 0.04483330013928714], "Accuracy" -> 
              Around[0.9499148849786256, 0.025879802441676963`], 
              "EvaluationTime" -> 0.00003196559394665573, "TestSize" -> 141, 
              "ModelMemory" -> 20264, "ModelUtility" -> 0.900693835828528, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 125448, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.19417513180260854`, 0.03170193055146172]}, 
              "AccuracyHistory" -> {
                Around[0.9499148849786256, 0.01829978380227795]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00003196559394665573, "MeanCrossEntropy" -> 
             Around[0.19417513180260854`, 0.04483330013928714], "ModelMemory" -> 
             20264, "TrainingMemory" -> 125448, "TrainingTime" -> 
             0.26539496877952984`|>, "Index" -> 3|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.13510820499964576`|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.1348595933591114, 0.08166270446618575], "Accuracy" -> 
              Around[0.9527603048448795, 0.05111045855369065], 
              "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 39208, "ModelUtility" -> 1.1960443654318684`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 157392, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1348595933591114, 0.0577442520980729]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.49706163886598287`, 0.07773889568702189], "Accuracy" -> 
              Around[0.7881020927581578, 0.048510939104400755`], 
              "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 141,
               "ModelMemory" -> 22312, "ModelUtility" -> -0.02491639091439868,
               "TrainingSize" -> 30, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              124992, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.49706163886598287`, 0.05496970030224683]}, 
              "AccuracyHistory" -> {
                Around[0.7881020927581578, 0.03430241400244943]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000050662052239030834`, "MeanCrossEntropy" -> 
             Around[0.49706163886598287`, 0.07773889568702189], "ModelMemory" -> 
             22312, "TrainingMemory" -> 124992, "TrainingTime" -> 
             0.22111872336272723`|>, "Index" -> 4|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.1553730884521598|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.10428786915591529`, 0.03922460547321318], "Accuracy" -> 
              Around[0.981331733416308, 0.01630400611781592], 
              "EvaluationTime" -> 0.00009300816647554056, "TestSize" -> 68, 
              "ModelMemory" -> 21288., "ModelUtility" -> 1.494914076485661, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.0696614567691945, 
              "TrainingMemory" -> 170632., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.11219250503241099`, 0.055368897642941624`], 
                Around[0.0963832332794196, 0.05335485673464006]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`], 
                Around[0.981331733416308, 0.023057346572829186`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.616247621403625, 0.10176799561913254`], "Accuracy" -> 
              Around[0.7860196413292989, 0.045301653578056586`], 
              "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 163, 
              "ModelMemory" -> 14888, "ModelUtility" -> -0.24154475613337156`,
               "TrainingSize" -> 8, "TrainingTime" -> 0.03162277660168379, 
              "TrainingMemory" -> 110624, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.616247621403625, 0.07196083981005147]}, 
              "AccuracyHistory" -> {
                Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00003481082264833104, "MeanCrossEntropy" -> 
             Around[0.616247621403625, 0.10176799561913254`], "ModelMemory" -> 
             14888, "TrainingMemory" -> 110624, "TrainingTime" -> 
             0.12373640475807379`|>, "Index" -> 5|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.04652120815408778|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.855122971089877, 0.10794403486293765`], "Accuracy" -> 
              Around[0.7375398831019185, 0.04859946995048178], 
              "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
              "ModelMemory" -> 15144, "ModelUtility" -> -0.561579681521574, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.07943282347242814, 
              "TrainingMemory" -> 151688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.855122971089877, 0.0763279590402203]}, 
              "AccuracyHistory" -> {
                Around[0.7375398831019185, 0.03436501476405751]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3613812484897011, 0.05696484694559005], "Accuracy" -> 
              Around[0.7881020927581578, 0.048510939104400755`], 
              "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 141,
               "ModelMemory" -> 20776, "ModelUtility" -> 0.29362504649114296`,
               "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 123952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3613812484897011, 0.04028022956448051]}, 
              "AccuracyHistory" -> {
                Around[0.7881020927581578, 0.03430241400244943]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.12360967476307833`, 0.04134538987553945], "Accuracy" -> 
              Around[0.9670460191305937, 0.024123170746064293`], 
              "EvaluationTime" -> 0.00008025539728615234, "TestSize" -> 68, 
              "ModelMemory" -> 32040., "ModelUtility" -> 1.3327136731642935`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.04324671915780888, 
              "TrainingMemory" -> 153488., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.13210523096026208`, 0.06055292622107441], 
                Around[0.11511411856589457`, 0.054389127799587815`]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864], 
                Around[0.981331733416308, 0.023057346572829186`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00008025539728615234, "MeanCrossEntropy" -> 
             Around[0.12360967476307833`, 0.04134538987553945], "ModelMemory" -> 
             32040., "TrainingMemory" -> 153488., "TrainingTime" -> 
             0.13341230504896331`|>, "Index" -> 6|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.2629933443766388|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.10269229416573603`, 0.07550391386893379], "Accuracy" -> 
              Around[0.981331733416308, 0.03260801223563184], 
              "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 20776, "ModelUtility" -> 1.445668451573836, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 205232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10269229416573603`, 0.053389329502848096`]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.46692869878335097`, 0.08347075118845407], "Accuracy" -> 
              Around[0.7860196413292989, 0.045301653578056586`], 
              "EvaluationTime" -> 0.00004382422923744385, "TestSize" -> 163, 
              "ModelMemory" -> 15144, "ModelUtility" -> 0.03329327176323782, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 111736, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.46692869878335097`, 0.05902273419609094]}, 
              "AccuracyHistory" -> {
                Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00004382422923744385, "MeanCrossEntropy" -> 
             Around[0.46692869878335097`, 0.08347075118845407], "ModelMemory" -> 
             15144, "TrainingMemory" -> 111736, "TrainingTime" -> 
             0.11819504952737522`|>, "Index" -> 7|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.3399229866674369|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.11315751444753541`, 0.07790552967744314], "Accuracy" -> 
              Around[0.981331733416308, 0.03260801223563184], 
              "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
              "ModelMemory" -> 25896, "ModelUtility" -> 1.3568132051412571`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 151832, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.11315751444753541`, 0.05508752832684987]}, 
              "AccuracyHistory" -> {
                Around[0.981331733416308, 0.023057346572829186`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.14940335384418604`, 0.04594640427389665], "Accuracy" -> 
              Around[0.9629474584575669, 0.022423428319020482`], 
              "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 141,
               "ModelMemory" -> 20776, "ModelUtility" -> 1.1482591060222105`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 167664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.14940335384418604`, 0.03248901403321089]}, 
              "AccuracyHistory" -> {
                Around[0.9629474584575669, 0.015855758221829847`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000050662052239030834`, "MeanCrossEntropy" -> 
             Around[0.14940335384418604`, 0.04594640427389665], "ModelMemory" -> 
             20776, "TrainingMemory" -> 167664, "TrainingTime" -> 
             0.3211354592735776|>, "Index" -> 8|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.3450433037666898|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1745310820007064`, 0.09515238964789184], "Accuracy" -> 
              Around[0.3920664103869573, 0.05392741362697978], 
              "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
              "ModelMemory" -> 14888, "ModelUtility" -> -0.8700983824521907, 
              "TrainingSize" -> 8, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 112280, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1745310820007064`, 0.06728289996612896]}, 
              "AccuracyHistory" -> {
                Around[0.3920664103869573, 0.03813243986748923]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6252248224206084, 0.06508281549491828], "Accuracy" -> 
              Around[0.7881020927581578, 0.048510939104400755`], 
              "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 141, 
              "ModelMemory" -> 22312, "ModelUtility" -> -0.2441187527253822, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 169760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6252248224206084, 0.046020500175169614`]}, 
              "AccuracyHistory" -> {
                Around[0.7881020927581578, 0.03430241400244943]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.12228096651947476`, 0.04006466605819099], "Accuracy" -> 
              Around[0.9527603048448796, 0.02555522927684533], 
              "EvaluationTime" -> 0.00008663178188084646, "TestSize" -> 68, 
              "ModelMemory" -> 41256., "ModelUtility" -> 1.3448028885831675`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.1, "TrainingMemory" -> 
              224469.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.12043306576817277`, 0.05598749618467007], 
                Around[0.12412886727077675`, 0.057232425338394885`]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864], 
                Around[0.9527603048448797, 0.03614055183286865]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00008663178188084646, "MeanCrossEntropy" -> 
             Around[0.12228096651947476`, 0.04006466605819099], "ModelMemory" -> 
             41256., "TrainingMemory" -> 224469.3333333333, "TrainingTime" -> 
             0.1749362416109024|>, "Index" -> 9|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.337149860742572|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.13747518666522562`, 0.05285926469738658], "Accuracy" -> 
              Around[0.9629474584575669, 0.022423428319020482`], 
              "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 141, 
              "ModelMemory" -> 19240, "ModelUtility" -> 1.2170681054692807`, 
              "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
              "TrainingMemory" -> 136144, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.13747518666522562`, 0.037377144516056726`]}, 
              "AccuracyHistory" -> {
                Around[0.9629474584575669, 0.015855758221829847`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.12256094814173431`, 0.08156935743518842], "Accuracy" -> 
              Around[0.9527603048448795, 0.05111045855369065], 
              "EvaluationTime" -> 0.000058684185734378794`, "TestSize" -> 34, 
              "ModelMemory" -> 22824, "ModelUtility" -> 1.2810247790707816`, 
              "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 149040, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.12256094814173431`, 0.05767824577945106]}, 
              "AccuracyHistory" -> {
                Around[0.9527603048448795, 0.03614055183286864]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000058684185734378794`, "MeanCrossEntropy" -> 
             Around[0.12256094814173431`, 0.08156935743518842], "ModelMemory" -> 
             22824, "TrainingMemory" -> 149040, "TrainingTime" -> 
             0.18844948785844123`|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["RadialBasisFunction"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 171, 
      "PreprocessorEvaluationTime" -> 4.5640625*^-6, "PreprocessorMemory" -> 
      65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8602226723542023`17.339187346314993*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.4377651952892555, 
          "ElapsedTimes" -> 0.6307043999999999, "ExperimentCounts" -> 5|>, <|
         "TrainingSizes" -> 30, "TimeBudgets" -> 0.625378850413222, 
          "ElapsedTimes" -> 1.2281245, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 137, "TimeBudgets" -> 0.8933983577331741, 
          "ElapsedTimes" -> 0.9294075, "ExperimentCounts" -> 14|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
           803269050161587613|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
           3873503148790622222|>, 
         "f3" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
           699058557945447889|>, 
         "f4" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
           4483023431942159786|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 3.2400082, 
      "MaxTrainingMemory" -> 1115336, "DataMemory" -> 26048, "FunctionMemory" -> 
      257672, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 29, 12, 4, 32.8662657`9.269325263763646}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8600729853850183`*^9, 3.8601548871681514`*^9, 
  3.8602190729138002`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"3c9cd8be-5cde-4263-a110-75b238d4acea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"svm", ",", "\"\<MethodDescription\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8600730132458105`*^9, 3.8600730148749557`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"3fa0039f-5f29-41c9-9235-6b434d20a72c"],

Cell[BoxData[
 TagBox[
  PanelBox["\<\"The support vector machine classifier separates the training \
data into two classes using a \\n\\t\\t\\tmaximum-margin hyperplane. The \
original feature space can be mapped into a higher dimensional space to \
\\n\\t\\t\\timprove linear separability. The multi-class classification \
problem is reduced to a set of binary \\n\\t\\t\\tclassification \
problems.\"\>",
   BaseStyle->{LineIndent -> 0}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.8600730156107855`*^9, 3.860154888812075*^9, 
  3.860219075030507*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"26767bd6-e41d-4e1e-ad5c-1c8d1b13d8bf"]
}, Open  ]],

Cell["The training accuracy seen here is around 95 %.", "Text",
 CellChangeTimes->{{3.860154900683257*^9, 
  3.860154916598966*^9}},ExpressionUUID->"b0515d67-2fc8-4f50-9b95-\
9931a944f587"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "svm", "]"}]], "Input",
 CellChangeTimes->{{3.8600730950951033`*^9, 3.8600730966547794`*^9}, {
  3.860219091762106*^9, 3.8602190930641413`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"3b58669b-7350-40bc-b61c-7c78de6e1a48"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Data type"], 
                   TextCell["Data type"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{
                   InterpretationBox[
                    Cell["Mixed"], 
                    TextCell["Mixed"]], 
                   StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "4", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]},
                  "RowDefault"],
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Numerical\"", ",", "\"Numerical\"", ",", 
                    "\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  Short[#, 10]& ]],
                Annotation[#, 
                 
                 Short[{"Numerical", "Numerical", "Numerical", "Numerical"}, 
                  10], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classes"], 
                   TextCell["Classes"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{",", "\",\"", 
                 InterpretationBox[
                  Cell["Adelie"], 
                  TextCell["Adelie"]], 
                 InterpretationBox[
                  Cell["Chinstrap"], 
                  TextCell["Chinstrap"]], 
                 InterpretationBox[
                  Cell["Gentoo"], 
                  TextCell["Gentoo"]]},
                "RowWithSeparators"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.1", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.1331733416307940843`3., 1.6304006117815919019`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Method"], 
                   TextCell["Method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 
                 InterpretationBox[Cell[
                  "SupportVectorMachine",ExpressionUUID->
                   "6d7d44f4-7af3-47b9-9c24-5469d7800e07"],
                  TextCell["SupportVectorMachine"]],
                 StyleBox[
                  TagBox[
                   
                   GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.09907105357994911`"}, {
                    "\"SoftMarginParameter\"", "3"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                    FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                  "Verdana", StripOnInput -> False]],
                Annotation[#, 
                 Style[
                  
                  Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.09907105357994911}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {
                    "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left,
                    Frame -> All, FrameStyle -> GrayLevel[0.84], 
                   Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                 "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.67`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"30.8`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                    "TextStyling"], 
                   Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.1013424939245037848`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0393304232573983698`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0226816474097070453`3.", "\", \"", 
                   "0.1800033404393005243`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0226816474097070453`3., 
                   ", ", 0.1800033404393005243`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Model memory"], 
                   TextCell["Model memory"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"262.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training examples used"], 
                   TextCell["Training examples used"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"171", "\"examples\"", "examples", "\"Examples\""},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Training time"], 
                   TextCell["Training time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.24`", "\"s\"", "seconds", "\"Seconds\""},
                "Quantity"]},
              {
               ItemBox[
                
                DynamicModuleBox[{
                 MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                 DynamicBox[ToBoxes[
                   Show[
                    Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7615787122346783}, {
                    3.4011973816621555`, -2.097354920926556}, {
                    4.919980925828125, -2.2892494697591492`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.7615787122346783}}, {{
                    3.4011973816621555`, -2.097354920926556}}, {{
                    4.919980925828125, -2.2892494697591492`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.9585253184378878}, {
                    2.0794415416798357`, -0.5971109916879846}, {
                    2.0794415416798357`, -0.5971109916879846}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    Line[{{3.4011973816621555`, -2.590356494329035}, {
                    3.4011973816621555`, -1.7686199024191023`}, {
                    3.4011973816621555`, -1.7686199024191023`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -2.78042622470721}, {
                    4.919980925828125, -1.9613178196590053`}, {
                    4.919980925828125, -1.9613178196590053`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-2.3741200673993976`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-2.3741200673993976`, \
-0.7615787122346783}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7860196413292989}, {
                    3.4011973816621555`, 0.962947458457567}, {
                    4.919980925828125, 0.981331733416308}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7860196413292989}}, {{3.4011973816621555`, 
                    0.962947458457567}}, {{4.919980925828125, 
                    0.981331733416308}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7747575171887373}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7747575171887373, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.6262509735611083}, {
                    3.4011973816621555`, -2.097354920926556}, {
                    4.919980925828125, -2.2892494697591492`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.09907105357994911}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.7205128695949838`}, {
                    4.919980925828125, -1.9526815717954236`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04284255371261575}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.638994785894071}, {
                    4.919980925828125, -1.8964227857980989`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13231134821540158`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -0.6990412387124392}, {
                    4.919980925828125, -2.0035210909619363`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13510820499964576`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.4841064134239641}, {
                    4.919980925828125, -2.2606002309695796`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.1553730884521598}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.15650999455120734`}, {
                    3.4011973816621555`, -1.0178217879208098`}, {
                    4.919980925828125, -2.0906264622396704`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04652120815408778}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7615787122346783}, {
                    4.919980925828125, -2.276018197328757}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.2629933443766388}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.9011055577791243`}, {
                    4.919980925828125, -2.178974497728715}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3399229866674369}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.16086898879451134`}, {
                    3.4011973816621555`, -0.46964397805500574`}, {
                    4.919980925828125, -2.1014338778406367`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3450433037666898}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.9843118387770282`}, {
                    4.919980925828125, -2.099146836876386}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.337149860742572}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.6262509735611083}}, {{
                    3.4011973816621555`, -2.097354920926556}}, {{
                    4.919980925828125, -2.2892494697591492`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.09907105357994911}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.7205128695949838`}}, {{
                    4.919980925828125, -1.9526815717954236`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04284255371261575}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.638994785894071}}, {{
                    4.919980925828125, -1.8964227857980989`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13231134821540158`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -0.6990412387124392}}, {{
                    4.919980925828125, -2.0035210909619363`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13510820499964576`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.4841064134239641}}, {{
                    4.919980925828125, -2.2606002309695796`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.1553730884521598}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.15650999455120734`}}, {{
                    3.4011973816621555`, -1.0178217879208098`}}, {{
                    4.919980925828125, -2.0906264622396704`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04652120815408778}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.7615787122346783}}, {{
                    4.919980925828125, -2.276018197328757}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.2629933443766388}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.9011055577791243`}}, {{
                    4.919980925828125, -2.178974497728715}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3399229866674369}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.16086898879451134`}}, {{
                    3.4011973816621555`, -0.46964397805500574`}}, {{
                    4.919980925828125, -2.1014338778406367`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3450433037666898}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.9843118387770282`}}, {{
                    4.919980925828125, -2.099146836876386}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.337149860742572}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-2.4253671619010198`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-2.4253671619010198`, 
                    0.16086898879451134`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7615787122346783}, {
                    3.4011973816621555`, -2.097354920926556}, {
                    4.919980925828125, -2.2892494697591492`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{
                    2.0794415416798357`, -0.7615787122346783}}, {{
                    3.4011973816621555`, -2.097354920926556}}, {{
                    4.919980925828125, -2.2892494697591492`}}}]}}}, {{}, \
{}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.0794415416798357`, -0.9585253184378878}, {
                    2.0794415416798357`, -0.5971109916879846}, {
                    2.0794415416798357`, -0.5971109916879846}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.4011973816621555`, -2.590356494329035}, {
                    3.4011973816621555`, -1.7686199024191023`}, {
                    3.4011973816621555`, -1.7686199024191023`}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.919980925828125, -2.78042622470721}, {
                    4.919980925828125, -1.9613178196590053`}, {
                    4.919980925828125, -1.9613178196590053`}}]}}}, {{}, \
{}}}}, {DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-2.3741200673993976`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-2.3741200673993976`, \
-0.7615787122346783}}, PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.7860196413292989}, {
                    3.4011973816621555`, 0.962947458457567}, {
                    4.919980925828125, 0.981331733416308}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.0794415416798357`, 
                    0.7860196413292989}}, {{3.4011973816621555`, 
                    0.962947458457567}}, {{4.919980925828125, 
                    0.981331733416308}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, 0.7747575171887373}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 5.14166355650266}, {
                    0.7747575171887373, 1.}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.6262509735611083}, {
                    3.4011973816621555`, -2.097354920926556}, {
                    4.919980925828125, -2.2892494697591492`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.09907105357994911}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.7205128695949838`}, {
                    4.919980925828125, -1.9526815717954236`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04284255371261575}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.638994785894071}, {
                    4.919980925828125, -1.8964227857980989`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13231134821540158`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -0.6990412387124392}, {
                    4.919980925828125, -2.0035210909619363`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13510820499964576`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.4841064134239641}, {
                    4.919980925828125, -2.2606002309695796`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.1553730884521598}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.15650999455120734`}, {
                    3.4011973816621555`, -1.0178217879208098`}, {
                    4.919980925828125, -2.0906264622396704`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04652120815408778}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, -0.7615787122346783}, {
                    4.919980925828125, -2.276018197328757}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.2629933443766388}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.9011055577791243`}, {
                    4.919980925828125, -2.178974497728715}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3399229866674369}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.0794415416798357`, 0.16086898879451134`}, {
                    3.4011973816621555`, -0.46964397805500574`}, {
                    4.919980925828125, -2.1014338778406367`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3450433037666898}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.4011973816621555`, -1.9843118387770282`}, {
                    4.919980925828125, -2.099146836876386}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.337149860742572}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.6262509735611083}}, {{
                    3.4011973816621555`, -2.097354920926556}}, {{
                    4.919980925828125, -2.2892494697591492`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.09907105357994911}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.7205128695949838`}}, {{
                    4.919980925828125, -1.9526815717954236`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04284255371261575}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.638994785894071}}, {{
                    4.919980925828125, -1.8964227857980989`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13231134821540158`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -0.6990412387124392}}, {{
                    4.919980925828125, -2.0035210909619363`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.13510820499964576`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.4841064134239641}}, {{
                    4.919980925828125, -2.2606002309695796`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.1553730884521598}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.15650999455120734`}}, {{
                    3.4011973816621555`, -1.0178217879208098`}}, {{
                    4.919980925828125, -2.0906264622396704`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.04652120815408778}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, -0.7615787122346783}}, {{
                    4.919980925828125, -2.276018197328757}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.2629933443766388}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.9011055577791243`}}, {{
                    4.919980925828125, -2.178974497728715}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3399229866674369}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.0794415416798357`, 0.16086898879451134`}}, {{
                    3.4011973816621555`, -0.46964397805500574`}}, {{
                    4.919980925828125, -2.1014338778406367`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.3450433037666898}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.4011973816621555`, -1.9843118387770282`}}, {{
                    4.919980925828125, -2.099146836876386}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.337149860742572}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.2239738159866338`, \
-2.4253671619010198`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}, {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{-1.2239738159866338`, 
                    5.14166355650266}, {-2.4253671619010198`, 
                    0.16086898879451134`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0], 
                    Charting`ScaledTicks[
                    "Log", {Log, Exp}, "Nice", WorkingPrecision -> 
                    15.954589770191003`, RotateLabel -> 0]}}]}]], Appearance -> 
                    "Frameless"]}}, Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                  ImageSizeCache->{297., {111., 113.89273131957418`}}],
                 DynamicModuleValues:>{}],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  MachineLearning`MLInformationObject[
   ClassifierFunction[<|
    "ExampleNumber" -> 171, "ClassNumber" -> 3, 
     "Input" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical"|>, 
            "f2" -> <|"Type" -> "Numerical"|>, 
            "f3" -> <|"Type" -> "Numerical"|>, 
            "f4" -> <|"Type" -> "Numerical"|>|>, 
          "Output" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor[
               "Transpose", <|"FeatureNumber" -> 4|>], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {
                  "Numerical", "Numerical", "Numerical", "Numerical"}, 
                 "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, "FeatureWeights" -> 
                 Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                 Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                 False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
          "Perfect", "StructurePreserving" -> False, "Missing" -> 
          "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|
           "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
            "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
          "Output" -> <|
           "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "SynthesizeMissingValues", <|
             "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Distribution" -> 
              LearnedDistribution[<|
                "ExampleNumber" -> 171, "Preprocessor" -> 
                 MachineLearning`MLProcessor[
                  "ToMLDataset", <|
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                  "Processor" -> 
                 MachineLearning`MLProcessor[
                  "ToVector", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                 "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                 Automatic, 
                 "Model" -> <|
                  "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                   "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                   "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                   "PostProcessor" -> 
                   MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Method" -> "Multinormal", 
                   "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                 "TrainingInformation" -> <|
                  "Configurations" -> 
                   Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                   Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                 "NaiveImputer" -> 
                 MachineLearning`MLProcessor[
                  "ImputeMissing", <|
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                 "OutputDimension" -> 4, 
                 "Log" -> <|
                  "Example" -> 
                   MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                   "TrainingTime" -> 0.0472018, "MaxTrainingMemory" -> 206864,
                    "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                   "LanguageVersion" -> {13., 0}, "Date" -> 
                   DateObject[{
                    2022, 4, 29, 12, 4, 29.679321`9.225028871044378}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                   "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                   "Windows", "SystemWordLength" -> 64, "Evaluations" -> {}|>,
                  "LogPDFDistribution" -> 
                 MachineLearning`TailedQuantileDistribution[<|
                   "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                 Around[16.53064340630656, 0.593442758765043], 
                 "EntropySampleSize" -> 10|>], 
              "Output" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
              "ID" -> 31956639518117771|>], 
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
            MachineLearning`MLProcessor[
            "Standardize", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Mean" -> {44.13157894736843, 16.94970760233918, 
               202.20467836257308`, 4241.666666666666}, 
              "StandardDeviation" -> {5.642730392182068, 1.9473891434192623`, 
               14.416088368344866`, 827.828308046025}, 
              "Output" -> <|
               "(f1f2f3f4)" -> <|
                 "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
              "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Imputed"|>]|>, 
     "Output" -> <|
      "Preprocessor" -> 
       MachineLearning`MLProcessor[
        "ToMLDataset", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Preprocessor" -> 
          MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
               MachineLearning`MLProcessor["List"], 
               MachineLearning`MLProcessor[
               "WrapMLDataset", <|
                "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                  "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                 "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
          True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "Processor" -> 
       MachineLearning`MLProcessor[
        "Sequence", <|
         "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
          "Processors" -> {
            MachineLearning`MLProcessor[
            "ToVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
            MachineLearning`MLProcessor[
            "IntegerEncodeNominalVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
              "Index" -> {<|"Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>},
               "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
              3699363863601728199, 
              "Output" -> <|
               "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
            MachineLearning`MLProcessor[
            "FromVector", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
              "StructurePreserving" -> True, 
              "Input" -> <|
               "f1" -> <|
                 "Type" -> "NominalVector", "Weight" -> 1, 
                  "SetSize" -> {3}|>|>, 
              "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
              "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
            MachineLearning`MLProcessor[
            "FirstValues", <|
             "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>,
               "Key" -> "f1", "Invertibility" -> "Perfect", 
              "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
          "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
          "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
       "Name" -> "class", 
       "Marginal" -> <|
        "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 0.20689655172413793`,
          "Gentoo" -> 0.39655172413793105`|>|>, "LabelSplitter" -> 
     MachineLearning`MLProcessor[
      "FeatureLabelSplit", <|
       "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
        "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
     "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
     "Prior" -> Automatic, "Utility" -> 
     SparseArray[
      Automatic, {3, 4}, 0., {
       1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0, 
     "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
     "BatchProcessing" -> Automatic, 
     "Model" -> <|
      "SVMParameters" -> <|
        "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
         0.09907105357994911, "SoftMarginParameter" -> 3, "PolynomialDegree" -> 
         3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
         "Shrinking" -> True, "KernelCacheSize" -> 100|>, 
       "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJwBkQJu/SFib1JlAgAAABQAAAAEAAAA6XTmb42a0L+5eD4nBnLmP95TBgPz
Gty/ZjQxUrEGyb/LLOEmqGfhv7cataA6bdU/ac1sTxJz9r8HlMuALyP0v57Q
LZCF7MS/8yWHMMlq6T85V3B316nmv8Rls6Y7aMa/MKW9aEob6r/t6tRwDVG/
v/S34sKSyPq/9Hjn1z8d87++nAE0GcFtv9t70IbFePY/qOSrrX732r8aNsHy
qqLHP50Vpj9SIOm/63qQiU2r2D/RfZH6lVTkvw3OnU+EL/S/VEqhO7U80T/j
urnRmav7P3SbFQpZKOm/zGJwUiC22z9dkN47nQ/kvyOf9foP4b8/PR6e3SHx
8L8NPq6sMlvtv9qKvAn2Z92/dLHkEKql6T84XdZl8j6zvyU/6z2ePdK/XkIN
UM0w8r/gIG0P2Tvfv4UoxqeNT/W/nHKiXeqd9r8tvGYmqFjmv+ZUIOf+WrQ/
MDQmoAGY5L+TnpCI3F3wv0B8mdz/I9U/1jbGp9cQ8D+zWcvE/wzgv/RS2h/m
rrq/MtTmHpxu0r8chF91oVe+v7J3aPB11PC/xrGswWVE8b+E4Hb285jivyTz
3IgqQ8e/Uh7bGjDR8L/F1QWmLUj0v24NqeSrwes/MqjTgBjl9T92gj7zd3Ll
P5jSZWn5Pa8/+IPDw9Bt7D/A9Ut7Z7jkP8iSYXty0t+/nEP8pLA2yT+NIpmv
KtrEv3RTV0VbPci/2J4LB4Lw8L8idSAF7df5v9iWpYTGEtO/DNgLPA8VyD/q
B3K/rIb3v/rFfztvs+i/Fdq7dDY40r9Of+MmYEPHP+Ulu98Ey/C/Cd8GqkEe
8b84xpcqCZC7v6PgxjxFNOM/8PX7UNTWjr/ws2rnPyfwvzt3aiI=
           "], 
          "supportVectorCoefficients" -> {3., 3., 3., 2.4409819055042505`, 
           2.7845529724751645`, 1.512425516072857, 1.5805619118456724`, 3., 
           0.810512654644151, 1.6395444463564925`, 
           3., -3., -3., -3., -1.9607600226439101`, -2.8078193842546777`, \
-3., -3., -3., -3.}, "rho" -> -0.12005452785740509`|>, <|
         "supportVectors" -> {{-0.5879177369349873, 1.0086616543051536`, 
           0.4005237139385449, 
           0.06535142425524958}, {-1.0741814302656365`, -0.2345462068961635, \
-0.2867753741155161, -0.4968681063136605}, {-0.15905005520252533`, 
           1.052363842394187, -0.36497969715892464`, 0.6453067785049251}, {
           2.741130071167883, 0.02582905290160658, 1.9315985357275745`, 
           2.189221461904194}, {0.05474373715722915, 0.18402376928278347`, 
           1.1556595765632538`, 
           1.2176770243228248`}, {-0.1740643260529336, -1.2654747492512521`, 
           0.3979429109694211, 0.2593555712954335}}, 
          "supportVectorCoefficients" -> {1.648444727113054, 
           1.8602889531483022`, 
           1.4035941393170297`, -0.07430486118616442, -2.538901394942617, \
-2.299121563449605}, "rho" -> 0.056362263088123254`|>, <|
         "supportVectors" -> {{
           0.709083712263839, -0.2777312391567922, -0.21678296758440288`, \
-1.0986380882895284`}, {-0.5811710180050942, -0.1817372482563765, \
-1.0510712670383282`, -1.2676216588273388`}, {0.8673915353796653, 
           1.3684315712257669`, 0.6702232123244147, 0.06101970111459315}, {
           0.8884052108297729, 0.6475102813853297, -0.4972196774381641, 
           0.19698150688102778`}, {2.741130071167883, 0.02582905290160658, 
           1.9315985357275745`, 2.189221461904194}, {
           0.29402555187648394`, -1.1982948594966463`, 
           0.5489468681979804, -0.052542823947628575`}, {0.05474373715722915, 
           0.18402376928278347`, 1.1556595765632538`, 1.2176770243228248`}}, 
          "supportVectorCoefficients" -> {2.4564061743206382`, 
           0.41300393635485644`, 1.804481647616439, 
           0.20867782278051425`, -0.6216817591353707, -3., \
-1.2608878219370767`}, "rho" -> 0.0877389339573849|>}, 
       "ProbabilityCoefficients" -> {{-6.9511566162109375`, 
        1.5748993158340454`}, {-7.1715569496154785`, 
        0.11650567501783371`}, {-7.00684118270874, 0.5728990435600281}}, 
       "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
       MachineLearning`MLProcessor[
        "FirstValues", <|
         "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
          "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
          False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
       "SupportVectorMachine", "PostProcessor" -> 
       MachineLearning`MLProcessor["Identity"], 
       "Options" -> <|
        "KernelType" -> <|
          "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
         "GammaScalingParameter" -> <|
          "Value" -> 0.09907105357994911, "Options" -> <||>|>, 
         "SoftMarginParameter" -> <|"Value" -> 3, "Options" -> <||>|>, 
         "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
         "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
         "MulticlassStrategy" -> <|
          "Value" -> "OneVersusOne", "Options" -> <||>|>, 
         "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
         "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
     "TrainingInformation" -> <|
      "PanelCell" -> CellObject[193329], "TrainingFunction" -> Classify, 
       "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
       "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
       0.132259`6.57297022820959, "LossName" -> "MeanCrossEntropy", 
       "BestModelInformation" -> 
       Dataset[<|
         "MeanCrossEntropy" -> 
          Around[0.10134249392450378`, 0.03933042325739837], "Accuracy" -> 
          Around[0.981331733416308, 0.01630400611781592], "EvaluationTime" -> 
          0.00006881407037243174, "TestSize" -> 68, "ModelMemory" -> 18728., 
          "ModelUtility" -> 1.5213385763209009`, "TrainingSize" -> 137, 
          "TrainingTime" -> 0.039810717055349706`, "TrainingMemory" -> 
          147117.3333333333, "ExperimentCount" -> 2, 
          "MeanCrossEntropyHistory" -> {
            Around[0.11020126138785548`, 0.05497918072824403], 
            Around[0.09248372646115208, 0.053438328114023076`]}, 
          "AccuracyHistory" -> {
            Around[0.981331733416308, 0.023057346572829186`], 
            Around[0.981331733416308, 0.023057346572829186`]}, 
          "Configuration" -> {
           "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
            "GammaScalingParameter" -> 0.09907105357994911, 
            "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
            "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
            "Shrinking" -> True, "KernelCacheSize" -> 100}, 
          "FinalTrainingSize" -> 171|>, 
         TypeSystem`Struct[{
          "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
           "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
           "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
           "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
          TypeSystem`AnyType, TypeSystem`AnyType, 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer], 
           TypeSystem`Vector[TypeSystem`AnyType, 2], 
           TypeSystem`Vector[TypeSystem`AnyType, 2], 
           TypeSystem`Tuple[{
             TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
           TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
       Dataset[<|<|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.09907105357994911|>, 
              "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.5345922492736722, 0.08867592836794873], "Accuracy" -> 
               Around[0.7860196413292989, 0.045301653578056586`], 
               "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
               "ModelMemory" -> 14888, "ModelUtility" -> -0.09954240834164285,
                "TrainingSize" -> 8, "TrainingTime" -> 0.19952623149688792`, 
               "TrainingMemory" -> 262168, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.5345922492736722, 0.06270335027698908]}, 
               "AccuracyHistory" -> {
                 Around[0.7860196413292989, 0.032033106444007635`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.12278076394644068`, 0.04778746331345336], "Accuracy" -> 
               Around[0.962947458457567, 0.022423428319020475`], 
               "EvaluationTime" -> 0.00006377974497735949, "TestSize" -> 141, 
               "ModelMemory" -> 17192, "ModelUtility" -> 1.3292371838600485`, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 132792, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.12278076394644068`, 0.03379083936464623]}, 
               "AccuracyHistory" -> {
                 Around[0.962947458457567, 0.015855758221829844`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.10134249392450378`, 0.03933042325739837], "Accuracy" -> 
               Around[0.981331733416308, 0.01630400611781592], 
               "EvaluationTime" -> 0.00006881407037243174, "TestSize" -> 68, 
               "ModelMemory" -> 18728., "ModelUtility" -> 1.5213385763209009`,
                "TrainingSize" -> 137, "TrainingTime" -> 
               0.039810717055349706`, "TrainingMemory" -> 147117.3333333333, 
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                 Around[0.11020126138785548`, 0.05497918072824403], 
                 Around[0.09248372646115208, 0.053438328114023076`]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`], 
                 Around[0.981331733416308, 0.023057346572829186`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00006881407037243174, "MeanCrossEntropy" -> 
              Around[0.10134249392450378`, 0.03933042325739837], 
              "ModelMemory" -> 18728., "TrainingMemory" -> 147117.3333333333, 
              "TrainingTime" -> 0.24921698052217842`|>, "Index" -> 1|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.04284255371261575|>, 
              "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.14189306452613357`, 0.09068217994015305], "Accuracy" -> 
               Around[0.9527603048448795, 0.05111045855369065], 
               "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 25384, "ModelUtility" -> 1.1392392385571801`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 151232, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.14189306452613357`, 0.06412198436846094]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.1789743338750649, 0.04451961839550031], "Accuracy" -> 
               Around[0.9499148849786256, 0.025879802441676963`], 
               "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 
               141, "ModelMemory" -> 19240, "ModelUtility" -> 
               0.978803960807462, "TrainingSize" -> 30, "TrainingTime" -> 0.1,
                "TrainingMemory" -> 131576, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1789743338750649, 0.03148012406329563]}, 
               "AccuracyHistory" -> {
                 Around[0.9499148849786256, 0.01829978380227795]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000056469102206169774`, "MeanCrossEntropy" -> 
              Around[0.1789743338750649, 0.04451961839550031], "ModelMemory" -> 
              19240, "TrainingMemory" -> 131576, "TrainingTime" -> 
              0.22111872336272723`|>, "Index" -> 2|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.13231134821540158`|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.1501046163281339, 0.09794541338406397], "Accuracy" -> 
               Around[0.9527603048448795, 0.05111045855369065], 
               "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 25896, "ModelUtility" -> 1.0806023140541448`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 157368, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1501046163281339, 0.06925786598999126]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.19417513180260854`, 0.04483330013928714], "Accuracy" -> 
               Around[0.9499148849786256, 0.025879802441676963`], 
               "EvaluationTime" -> 0.00003196559394665573, "TestSize" -> 141, 
               "ModelMemory" -> 20264, "ModelUtility" -> 0.900693835828528, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 125448, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.19417513180260854`, 0.03170193055146172]}, 
               "AccuracyHistory" -> {
                 Around[0.9499148849786256, 0.01829978380227795]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00003196559394665573, "MeanCrossEntropy" -> 
              Around[0.19417513180260854`, 0.04483330013928714], 
              "ModelMemory" -> 20264, "TrainingMemory" -> 125448, 
              "TrainingTime" -> 0.26539496877952984`|>, "Index" -> 3|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.13510820499964576`|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.1348595933591114, 0.08166270446618575], "Accuracy" -> 
               Around[0.9527603048448795, 0.05111045855369065], 
               "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 39208, "ModelUtility" -> 1.1960443654318684`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 157392, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.1348595933591114, 0.0577442520980729]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.49706163886598287`, 0.07773889568702189], "Accuracy" -> 
               Around[0.7881020927581578, 0.048510939104400755`], 
               "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 
               141, "ModelMemory" -> 22312, 
               "ModelUtility" -> -0.02491639091439868, "TrainingSize" -> 30, 
               "TrainingTime" -> 0.1, "TrainingMemory" -> 124992, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.49706163886598287`, 0.05496970030224683]}, 
               "AccuracyHistory" -> {
                 Around[0.7881020927581578, 0.03430241400244943]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000050662052239030834`, "MeanCrossEntropy" -> 
              Around[0.49706163886598287`, 0.07773889568702189], 
              "ModelMemory" -> 22312, "TrainingMemory" -> 124992, 
              "TrainingTime" -> 0.22111872336272723`|>, "Index" -> 4|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.1553730884521598|>, 
              "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.10428786915591529`, 0.03922460547321318], "Accuracy" -> 
               Around[0.981331733416308, 0.01630400611781592], 
               "EvaluationTime" -> 0.00009300816647554056, "TestSize" -> 68, 
               "ModelMemory" -> 21288., "ModelUtility" -> 1.494914076485661, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.0696614567691945, 
               "TrainingMemory" -> 170632., "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.11219250503241099`, 0.055368897642941624`], 
                 Around[0.0963832332794196, 0.05335485673464006]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`], 
                 Around[0.981331733416308, 0.023057346572829186`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.616247621403625, 0.10176799561913254`], "Accuracy" -> 
               Around[0.7860196413292989, 0.045301653578056586`], 
               "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 163, 
               "ModelMemory" -> 14888, 
               "ModelUtility" -> -0.24154475613337156`, "TrainingSize" -> 8, 
               "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
               110624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.616247621403625, 0.07196083981005147]}, 
               "AccuracyHistory" -> {
                 Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00003481082264833104, "MeanCrossEntropy" -> 
              Around[0.616247621403625, 0.10176799561913254`], "ModelMemory" -> 
              14888, "TrainingMemory" -> 110624, "TrainingTime" -> 
              0.12373640475807379`|>, "Index" -> 5|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.04652120815408778|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.855122971089877, 0.10794403486293765`], "Accuracy" -> 
               Around[0.7375398831019185, 0.04859946995048178], 
               "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
               "ModelMemory" -> 15144, "ModelUtility" -> -0.561579681521574, 
               "TrainingSize" -> 8, "TrainingTime" -> 0.07943282347242814, 
               "TrainingMemory" -> 151688, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.855122971089877, 0.0763279590402203]}, 
               "AccuracyHistory" -> {
                 Around[0.7375398831019185, 0.03436501476405751]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.3613812484897011, 0.05696484694559005], "Accuracy" -> 
               Around[0.7881020927581578, 0.048510939104400755`], 
               "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 
               141, "ModelMemory" -> 20776, "ModelUtility" -> 
               0.29362504649114296`, "TrainingSize" -> 30, "TrainingTime" -> 
               0.12589254117941673`, "TrainingMemory" -> 123952, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.3613812484897011, 0.04028022956448051]}, 
               "AccuracyHistory" -> {
                 Around[0.7881020927581578, 0.03430241400244943]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.12360967476307833`, 0.04134538987553945], "Accuracy" -> 
               Around[0.9670460191305937, 0.024123170746064293`], 
               "EvaluationTime" -> 0.00008025539728615234, "TestSize" -> 68, 
               "ModelMemory" -> 32040., "ModelUtility" -> 1.3327136731642935`,
                "TrainingSize" -> 137, "TrainingTime" -> 0.04324671915780888, 
               "TrainingMemory" -> 153488., "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.13210523096026208`, 0.06055292622107441], 
                 Around[0.11511411856589457`, 0.054389127799587815`]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864], 
                 Around[0.981331733416308, 0.023057346572829186`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00008025539728615234, "MeanCrossEntropy" -> 
              Around[0.12360967476307833`, 0.04134538987553945], 
              "ModelMemory" -> 32040., "TrainingMemory" -> 153488., 
              "TrainingTime" -> 0.13341230504896331`|>, "Index" -> 6|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.2629933443766388|>, 
              "SoftMarginParameter" -> <|"Value" -> 3|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.10269229416573603`, 0.07550391386893379], "Accuracy" -> 
               Around[0.981331733416308, 0.03260801223563184], 
               "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 20776, "ModelUtility" -> 1.445668451573836, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 205232, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.10269229416573603`, 0.053389329502848096`]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.46692869878335097`, 0.08347075118845407], "Accuracy" -> 
               Around[0.7860196413292989, 0.045301653578056586`], 
               "EvaluationTime" -> 0.00004382422923744385, "TestSize" -> 163, 
               "ModelMemory" -> 15144, "ModelUtility" -> 0.03329327176323782, 
               "TrainingSize" -> 8, "TrainingTime" -> 0.03981071705534971, 
               "TrainingMemory" -> 111736, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.46692869878335097`, 0.05902273419609094]}, 
               "AccuracyHistory" -> {
                 Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00004382422923744385, "MeanCrossEntropy" -> 
              Around[0.46692869878335097`, 0.08347075118845407], 
              "ModelMemory" -> 15144, "TrainingMemory" -> 111736, 
              "TrainingTime" -> 0.11819504952737522`|>, "Index" -> 7|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.3399229866674369|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.11315751444753541`, 0.07790552967744314], "Accuracy" -> 
               Around[0.981331733416308, 0.03260801223563184], 
               "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34, 
               "ModelMemory" -> 25896, "ModelUtility" -> 1.3568132051412571`, 
               "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 151832, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.11315751444753541`, 0.05508752832684987]}, 
               "AccuracyHistory" -> {
                 Around[0.981331733416308, 0.023057346572829186`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.14940335384418604`, 0.04594640427389665], "Accuracy" -> 
               Around[0.9629474584575669, 0.022423428319020482`], 
               "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 
               141, "ModelMemory" -> 20776, "ModelUtility" -> 
               1.1482591060222105`, "TrainingSize" -> 30, "TrainingTime" -> 
               0.15848931924611134`, "TrainingMemory" -> 167664, 
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                 Around[0.14940335384418604`, 0.03248901403321089]}, 
               "AccuracyHistory" -> {
                 Around[0.9629474584575669, 0.015855758221829847`]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000050662052239030834`, "MeanCrossEntropy" -> 
              Around[0.14940335384418604`, 0.04594640427389665], 
              "ModelMemory" -> 20776, "TrainingMemory" -> 167664, 
              "TrainingTime" -> 0.3211354592735776|>, "Index" -> 8|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.3450433037666898|>, 
              "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[1.1745310820007064`, 0.09515238964789184], "Accuracy" -> 
               Around[0.3920664103869573, 0.05392741362697978], 
               "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 163, 
               "ModelMemory" -> 14888, "ModelUtility" -> -0.8700983824521907, 
               "TrainingSize" -> 8, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 112280, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[1.1745310820007064`, 0.06728289996612896]}, 
               "AccuracyHistory" -> {
                 Around[0.3920664103869573, 0.03813243986748923]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.6252248224206084, 0.06508281549491828], "Accuracy" -> 
               Around[0.7881020927581578, 0.048510939104400755`], 
               "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 141, 
               "ModelMemory" -> 22312, "ModelUtility" -> -0.2441187527253822, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.19952623149688792`, 
               "TrainingMemory" -> 169760, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.6252248224206084, 0.046020500175169614`]}, 
               "AccuracyHistory" -> {
                 Around[0.7881020927581578, 0.03430241400244943]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.12228096651947476`, 0.04006466605819099], "Accuracy" -> 
               Around[0.9527603048448796, 0.02555522927684533], 
               "EvaluationTime" -> 0.00008663178188084646, "TestSize" -> 68, 
               "ModelMemory" -> 41256., "ModelUtility" -> 1.3448028885831675`,
                "TrainingSize" -> 137, "TrainingTime" -> 0.1, 
               "TrainingMemory" -> 224469.3333333333, "ExperimentCount" -> 2, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.12043306576817277`, 0.05598749618467007], 
                 Around[0.12412886727077675`, 0.057232425338394885`]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864], 
                 Around[0.9527603048448797, 0.03614055183286865]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.00008663178188084646, "MeanCrossEntropy" -> 
              Around[0.12228096651947476`, 0.04006466605819099], 
              "ModelMemory" -> 41256., "TrainingMemory" -> 224469.3333333333, 
              "TrainingTime" -> 0.1749362416109024|>, "Index" -> 9|>, <|
           "Value" -> "SupportVectorMachine", 
            "Options" -> <|
             "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
              "GammaScalingParameter" -> <|"Value" -> 0.337149860742572|>, 
              "SoftMarginParameter" -> <|"Value" -> 1.|>, 
              "PolynomialDegree" -> <|"Value" -> 3|>, 
              "BiasParameter" -> <|"Value" -> 1|>, 
              "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
              "Shrinking" -> <|"Value" -> True|>, 
              "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
           "Experiments" -> {<|
              "MeanCrossEntropy" -> 
               Around[0.13747518666522562`, 0.05285926469738658], "Accuracy" -> 
               Around[0.9629474584575669, 0.022423428319020482`], 
               "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 141, 
               "ModelMemory" -> 19240, "ModelUtility" -> 1.2170681054692807`, 
               "TrainingSize" -> 30, "TrainingTime" -> 0.12589254117941673`, 
               "TrainingMemory" -> 136144, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.13747518666522562`, 0.037377144516056726`]}, 
               "AccuracyHistory" -> {
                 Around[0.9629474584575669, 0.015855758221829847`]}|>, <|
              "MeanCrossEntropy" -> 
               Around[0.12256094814173431`, 0.08156935743518842], "Accuracy" -> 
               Around[0.9527603048448795, 0.05111045855369065], 
               "EvaluationTime" -> 0.000058684185734378794`, "TestSize" -> 34,
                "ModelMemory" -> 22824, "ModelUtility" -> 1.2810247790707816`,
                "TrainingSize" -> 137, "TrainingTime" -> 0.05011872336272722, 
               "TrainingMemory" -> 149040, "ExperimentCount" -> 1, 
               "MeanCrossEntropyHistory" -> {
                 Around[0.12256094814173431`, 0.05767824577945106]}, 
               "AccuracyHistory" -> {
                 Around[0.9527603048448795, 0.03614055183286864]}|>}, 
            "PredictedPerformances" -> <|
             "EvaluationTime" -> 0.000058684185734378794`, "MeanCrossEntropy" -> 
              Around[0.12256094814173431`, 0.08156935743518842], 
              "ModelMemory" -> 22824, "TrainingMemory" -> 149040, 
              "TrainingTime" -> 0.18844948785844123`|>, "Index" -> 10|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Struct[{"Value", "Options"}, {
            TypeSystem`Atom[
             TypeSystem`Enumeration["SupportVectorMachine"]], 
            
            TypeSystem`Struct[{
             "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
              "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
              "Shrinking", "KernelCacheSize"}, {
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[
                 TypeSystem`Enumeration["RadialBasisFunction"]]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Real]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Real]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}], 
              TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[TypeSystem`Boolean]}], 
              TypeSystem`Struct[{"Value"}, {
                TypeSystem`Atom[Integer]}]}]}], 
          
          TypeSystem`Struct[{
           "Experiments", "PredictedPerformances", "Index"}, {
            TypeSystem`Vector[
             
             TypeSystem`Struct[{
              "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
               "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
               "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory",
                "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Real], 
               TypeSystem`Atom[Integer], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
               TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
             TypeSystem`AnyLength], 
            
            TypeSystem`Struct[{
             "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
              "TrainingMemory", "TrainingTime"}, {
              TypeSystem`Atom[Real], TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real]}], 
            TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 171, 
       "PreprocessorEvaluationTime" -> 4.5640625*^-6, "PreprocessorMemory" -> 
       65712, "InputDimension" -> 4, "OutputDimension" -> 1, 
       "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
       True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
       False, "NaturalStop" -> True, "AbortStop" -> False, 
       "LastReportingTime" -> 3.8602226723542023`17.339187346314993*^9, 
       "RoundPartitioning" -> 
       Dataset[{<|
          "TrainingSizes" -> 8, "TimeBudgets" -> 0.4377651952892555, 
           "ElapsedTimes" -> 0.6307043999999999, "ExperimentCounts" -> 5|>, <|
          "TrainingSizes" -> 30, "TimeBudgets" -> 0.625378850413222, 
           "ElapsedTimes" -> 1.2281245, "ExperimentCounts" -> 8|>, <|
          "TrainingSizes" -> 137, "TimeBudgets" -> 0.8933983577331741, 
           "ElapsedTimes" -> 0.9294075, "ExperimentCounts" -> 14|>}, 
         TypeSystem`Vector[
          
          TypeSystem`Struct[{
           "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
            "ExperimentCounts"}, {
            TypeSystem`Atom[Integer], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Real], 
            TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
     None, "Log" -> <|
      "Example" -> 
       MachineLearning`MLDataset[<|
         "f1" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
            803269050161587613|>, 
          "f2" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
            3873503148790622222|>, 
          "f3" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
            699058557945447889|>, 
          "f4" -> <|
           "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
            4483023431942159786|>|>, <|
         "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0,
           "RawExample" -> False|>], "TrainingTime" -> 3.2400082, 
       "MaxTrainingMemory" -> 1115336, "DataMemory" -> 26048, 
       "FunctionMemory" -> 257672, "LanguageVersion" -> {13., 0}, "Date" -> 
       DateObject[{2022, 4, 29, 12, 4, 32.8662657`9.269325263763646}, 
         "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
       "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
       "Evaluations" -> {}|>|>]]]], "Output",
 CellChangeTimes->{
  3.8600730984969954`*^9, 3.8601548911861334`*^9, {3.860219077446228*^9, 
   3.8602190944972715`*^9}},
 CellLabel->"Out[85]=",ExpressionUUID->"fe981f7d-d08c-4c7e-a6bf-de1915c06112"]
}, Open  ]],

Cell["\<\
The test accuracy is 98.8 % which also makes SVM the best fit for the data at \
hand. The confusion matrix says that the species Gentoo is accurately \
predicted.\
\>", "Text",
 CellChangeTimes->{{3.860154928541155*^9, 3.860154991920743*^9}, {
  3.8601550859864216`*^9, 3.8601551187532997`*^9}, {3.860219108560952*^9, 
  3.860219109437566*^9}},ExpressionUUID->"c967c3f3-16fa-4ace-8777-\
98afa3740eec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measuresvm", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"svm", ",", "testingData"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8600731181566863`*^9, 3.860073124701191*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"9bc6a954-c817-4fcb-b8e2-f4d6cb8dd520"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "SupportVectorMachine",ExpressionUUID->
                 "25714038-0717-428a-8eac-6df5b766d23b"],
                TextCell["SupportVectorMachine"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "171"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.8", "0.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.8304093567251413788`3., 0.8245894595446217057`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"49.", "4."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    48.5380116959064267235`3., 3.8331852752130370909`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9647544748142569127`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0237777172999523723`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9171990402143521681`3.", "\", \"", 
                   "1.0123099094141616572`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9171990402143521681`3., 
                   ", ", 1.0123099094141616572`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0358816402603103074`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0246438978039172363`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0134061553475241652`3."}], "\", \"", 
                   "0.08516943586814478`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0134061553475241652`3.,
                    ", ", 0.08516943586814478`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.85`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.93`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                
                GraphicsBox[
                 RasterBox[{{{1., 1., 1.}, {1., 1., 1.}, {0.8803009569906786, 
                  0.5389059427436701, 0.0059594804421502275`}}, {{1., 1., 
                  1.}, {0.8941098905606734, 0.706935156564404, 
                  0.29821432076706306`}, {1., 1., 1.}}, {{1., 0.42, 0.}, {
                  0.9391801826494713, 0.8886219335070673, 
                  0.7176808492023597}, {1., 1., 1.}}}, {{0, 0}, {3, 3}}, {0, 
                  1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["81", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" examples of \"", "\"Adelie\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9759036144578314`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9878048780487805`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " examples of ", "Adelie", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9759036144578314}], 
                    Row[{"FScore = ", 0.9878048780487805}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Adelie"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024096385542168676`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "Adelie", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.05714285714285714}], 
                    Row[{"Row fraction = ", 0.024096385542168676`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["33", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" examples of \"", "\"Chinstrap\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9428571428571428`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9705882352941178`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{33, " examples of ", "Chinstrap", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9428571428571428}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9705882352941178}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Gentoo\"", 
                    "\" misclassified as \"", "\"Chinstrap\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Gentoo", " misclassified as ", 
                    "Chinstrap"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Adelie\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Adelie", " misclassified as ", 
                    "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"Chinstrap\"", 
                    "\" misclassified as \"", "\"Gentoo\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "Chinstrap", " misclassified as ",
                     "Gentoo"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["55", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" examples of \"", "\"Gentoo\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{55, " examples of ", "Gentoo", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9759036144578314`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{83, " example", "s", " of class ", "Adelie"}], 
                    Row[{"Recall = ", 0.9759036144578314}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "33", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{33, " example", "s", " of class ", "Chinstrap"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " of class ", "Gentoo"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Adelie\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{81, " example", "s", " classified as ", "Adelie"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "35", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Chinstrap\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9428571428571428`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{35, " example", "s", " classified as ", 
                    "Chinstrap"}], 
                    Row[{"Precision = ", 0.9428571428571428}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "55", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"Gentoo\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{55, " example", "s", " classified as ", "Gentoo"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{2.5, 
                    FormBox[
                    RotationBox["\"Adelie\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"Chinstrap\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"Gentoo\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{2.5, 
                    FormBox["83", TraditionalForm]}, {1.5, 
                    FormBox["33", TraditionalForm]}, {0.5, 
                    FormBox["55", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["35", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["55", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"Adelie\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"Chinstrap\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"Gentoo\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->196.8,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 171, "ClassNumber" -> 3, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical"|>, 
              "f2" -> <|"Type" -> "Numerical"|>, 
              "f3" -> <|"Type" -> "Numerical"|>, 
              "f4" -> <|"Type" -> "Numerical"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 4|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Numerical", "Numerical", "Numerical", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4)" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>|>,
             "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 171, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>, 
                    "f3" -> <|"Type" -> "Numerical"|>, 
                    "f4" -> <|"Type" -> "Numerical"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 796065208436189035|>], 
                   "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                   Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{
                    0.004085090746150243, -0.3612744103301966, 
                    0.9233210609784885, -0.13016270905187213`}, \
{-0.001134825059633796, 0.06463514322360103, 0.16405857205761296`, 
                    0.984330125195285}, {
                    0.015543421288920507`, -0.9300789464555371, \
-0.34721711037873476`, 0.11896147979507893`}, {0.9998702047067484, 
                    0.01600787497426431, 
                    0.001811504406973886, -0.00020032542764021215`}}, 
                    "Precisions" -> {1.4588368163658181`*^-6, 
                    0.0215411092967585, 0.05960642825620558, 
                    0.4279510542010826}, "NoisePrecision" -> None, 
                    "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736842, 16.949707602339178`, 
                    Rational[34577, 171], 
                    Rational[12725, 3]}, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Version" -> {13., 0}, "ID" -> 8972696774082153394|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, 
                    "Key" -> "(f1f2f3f4)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 4, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                    "Mean" -> {44.13157894736843, 16.94970760233918, 
                    202.20467836257308`, 4241.666666666666}, 
                    "StandardDeviation" -> {5.642730392182068, 
                    1.9473891434192623`, 14.416088368344866`, 
                    827.828308046025}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 4, 
                    "Output" -> <|
                    "(f1f2f3f4)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 4|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    2758349319774705302|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 4, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, 
                    "ID" -> 228404125354762995|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, 
                    "ID" -> 572519874576827058|>, 
                    "f3" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, 
                    "ID" -> 5013147748304637967|>, 
                    "f4" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, 
                    "ID" -> 675508430341219818|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.0472018, "MaxTrainingMemory" -> 
                    206864, "DataMemory" -> 21456, "FunctionMemory" -> 40312, 
                    "LanguageVersion" -> {13., 0}, "Date" -> 
                    DateObject[{
                    2022, 4, 29, 12, 4, 29.679321`9.225028871044378}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "Windows", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}|>, "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-5.240118559080468, -5.240118559080468, \
-4.450972928849655, -4.304402752314609, -4.1654333300715205`, \
-4.0556603276661765`, -4.043991492527599, -3.972922360274328, \
-3.7995475841419544`, -3.65659395487302, -3.636965225967071}, 
                    "LeftBoundary" -> -4.450972928849655, "LeftScale" -> 
                    0.3945728151154064, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[16.53064340630656, 0.593442758765043], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
                "ID" -> 31956639518117771|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 5624398683150831239|>], 
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Mean" -> {44.13157894736843, 16.94970760233918, 
                 202.20467836257308`, 4241.666666666666}, 
                "StandardDeviation" -> {5.642730392182068, 
                 1.9473891434192623`, 14.416088368344866`, 827.828308046025}, 
                "Output" -> <|
                 "(f1f2f3f4)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 4|>|>, 
                "Version" -> {13., 0}, "ID" -> 7727414780429196297|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 6540785407667364001|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "Adelie" -> 1, "Chinstrap" -> 2, "Gentoo" -> 3|>}, 
                "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
                3699363863601728199, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {3}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13., 0}, "ID" -> 1746984079219311986|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 3|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "Adelie" -> 0.39655172413793105`, "Chinstrap" -> 
           0.20689655172413793`, "Gentoo" -> 0.39655172413793105`|>|>, 
       "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {3, 4}, 0., {
         1, {{0, 1, 2, 3}, {{2}, {3}, {4}}}, {1., 1., 1.}}], "Threshold" -> 0,
        "TieBreaker" -> RandomChoice, "PerformanceGoal" -> Automatic, 
       "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "SVMParameters" -> <|
          "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
           0.09907105357994911, "SoftMarginParameter" -> 3, 
           "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
           "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
           "KernelCacheSize" -> 100|>, 
         "TrainedModel" -> {<|"supportVectors" -> CompressedData["
1:eJwBkQJu/SFib1JlAgAAABQAAAAEAAAA6XTmb42a0L+5eD4nBnLmP95TBgPz
Gty/ZjQxUrEGyb/LLOEmqGfhv7cataA6bdU/ac1sTxJz9r8HlMuALyP0v57Q
LZCF7MS/8yWHMMlq6T85V3B316nmv8Rls6Y7aMa/MKW9aEob6r/t6tRwDVG/
v/S34sKSyPq/9Hjn1z8d87++nAE0GcFtv9t70IbFePY/qOSrrX732r8aNsHy
qqLHP50Vpj9SIOm/63qQiU2r2D/RfZH6lVTkvw3OnU+EL/S/VEqhO7U80T/j
urnRmav7P3SbFQpZKOm/zGJwUiC22z9dkN47nQ/kvyOf9foP4b8/PR6e3SHx
8L8NPq6sMlvtv9qKvAn2Z92/dLHkEKql6T84XdZl8j6zvyU/6z2ePdK/XkIN
UM0w8r/gIG0P2Tvfv4UoxqeNT/W/nHKiXeqd9r8tvGYmqFjmv+ZUIOf+WrQ/
MDQmoAGY5L+TnpCI3F3wv0B8mdz/I9U/1jbGp9cQ8D+zWcvE/wzgv/RS2h/m
rrq/MtTmHpxu0r8chF91oVe+v7J3aPB11PC/xrGswWVE8b+E4Hb285jivyTz
3IgqQ8e/Uh7bGjDR8L/F1QWmLUj0v24NqeSrwes/MqjTgBjl9T92gj7zd3Ll
P5jSZWn5Pa8/+IPDw9Bt7D/A9Ut7Z7jkP8iSYXty0t+/nEP8pLA2yT+NIpmv
KtrEv3RTV0VbPci/2J4LB4Lw8L8idSAF7df5v9iWpYTGEtO/DNgLPA8VyD/q
B3K/rIb3v/rFfztvs+i/Fdq7dDY40r9Of+MmYEPHP+Ulu98Ey/C/Cd8GqkEe
8b84xpcqCZC7v6PgxjxFNOM/8PX7UNTWjr/ws2rnPyfwvzt3aiI=
             "], 
            "supportVectorCoefficients" -> {3., 3., 3., 2.4409819055042505`, 
             2.7845529724751645`, 1.512425516072857, 1.5805619118456724`, 3., 
             0.810512654644151, 1.6395444463564925`, 
             3., -3., -3., -3., -1.9607600226439101`, -2.8078193842546777`, \
-3., -3., -3., -3.}, "rho" -> -0.12005452785740509`|>, <|
           "supportVectors" -> {{-0.5879177369349873, 1.0086616543051536`, 
             0.4005237139385449, 
             0.06535142425524958}, {-1.0741814302656365`, \
-0.2345462068961635, -0.2867753741155161, -0.4968681063136605}, \
{-0.15905005520252533`, 1.052363842394187, -0.36497969715892464`, 
             0.6453067785049251}, {2.741130071167883, 0.02582905290160658, 
             1.9315985357275745`, 2.189221461904194}, {0.05474373715722915, 
             0.18402376928278347`, 1.1556595765632538`, 
             1.2176770243228248`}, {-0.1740643260529336, -1.2654747492512521`,
              0.3979429109694211, 0.2593555712954335}}, 
            "supportVectorCoefficients" -> {1.648444727113054, 
             1.8602889531483022`, 
             1.4035941393170297`, -0.07430486118616442, -2.538901394942617, \
-2.299121563449605}, "rho" -> 0.056362263088123254`|>, <|
           "supportVectors" -> {{
             0.709083712263839, -0.2777312391567922, -0.21678296758440288`, \
-1.0986380882895284`}, {-0.5811710180050942, -0.1817372482563765, \
-1.0510712670383282`, -1.2676216588273388`}, {0.8673915353796653, 
             1.3684315712257669`, 0.6702232123244147, 0.06101970111459315}, {
             0.8884052108297729, 0.6475102813853297, -0.4972196774381641, 
             0.19698150688102778`}, {2.741130071167883, 0.02582905290160658, 
             1.9315985357275745`, 2.189221461904194}, {
             0.29402555187648394`, -1.1982948594966463`, 
             0.5489468681979804, -0.052542823947628575`}, {
             0.05474373715722915, 0.18402376928278347`, 1.1556595765632538`, 
             1.2176770243228248`}}, 
            "supportVectorCoefficients" -> {2.4564061743206382`, 
             0.41300393635485644`, 1.804481647616439, 
             0.20867782278051425`, -0.6216817591353707, -3., \
-1.2608878219370767`}, "rho" -> 0.0877389339573849|>}, 
         "ProbabilityCoefficients" -> {{-6.9511566162109375`, 
          1.5748993158340454`}, {-7.1715569496154785`, 
          0.11650567501783371`}, {-7.00684118270874, 0.5728990435600281}}, 
         "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
         MachineLearning`MLProcessor[
          "FirstValues", <|
           "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 4|>, "Key" -> 
            "(f1f2f3f4)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
            False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
         "SupportVectorMachine", "PostProcessor" -> 
         MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "KernelType" -> <|
            "Value" -> "RadialBasisFunction", "Options" -> <||>|>, 
           "GammaScalingParameter" -> <|
            "Value" -> 0.09907105357994911, "Options" -> <||>|>, 
           "SoftMarginParameter" -> <|"Value" -> 3, "Options" -> <||>|>, 
           "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
           "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
           "MulticlassStrategy" -> <|
            "Value" -> "OneVersusOne", "Options" -> <||>|>, 
           "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
           "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "PanelCell" -> CellObject[193329], "TrainingFunction" -> Classify, 
         "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
         "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
         0.132259`6.57297022820959, "LossName" -> "MeanCrossEntropy", 
         "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.10134249392450378`, 0.03933042325739837], "Accuracy" -> 
            Around[0.981331733416308, 0.01630400611781592], "EvaluationTime" -> 
            0.00006881407037243174, "TestSize" -> 68, "ModelMemory" -> 18728.,
             "ModelUtility" -> 1.5213385763209009`, "TrainingSize" -> 137, 
            "TrainingTime" -> 0.039810717055349706`, "TrainingMemory" -> 
            147117.3333333333, "ExperimentCount" -> 2, 
            "MeanCrossEntropyHistory" -> {
              Around[0.11020126138785548`, 0.05497918072824403], 
              Around[0.09248372646115208, 0.053438328114023076`]}, 
            "AccuracyHistory" -> {
              Around[0.981331733416308, 0.023057346572829186`], 
              Around[0.981331733416308, 0.023057346572829186`]}, 
            "Configuration" -> {
             "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
              "GammaScalingParameter" -> 0.09907105357994911, 
              "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
              "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
              "Shrinking" -> True, "KernelCacheSize" -> 100}, 
            "FinalTrainingSize" -> 171|>, 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Vector[TypeSystem`AnyType, 2], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.09907105357994911|>,
                 "SoftMarginParameter" -> <|"Value" -> 3|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5345922492736722, 0.08867592836794873], "Accuracy" -> 
                 Around[0.7860196413292989, 0.045301653578056586`], 
                 "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 
                 163, "ModelMemory" -> 14888, 
                 "ModelUtility" -> -0.09954240834164285, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 262168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5345922492736722, 0.06270335027698908]}, 
                 "AccuracyHistory" -> {
                   Around[0.7860196413292989, 0.032033106444007635`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.12278076394644068`, 0.04778746331345336], 
                 "Accuracy" -> 
                 Around[0.962947458457567, 0.022423428319020475`], 
                 "EvaluationTime" -> 0.00006377974497735949, "TestSize" -> 
                 141, "ModelMemory" -> 17192, "ModelUtility" -> 
                 1.3292371838600485`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.12589254117941673`, "TrainingMemory" -> 132792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.12278076394644068`, 0.03379083936464623]}, 
                 "AccuracyHistory" -> {
                   Around[0.962947458457567, 0.015855758221829844`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10134249392450378`, 0.03933042325739837], 
                 "Accuracy" -> Around[0.981331733416308, 0.01630400611781592],
                  "EvaluationTime" -> 0.00006881407037243174, "TestSize" -> 
                 68, "ModelMemory" -> 18728., "ModelUtility" -> 
                 1.5213385763209009`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.039810717055349706`, "TrainingMemory" -> 147117.3333333333,
                  "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.11020126138785548`, 0.05497918072824403], 
                   Around[0.09248372646115208, 0.053438328114023076`]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`], 
                   Around[0.981331733416308, 0.023057346572829186`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006881407037243174, "MeanCrossEntropy" -> 
                Around[0.10134249392450378`, 0.03933042325739837], 
                "ModelMemory" -> 18728., "TrainingMemory" -> 
                147117.3333333333, "TrainingTime" -> 0.24921698052217842`|>, 
              "Index" -> 1|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.04284255371261575|>,
                 "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.14189306452613357`, 0.09068217994015305], 
                 "Accuracy" -> 
                 Around[0.9527603048448795, 0.05111045855369065], 
                 "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34,
                  "ModelMemory" -> 25384, "ModelUtility" -> 
                 1.1392392385571801`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 151232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.14189306452613357`, 0.06412198436846094]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1789743338750649, 0.04451961839550031], "Accuracy" -> 
                 Around[0.9499148849786256, 0.025879802441676963`], 
                 "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 
                 141, "ModelMemory" -> 19240, "ModelUtility" -> 
                 0.978803960807462, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.1, "TrainingMemory" -> 131576, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.1789743338750649, 0.03148012406329563]}, 
                 "AccuracyHistory" -> {
                   Around[0.9499148849786256, 0.01829978380227795]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000056469102206169774`, 
                "MeanCrossEntropy" -> 
                Around[0.1789743338750649, 0.04451961839550031], 
                "ModelMemory" -> 19240, "TrainingMemory" -> 131576, 
                "TrainingTime" -> 0.22111872336272723`|>, "Index" -> 2|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|
                 "Value" -> 0.13231134821540158`|>, 
                "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.1501046163281339, 0.09794541338406397], "Accuracy" -> 
                 Around[0.9527603048448795, 0.05111045855369065], 
                 "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34,
                  "ModelMemory" -> 25896, "ModelUtility" -> 
                 1.0806023140541448`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 157368, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1501046163281339, 0.06925786598999126]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.19417513180260854`, 0.04483330013928714], 
                 "Accuracy" -> 
                 Around[0.9499148849786256, 0.025879802441676963`], 
                 "EvaluationTime" -> 0.00003196559394665573, "TestSize" -> 
                 141, "ModelMemory" -> 20264, "ModelUtility" -> 
                 0.900693835828528, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.12589254117941673`, "TrainingMemory" -> 125448, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.19417513180260854`, 0.03170193055146172]}, 
                 "AccuracyHistory" -> {
                   Around[0.9499148849786256, 0.01829978380227795]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00003196559394665573, "MeanCrossEntropy" -> 
                Around[0.19417513180260854`, 0.04483330013928714], 
                "ModelMemory" -> 20264, "TrainingMemory" -> 125448, 
                "TrainingTime" -> 0.26539496877952984`|>, "Index" -> 3|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|
                 "Value" -> 0.13510820499964576`|>, 
                "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.1348595933591114, 0.08166270446618575], "Accuracy" -> 
                 Around[0.9527603048448795, 0.05111045855369065], 
                 "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 34,
                  "ModelMemory" -> 39208, "ModelUtility" -> 
                 1.1960443654318684`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 157392, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1348595933591114, 0.0577442520980729]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.49706163886598287`, 0.07773889568702189], 
                 "Accuracy" -> 
                 Around[0.7881020927581578, 0.048510939104400755`], 
                 "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 
                 141, "ModelMemory" -> 22312, 
                 "ModelUtility" -> -0.02491639091439868, "TrainingSize" -> 30,
                  "TrainingTime" -> 0.1, "TrainingMemory" -> 124992, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.49706163886598287`, 0.05496970030224683]}, 
                 "AccuracyHistory" -> {
                   Around[0.7881020927581578, 0.03430241400244943]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000050662052239030834`, 
                "MeanCrossEntropy" -> 
                Around[0.49706163886598287`, 0.07773889568702189], 
                "ModelMemory" -> 22312, "TrainingMemory" -> 124992, 
                "TrainingTime" -> 0.22111872336272723`|>, "Index" -> 4|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.1553730884521598|>, 
                "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.10428786915591529`, 0.03922460547321318], 
                 "Accuracy" -> Around[0.981331733416308, 0.01630400611781592],
                  "EvaluationTime" -> 0.00009300816647554056, "TestSize" -> 
                 68, "ModelMemory" -> 21288., "ModelUtility" -> 
                 1.494914076485661, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.0696614567691945, "TrainingMemory" -> 170632., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.11219250503241099`, 0.055368897642941624`], 
                   Around[0.0963832332794196, 0.05335485673464006]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`], 
                   Around[0.981331733416308, 0.023057346572829186`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.616247621403625, 0.10176799561913254`], "Accuracy" -> 
                 Around[0.7860196413292989, 0.045301653578056586`], 
                 "EvaluationTime" -> 0.00003481082264833104, "TestSize" -> 
                 163, "ModelMemory" -> 14888, 
                 "ModelUtility" -> -0.24154475613337156`, "TrainingSize" -> 8,
                  "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
                 110624, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.616247621403625, 0.07196083981005147]}, 
                 "AccuracyHistory" -> {
                   Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00003481082264833104, "MeanCrossEntropy" -> 
                Around[0.616247621403625, 0.10176799561913254`], 
                "ModelMemory" -> 14888, "TrainingMemory" -> 110624, 
                "TrainingTime" -> 0.12373640475807379`|>, "Index" -> 5|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.04652120815408778|>,
                 "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.855122971089877, 0.10794403486293765`], "Accuracy" -> 
                 Around[0.7375398831019185, 0.04859946995048178], 
                 "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 
                 163, "ModelMemory" -> 15144, 
                 "ModelUtility" -> -0.561579681521574, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
                 151688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.855122971089877, 0.0763279590402203]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375398831019185, 0.03436501476405751]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3613812484897011, 0.05696484694559005], "Accuracy" -> 
                 Around[0.7881020927581578, 0.048510939104400755`], 
                 "EvaluationTime" -> 0.000056469102206169774`, "TestSize" -> 
                 141, "ModelMemory" -> 20776, "ModelUtility" -> 
                 0.29362504649114296`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.12589254117941673`, "TrainingMemory" -> 123952, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3613812484897011, 0.04028022956448051]}, 
                 "AccuracyHistory" -> {
                   Around[0.7881020927581578, 0.03430241400244943]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.12360967476307833`, 0.04134538987553945], 
                 "Accuracy" -> 
                 Around[0.9670460191305937, 0.024123170746064293`], 
                 "EvaluationTime" -> 0.00008025539728615234, "TestSize" -> 68,
                  "ModelMemory" -> 32040., "ModelUtility" -> 
                 1.3327136731642935`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.04324671915780888, "TrainingMemory" -> 153488., 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.13210523096026208`, 0.06055292622107441], 
                   Around[0.11511411856589457`, 0.054389127799587815`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864], 
                   Around[0.981331733416308, 0.023057346572829186`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00008025539728615234, "MeanCrossEntropy" -> 
                Around[0.12360967476307833`, 0.04134538987553945], 
                "ModelMemory" -> 32040., "TrainingMemory" -> 153488., 
                "TrainingTime" -> 0.13341230504896331`|>, "Index" -> 6|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.2629933443766388|>, 
                "SoftMarginParameter" -> <|"Value" -> 3|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.10269229416573603`, 0.07550391386893379], 
                 "Accuracy" -> Around[0.981331733416308, 0.03260801223563184],
                  "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 
                 34, "ModelMemory" -> 20776, "ModelUtility" -> 
                 1.445668451573836, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 205232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10269229416573603`, 0.053389329502848096`]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.46692869878335097`, 0.08347075118845407], 
                 "Accuracy" -> 
                 Around[0.7860196413292989, 0.045301653578056586`], 
                 "EvaluationTime" -> 0.00004382422923744385, "TestSize" -> 
                 163, "ModelMemory" -> 15144, "ModelUtility" -> 
                 0.03329327176323782, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.03981071705534971, "TrainingMemory" -> 111736, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.46692869878335097`, 0.05902273419609094]}, 
                 "AccuracyHistory" -> {
                   Around[0.7860196413292989, 0.032033106444007635`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00004382422923744385, "MeanCrossEntropy" -> 
                Around[0.46692869878335097`, 0.08347075118845407], 
                "ModelMemory" -> 15144, "TrainingMemory" -> 111736, 
                "TrainingTime" -> 0.11819504952737522`|>, "Index" -> 7|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.3399229866674369|>, 
                "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.11315751444753541`, 0.07790552967744314], 
                 "Accuracy" -> Around[0.981331733416308, 0.03260801223563184],
                  "EvaluationTime" -> 0.00007387901269145822, "TestSize" -> 
                 34, "ModelMemory" -> 25896, "ModelUtility" -> 
                 1.3568132051412571`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 151832, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.11315751444753541`, 0.05508752832684987]}, 
                 "AccuracyHistory" -> {
                   Around[0.981331733416308, 0.023057346572829186`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.14940335384418604`, 0.04594640427389665], 
                 "Accuracy" -> 
                 Around[0.9629474584575669, 0.022423428319020482`], 
                 "EvaluationTime" -> 0.000050662052239030834`, "TestSize" -> 
                 141, "ModelMemory" -> 20776, "ModelUtility" -> 
                 1.1482591060222105`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.15848931924611134`, "TrainingMemory" -> 167664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.14940335384418604`, 0.03248901403321089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9629474584575669, 0.015855758221829847`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000050662052239030834`, 
                "MeanCrossEntropy" -> 
                Around[0.14940335384418604`, 0.04594640427389665], 
                "ModelMemory" -> 20776, "TrainingMemory" -> 167664, 
                "TrainingTime" -> 0.3211354592735776|>, "Index" -> 8|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.3450433037666898|>, 
                "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1745310820007064`, 0.09515238964789184], "Accuracy" -> 
                 Around[0.3920664103869573, 0.05392741362697978], 
                 "EvaluationTime" -> 0.00006945672258328006, "TestSize" -> 
                 163, "ModelMemory" -> 14888, 
                 "ModelUtility" -> -0.8700983824521907, "TrainingSize" -> 8, 
                 "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
                 112280, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1745310820007064`, 0.06728289996612896]}, 
                 "AccuracyHistory" -> {
                   Around[0.3920664103869573, 0.03813243986748923]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6252248224206084, 0.06508281549491828], "Accuracy" -> 
                 Around[0.7881020927581578, 0.048510939104400755`], 
                 "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 
                 141, "ModelMemory" -> 22312, 
                 "ModelUtility" -> -0.2441187527253822, "TrainingSize" -> 30, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 169760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6252248224206084, 0.046020500175169614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7881020927581578, 0.03430241400244943]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.12228096651947476`, 0.04006466605819099], 
                 "Accuracy" -> 
                 Around[0.9527603048448796, 0.02555522927684533], 
                 "EvaluationTime" -> 0.00008663178188084646, "TestSize" -> 68,
                  "ModelMemory" -> 41256., "ModelUtility" -> 
                 1.3448028885831675`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.1, "TrainingMemory" -> 224469.3333333333, 
                 "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.12043306576817277`, 0.05598749618467007], 
                   Around[0.12412886727077675`, 0.057232425338394885`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864], 
                   Around[0.9527603048448797, 0.03614055183286865]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00008663178188084646, "MeanCrossEntropy" -> 
                Around[0.12228096651947476`, 0.04006466605819099], 
                "ModelMemory" -> 41256., "TrainingMemory" -> 
                224469.3333333333, "TrainingTime" -> 0.1749362416109024|>, 
              "Index" -> 9|>, <|
             "Value" -> "SupportVectorMachine", 
              "Options" -> <|
               "KernelType" -> <|"Value" -> "RadialBasisFunction"|>, 
                "GammaScalingParameter" -> <|"Value" -> 0.337149860742572|>, 
                "SoftMarginParameter" -> <|"Value" -> 1.|>, 
                "PolynomialDegree" -> <|"Value" -> 3|>, 
                "BiasParameter" -> <|"Value" -> 1|>, 
                "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
                "Shrinking" -> <|"Value" -> True|>, 
                "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.13747518666522562`, 0.05285926469738658], 
                 "Accuracy" -> 
                 Around[0.9629474584575669, 0.022423428319020482`], 
                 "EvaluationTime" -> 0.00004024229852253872, "TestSize" -> 
                 141, "ModelMemory" -> 19240, "ModelUtility" -> 
                 1.2170681054692807`, "TrainingSize" -> 30, "TrainingTime" -> 
                 0.12589254117941673`, "TrainingMemory" -> 136144, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.13747518666522562`, 0.037377144516056726`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9629474584575669, 0.015855758221829847`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.12256094814173431`, 0.08156935743518842], 
                 "Accuracy" -> 
                 Around[0.9527603048448795, 0.05111045855369065], 
                 "EvaluationTime" -> 0.000058684185734378794`, "TestSize" -> 
                 34, "ModelMemory" -> 22824, "ModelUtility" -> 
                 1.2810247790707816`, "TrainingSize" -> 137, "TrainingTime" -> 
                 0.05011872336272722, "TrainingMemory" -> 149040, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.12256094814173431`, 0.05767824577945106]}, 
                 "AccuracyHistory" -> {
                   Around[0.9527603048448795, 0.03614055183286864]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000058684185734378794`, 
                "MeanCrossEntropy" -> 
                Around[0.12256094814173431`, 0.08156935743518842], 
                "ModelMemory" -> 22824, "TrainingMemory" -> 149040, 
                "TrainingTime" -> 0.18844948785844123`|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["SupportVectorMachine"]], 
              
              TypeSystem`Struct[{
               "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
                "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
                "Shrinking", "KernelCacheSize"}, {
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[
                   TypeSystem`Enumeration["RadialBasisFunction"]]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Real]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}], 
                TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[TypeSystem`Boolean]}], 
                TypeSystem`Struct[{"Value"}, {
                  TypeSystem`Atom[Integer]}]}]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         171, "PreprocessorEvaluationTime" -> 4.5640625*^-6, 
         "PreprocessorMemory" -> 65712, "InputDimension" -> 4, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -1.059553118646473, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.8602226723542023`17.339187346314993*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.4377651952892555, 
             "ElapsedTimes" -> 0.6307043999999999, "ExperimentCounts" -> 
             5|>, <|"TrainingSizes" -> 30, "TimeBudgets" -> 0.625378850413222,
              "ElapsedTimes" -> 1.2281245, "ExperimentCounts" -> 8|>, <|
            "TrainingSizes" -> 137, "TimeBudgets" -> 0.8933983577331741, 
             "ElapsedTimes" -> 0.9294075, "ExperimentCounts" -> 14|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {42.9}, "ID" -> 
              803269050161587613|>, 
            "f2" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {13.1}, "ID" -> 
              3873503148790622222|>, 
            "f3" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {215}, "ID" -> 
              699058557945447889|>, 
            "f4" -> <|
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {5000}, "ID" -> 
              4483023431942159786|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 3.2400082, 
         "MaxTrainingMemory" -> 1115336, "DataMemory" -> 26048, 
         "FunctionMemory" -> 257672, "LanguageVersion" -> {13., 0}, "Date" -> 
         DateObject[{2022, 4, 29, 12, 4, 32.8662657`9.269325263763646}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{46.7, 17.9, 195, 3300}, {45.4, 18.7, 188, 3525}, {
        45.2, 17.8, 198, 3950}, {46.1, 18.2, 178, 3250}, {
        45.7, 17., 195, 3650}, {49.8, 17.3, 198, 3675}, {
        46.5, 17.9, 192, 3500}, {46.9, 16.6, 192, 2700}, {
        53.5, 19.9, 205, 4500}, {50.6, 19.4, 193, 3800}, {
        49.3, 19.9, 203, 4050}, {49., 19.5, 210, 3950}, {
        47.5, 16.8, 199, 3900}, {49.6, 18.2, 193, 3775}, {
        50.9, 19.1, 196, 3550}, {50.2, 18.8, 202, 3800}, {
        47., 17.3, 185, 3700}, {45.7, 17.3, 193, 3600}, {
        52., 19., 197, 4150}, {46.4, 18.6, 190, 3450}, {
        52.2, 18.8, 197, 3450}, {52., 20.7, 210, 4800}, {
        50.8, 18.5, 201, 4450}, {51.4, 19., 201, 3950}, {
        58., 17.8, 181, 3700}, {46.6, 17.8, 193, 3800}, {
        49.5, 19., 200, 3800}, {50.2, 18.7, 198, 3775}, {
        45.6, 19.4, 194, 3525}, {51.7, 20.3, 194, 3775}, {
        50.7, 19.7, 203, 4050}, {46.2, 17.5, 187, 3650}, {
        46.4, 17.8, 191, 3700}, {46., 21.5, 194, 4200}, {
        41.1, 18.2, 192, 4050}, {39.6, 17.2, 196, 3550}, {
        42.9, 17.6, 196, 4700}, {42., 20.2, 190, 4250}, {
        37.3, 20.5, 199, 3775}, {40.5, 17.9, 187, 3200}, {
        33.1, 16.1, 178, 2900}, {36.6, 18.4, 184, 3475}, {
        37.8, 20., 190, 4250}, {34.1, 18.1, 193, 3475}, {
        42.2, 18.5, 180, 3550}, {37.8, 17.3, 180, 3700}, {
        39.2, 19.6, 195, 4675}, {39.6, 20.7, 191, 3900}, {
        40.3, 18., 195, 3250}, {37.3, 16.8, 192, 3000}, {
        38.6, 17., 188, 2900}, {41.4, 18.6, 191, 3700}, {
        38.2, 18.1, 185, 3950}, {42.1, 19.1, 195, 4000}, {
        39.1, 18.7, 181, 3750}, {38.2, 20., 190, 3900}, {
        32.1, 15.5, 188, 3050}, {40.9, 16.8, 191, 3700}, {
        38.1, 17.6, 187, 3425}, {38.6, 21.2, 191, 3800}, {
        38.1, 18.6, 190, 3700}, {41.1, 19.1, 188, 4100}, {
        39.6, 18.8, 190, 4600}, {37.5, 18.9, 179, 2975}, {
        36.2, 16.1, 187, 3550}, {41.4, 18.5, 202, 3875}, {
        39.7, 18.4, 190, 3900}, {35.9, 19.2, 189, 3800}, {
        39.2, 21.1, 196, 4150}, {36., 17.1, 187, 3700}, {
        37.9, 18.6, 172, 3150}, {36., 18.5, 186, 3100}, {
        39.2, 18.6, 190, 4250}, {36.2, 17.2, 187, 3150}, {
        38.3, 19.2, 189, 3950}, {37.7, 18.7, 180, 3600}, {
        37.2, 19.4, 184, 3900}, {38.8, 17.6, 191, 3275}, {
        39.7, 18.9, 184, 3550}, {37.8, 18.1, 193, 3750}, {
        37.6, 17., 185, 3600}, {39.7, 17.9, 193, 4250}, {
        37.2, 18.1, 178, 3900}, {38.8, 20., 190, 3950}, {
        41.1, 18.6, 189, 3325}, {39., 17.1, 191, 3050}, {
        39., 18.7, 185, 3650}, {36.7, 19.3, 193, 3450}, {
        41.1, 19., 182, 3425}, {40.7, 17., 190, 3725}, {
        42.3, 21.2, 191, 4150}, {35.5, 16.2, 195, 3350}, {
        38.6, 17.2, 199, 3750}, {42.5, 20.7, 197, 4500}, {
        39.5, 17.4, 186, 3800}, {41.1, 18.1, 205, 4300}, {
        35.6, 17.5, 191, 3175}, {44.1, 18., 210, 4000}, {
        40.6, 18.8, 193, 3800}, {40.3, 18.5, 196, 4350}, {
        42.8, 18.5, 195, 4250}, {36.3, 19.5, 190, 3800}, {
        38.9, 17.8, 181, 3625}, {40.9, 18.9, 184, 3900}, {
        36.8, 18.5, 193, 3500}, {40.2, 20.1, 200, 3975}, {
        36.5, 18., 182, 3150}, {36.4, 17., 195, 3325}, {
        40.6, 19., 199, 4000}, {41.3, 20.3, 194, 3550}, {
        37., 16.9, 185, 3000}, {37.5, 18.5, 199, 4475}, {
        45.8, 18.9, 197, 4150}, {43.1, 19.2, 197, 3500}, {
        39.8, 19.1, 184, 4650}, {37.8, 17.1, 186, 3300}, {
        50., 15.9, 224, 5350}, {45.7, 13.9, 214, 4400}, {
        46.1, 15.1, 215, 5100}, {50.8, 17.3, 228, 5600}, {
        44., 13.6, 208, 4350}, {46.4, 15., 216, 4700}, {
        48.6, 16., 230, 5800}, {50.5, 15.9, 222, 5550}, {
        48.4, 16.3, 220, 5400}, {44.5, 14.3, 216, 4100}, {
        46.2, 14.4, 214, 4650}, {46.9, 14.6, 222, 4875}, {
        49.5, 16.1, 224, 5650}, {46.2, 14.1, 217, 4375}, {
        43.4, 14.4, 218, 4600}, {45.2, 14.8, 212, 5200}, {
        50., 15.3, 220, 5550}, {42.8, 14.2, 209, 4700}, {
        46.5, 13.5, 210, 4550}, {47.2, 13.7, 214, 4925}, {
        50., 16.3, 230, 5700}, {48.4, 14.4, 203, 4625}, {
        45.3, 13.8, 208, 4200}, {55.1, 16., 230, 5850}, {
        45.2, 15.8, 215, 5300}, {50.8, 15.7, 226, 5200}, {
        49.4, 15.8, 216, 4925}, {45.4, 14.6, 211, 4800}, {
        48.1, 15.1, 209, 5500}, {49.2, 15.2, 221, 6300}, {
        47.5, 14.2, 209, 4600}, {49.6, 15., 216, 4750}, {
        46.4, 15.6, 221, 5000}, {47.5, 14., 212, 4875}, {
        53.4, 15.8, 219, 5500}, {50., 15.2, 218, 5700}, {
        48.7, 14.1, 210, 4450}, {50.4, 15.3, 224, 5550}, {
        46.1, 13.2, 211, 4500}, {47.3, 15.3, 222, 5250}, {
        43.5, 15.2, 213, 4650}, {49.8, 15.9, 229, 5950}, {
        42.7, 13.7, 208, 3950}, {45.1, 14.4, 210, 4400}, {
        47.7, 15., 216, 4750}, {47.2, 15.5, 215, 4975}, {
        45.5, 13.9, 210, 4200}, {51.1, 16.3, 220, 6000}, {
        47.5, 15., 218, 4950}, {47.6, 14.5, 215, 5400}, {
        48.8, 16.2, 222, 6000}, {45.5, 13.7, 214, 4650}, {
        46.2, 14.5, 209, 4800}, {47.8, 15., 215, 5650}, {
        49.9, 16.1, 213, 5400}}, 
      "Output" -> {
       "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
        "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
        "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
        "Gentoo", "Gentoo"}|>, 
    "Predictions" -> {
     "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", "Chinstrap", 
      "Chinstrap", "Chinstrap", "Chinstrap", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap", "Adelie",
       "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", 
      "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Adelie", "Chinstrap",
       "Adelie", "Adelie", "Adelie", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", "Gentoo", 
      "Gentoo", "Gentoo"}, "LogProbabilities" -> CompressedData["
1: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
     "], "CountMatrix" -> {{81, 2, 0, 0}, {0, 33, 0, 0}, {0, 0, 55, 0}}, 
    "IndicesMatrix" -> {{{34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 
       47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
        65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 
       100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 
       115, 116}, {98, 113}, {}, {}}, {{}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
        12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 
       29, 30, 31, 32, 33}, {}, {}}, {{}, {}, {117, 118, 119, 120, 121, 122, 
       123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 
       137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 
       151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 
       165, 166, 167, 168, 169, 170, 171}, {}}}, 
    "ExtendedClasses" -> {"Adelie", "Chinstrap", "Gentoo"}, "Weights" -> 
    SparseArray[Automatic, {171}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00012615087719298245`, "SingleEvaluationTime" -> 
    0.0058579375, "Version" -> {13., 0}|>]]], "Output",
 CellChangeTimes->{3.860073125560253*^9, 3.8601549246979704`*^9, 
  3.8602190993584614`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"0e729a29-346a-4c76-9b90-daf0f37e6301"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"measuresvm", "/@", 
   RowBox[{"{", "\"\<FScore\>\"", "}"}]}], " ", "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.860073148144351*^9, 3.860073149643716*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"b1dfcc7f-e6e8-4eb3-8e25-c14a9e4da253"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      RowBox[{"\[LeftAssociation]", 
       RowBox[{
        RowBox[{"\<\"Adelie\"\>", "\[Rule]", "0.9878048780487805`"}], ",", 
        RowBox[{"\<\"Chinstrap\"\>", "\[Rule]", "0.9705882352941176`"}], ",", 
        RowBox[{"\<\"Gentoo\"\>", "\[Rule]", "1.`"}]}], 
       "\[RightAssociation]"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Column],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.86007315015516*^9, 3.8601551240221014`*^9, 
  3.8602191532407207`*^9},
 CellLabel->
  "Out[87]//TableForm=",ExpressionUUID->"06e80906-df70-4820-9b70-\
94f051c9b076"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"measuresvm", "[", "\"\<AccuracyRejectionPlot\>\"", "]"}], ",", 
   RowBox[{"ImageSize", "->", 
    RowBox[{"{", 
     RowBox[{"377", ",", "269"}], "}"}]}], ",", 
   RowBox[{"AspectRatio", "->", "Full"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.86007317423929*^9, 3.860073176269869*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"621f84ec-ffbc-41a2-bfcb-94132ccf8a19"],

Cell[BoxData[
 GraphicsBox[{{{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9800581989718052}, {0., 0.9883040935672515}}], 
          LineBox[{{0., 0.9883040935672515}, {0., 0.9965499881626977}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 1.}, {0.04678362573099415, 1.}}], 
          LineBox[{{0.04678362573099415, 1.}, {0.06298001568722976, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07646617909900748, 1.}, {0.09941520467836257, 1.}}], 
          LineBox[{{0.09941520467836257, 1.}, {0.12236423025771766`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.12450766073666947`, 1.}, {0.15204678362573099`, 1.}}], 
          LineBox[{{0.15204678362573099`, 1.}, {0.1795859065147925, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.17373390279456613`, 1.}, {0.2046783625730994, 1.}}], 
          LineBox[{{0.2046783625730994, 1.}, {0.23562282235163268`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 1.}, {0.25146198830409355`, 1.}}], 
          LineBox[{{0.25146198830409355`, 1.}, {0.28473703254256205`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3142742046419644, 1.}, {0.3508771929824561, 1.}}], 
          LineBox[{{0.3508771929824561, 1.}, {0.3874801813229478, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4645763828988186, 1.}, {0.5029239766081871, 1.}}], 
          LineBox[{{0.5029239766081871, 1.}, {0.5412715703175557, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5174447588572202, 1.}, {0.5555555555555556, 1.}}], 
          LineBox[{{0.5555555555555556, 1.}, {0.593666352253891, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660856, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309904, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7152629674574378, 1.}, {0.7485380116959064, 1.}}], 
          LineBox[{{0.7485380116959064, 1.}, {0.781813055934375, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7643771776483671, 1.}, {0.7953216374269005, 1.}}], 
          LineBox[{{0.7953216374269005, 1.}, {0.826266097205434, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8204140934852073, 1.}, {0.847953216374269, 1.}}], 
          LineBox[{{0.847953216374269, 1.}, {0.8754923392633307, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8711992844473705, 1.}, {0.8947368421052632, 1.}}], 
          LineBox[{{0.8947368421052632, 1.}, {0.9182743997631558, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{LineBox[{{0.93701998431277, 1.}, {0.9532163742690059, 1.}}],
           LineBox[{{0.9532163742690059, 1.}, {0.9694127642252417, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9965499881626977}, 
             Offset[{3, 0}, {0., 0.9965499881626977}]}, {{0., 
             0.9965499881626977}, 
             Offset[{-3, 0}, {0., 0.9965499881626977}]}, {{0., 
             0.9800581989718052}, 
             Offset[{3, 0}, {0., 0.9800581989718052}]}, {{0., 
             0.9800581989718052}, 
             Offset[{-3, 0}, {0., 0.9800581989718052}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 1.}, 
             Offset[{0, 3}, {0.06298001568722976, 1.}]}, {{
             0.06298001568722976, 1.}, 
             Offset[{0, -3}, {0.06298001568722976, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, 3}, {0.030587235774758536`, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, -3}, {0.030587235774758536`, 1.}]}}], {{{1., 0.}, {0.,
            1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12236423025771766`, 1.}, 
             Offset[{0, 3}, {0.12236423025771766`, 1.}]}, {{
             0.12236423025771766`, 1.}, 
             Offset[{0, -3}, {0.12236423025771766`, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, 3}, {0.07646617909900748, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, -3}, {0.07646617909900748, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.1795859065147925, 1.}, 
             Offset[{0, 3}, {0.1795859065147925, 1.}]}, {{0.1795859065147925, 
             1.}, Offset[{0, -3}, {0.1795859065147925, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, 3}, {0.12450766073666947`, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, -3}, {0.12450766073666947`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.23562282235163268`, 1.}, 
             Offset[{0, 3}, {0.23562282235163268`, 1.}]}, {{
             0.23562282235163268`, 1.}, 
             Offset[{0, -3}, {0.23562282235163268`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, 3}, {0.17373390279456613`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, -3}, {0.17373390279456613`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 1.}, 
             Offset[{0, 3}, {0.28473703254256205`, 1.}]}, {{
             0.28473703254256205`, 1.}, 
             Offset[{0, -3}, {0.28473703254256205`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, 3}, {0.21818694406562505`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, -3}, {0.21818694406562505`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.3874801813229478, 1.}, 
             Offset[{0, 3}, {0.3874801813229478, 1.}]}, {{0.3874801813229478, 
             1.}, Offset[{0, -3}, {0.3874801813229478, 1.}]}, {{
             0.3142742046419644, 1.}, 
             Offset[{0, 3}, {0.3142742046419644, 1.}]}, {{0.3142742046419644, 
             1.}, Offset[{0, -3}, {0.3142742046419644, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5412715703175557, 1.}, 
             Offset[{0, 3}, {0.5412715703175557, 1.}]}, {{0.5412715703175557, 
             1.}, Offset[{0, -3}, {0.5412715703175557, 1.}]}, {{
             0.4645763828988186, 1.}, 
             Offset[{0, 3}, {0.4645763828988186, 1.}]}, {{0.4645763828988186, 
             1.}, Offset[{0, -3}, {0.4645763828988186, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.593666352253891, 1.}, 
             Offset[{0, 3}, {0.593666352253891, 1.}]}, {{0.593666352253891, 
             1.}, Offset[{0, -3}, {0.593666352253891, 1.}]}, {{
             0.5174447588572202, 1.}, 
             Offset[{0, 3}, {0.5174447588572202, 1.}]}, {{0.5174447588572202, 
             1.}, Offset[{0, -3}, {0.5174447588572202, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309904, 1.}, 
             Offset[{0, 3}, {0.7311885453309904, 1.}]}, {{0.7311885453309904, 
             1.}, Offset[{0, -3}, {0.7311885453309904, 1.}]}, {{
             0.6606243201660856, 1.}, 
             Offset[{0, 3}, {0.6606243201660856, 1.}]}, {{0.6606243201660856, 
             1.}, Offset[{0, -3}, {0.6606243201660856, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.781813055934375, 1.}, 
             Offset[{0, 3}, {0.781813055934375, 1.}]}, {{0.781813055934375, 
             1.}, Offset[{0, -3}, {0.781813055934375, 1.}]}, {{
             0.7152629674574378, 1.}, 
             Offset[{0, 3}, {0.7152629674574378, 1.}]}, {{0.7152629674574378, 
             1.}, Offset[{0, -3}, {0.7152629674574378, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.826266097205434, 1.}, 
             Offset[{0, 3}, {0.826266097205434, 1.}]}, {{0.826266097205434, 
             1.}, Offset[{0, -3}, {0.826266097205434, 1.}]}, {{
             0.7643771776483671, 1.}, 
             Offset[{0, 3}, {0.7643771776483671, 1.}]}, {{0.7643771776483671, 
             1.}, Offset[{0, -3}, {0.7643771776483671, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8754923392633307, 1.}, 
             Offset[{0, 3}, {0.8754923392633307, 1.}]}, {{0.8754923392633307, 
             1.}, Offset[{0, -3}, {0.8754923392633307, 1.}]}, {{
             0.8204140934852073, 1.}, 
             Offset[{0, 3}, {0.8204140934852073, 1.}]}, {{0.8204140934852073, 
             1.}, Offset[{0, -3}, {0.8204140934852073, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9182743997631558, 1.}, 
             Offset[{0, 3}, {0.9182743997631558, 1.}]}, {{0.9182743997631558, 
             1.}, Offset[{0, -3}, {0.9182743997631558, 1.}]}, {{
             0.8711992844473705, 1.}, 
             Offset[{0, 3}, {0.8711992844473705, 1.}]}, {{0.8711992844473705, 
             1.}, Offset[{0, -3}, {0.8711992844473705, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9694127642252417, 1.}, 
             Offset[{0, 3}, {0.9694127642252417, 1.}]}, {{0.9694127642252417, 
             1.}, Offset[{0, -3}, {0.9694127642252417, 1.}]}, {{
             0.93701998431277, 1.}, 
             Offset[{0, 3}, {0.93701998431277, 1.}]}, {{0.93701998431277, 1.},
              Offset[{0, -3}, {0.93701998431277, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQAWIQDQPMv7hf6C94b+9Qz/iX9ctye4joB3uT6Rdj3Ip3
wvkp5hPvupQdhvP1Fu/seWZ0Cs4Haxe/AOenG849WiJ2Gc73AQtcQzP/pv1/
MHhvL3k2FSh0B828B3B+kczxQpnjD9HMfwznR/gn2rZ+fQLn+4Ed/AzOh/jv
OZr9L+F89U2zT+QpvYbzpU9la6xf+AbO5wGG0v6Gd3A+xLvv4XxYePYobZvf
H/weLg/jj4Y3dcMbAPG26nY=
     "], {{{}, 
       {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.2], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{1, 22, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
          10, 9, 8, 7, 6, 5, 4, 3, 2}}]]}, {}, {}}, {{}, {}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
         NCache[
          Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21}]}}}], {{}, {}}}, {{{
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {
          LineBox[{{0., 0.9800581989718052}, {0., 0.9883040935672515}}], 
          LineBox[{{0., 0.9883040935672515}, {0., 0.9965499881626977}}]}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.030587235774758536`, 1.}, {0.04678362573099415, 1.}}], 
          LineBox[{{0.04678362573099415, 1.}, {0.06298001568722976, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.07646617909900748, 1.}, {0.09941520467836257, 1.}}], 
          LineBox[{{0.09941520467836257, 1.}, {0.12236423025771766`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.12450766073666947`, 1.}, {0.15204678362573099`, 1.}}], 
          LineBox[{{0.15204678362573099`, 1.}, {0.1795859065147925, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.17373390279456613`, 1.}, {0.2046783625730994, 1.}}], 
          LineBox[{{0.2046783625730994, 1.}, {0.23562282235163268`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.21818694406562505`, 1.}, {0.25146198830409355`, 1.}}], 
          LineBox[{{0.25146198830409355`, 1.}, {0.28473703254256205`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.26315789473684204`, 1.}, {0.2982456140350877, 1.}}], 
          LineBox[{{0.2982456140350877, 1.}, {0.33333333333333337`, 
           1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3142742046419644, 1.}, {0.3508771929824561, 1.}}], 
          LineBox[{{0.3508771929824561, 1.}, {0.3874801813229478, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.3601244291558333, 0.9999999999999999}, {
           0.39766081871345027`, 0.9999999999999999}}], 
          LineBox[{{0.39766081871345027`, 0.9999999999999999}, {
           0.4351972082710672, 0.9999999999999999}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.41213412400168625`, 1.}, {0.4502923976608187, 1.}}], 
          LineBox[{{0.4502923976608187, 1.}, {0.4884506713199511, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.4645763828988186, 1.}, {0.5029239766081871, 1.}}], 
          LineBox[{{0.5029239766081871, 1.}, {0.5412715703175557, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5174447588572202, 1.}, {0.5555555555555556, 1.}}], 
          LineBox[{{0.5555555555555556, 1.}, {0.593666352253891, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.5588638410710047, 1.}, {0.5964912280701754, 1.}}], 
          LineBox[{{0.5964912280701754, 1.}, {0.6341186150693461, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6185109464600299, 1.}, {0.6549707602339181, 1.}}], 
          LineBox[{{0.6549707602339181, 1.}, {0.6914305740078063, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.6606243201660856, 1.}, {0.695906432748538, 1.}}], 
          LineBox[{{0.695906432748538, 1.}, {0.7311885453309904, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7152629674574378, 1.}, {0.7485380116959064, 1.}}], 
          LineBox[{{0.7485380116959064, 1.}, {0.781813055934375, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.7643771776483671, 1.}, {0.7953216374269005, 1.}}], 
          LineBox[{{0.7953216374269005, 1.}, {0.826266097205434, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8204140934852073, 1.}, {0.847953216374269, 1.}}], 
          LineBox[{{0.847953216374269, 1.}, {0.8754923392633307, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.8711992844473705, 1.}, {0.8947368421052632, 1.}}], 
          LineBox[{{0.8947368421052632, 1.}, {0.9182743997631558, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{LineBox[{{0.93701998431277, 1.}, {0.9532163742690059, 1.}}],
           LineBox[{{0.9532163742690059, 1.}, {0.9694127642252417, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{
          LineBox[{{0.9883040935672512, 1.}, {0.9941520467836257, 1.}}], 
          LineBox[{{0.9941520467836257, 1.}, {1.0000000000000002`, 1.}}]}, {}},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{{}, {}},
        Antialiasing->False]}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{{{0., 0.9965499881626977}, 
             Offset[{3, 0}, {0., 0.9965499881626977}]}, {{0., 
             0.9965499881626977}, 
             Offset[{-3, 0}, {0., 0.9965499881626977}]}, {{0., 
             0.9800581989718052}, 
             Offset[{3, 0}, {0., 0.9800581989718052}]}, {{0., 
             0.9800581989718052}, 
             Offset[{-3, 0}, {0., 0.9800581989718052}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.06298001568722976, 1.}, 
             Offset[{0, 3}, {0.06298001568722976, 1.}]}, {{
             0.06298001568722976, 1.}, 
             Offset[{0, -3}, {0.06298001568722976, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, 3}, {0.030587235774758536`, 1.}]}, {{
             0.030587235774758536`, 1.}, 
             Offset[{0, -3}, {0.030587235774758536`, 1.}]}}], {{{1., 0.}, {0.,
            1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.12236423025771766`, 1.}, 
             Offset[{0, 3}, {0.12236423025771766`, 1.}]}, {{
             0.12236423025771766`, 1.}, 
             Offset[{0, -3}, {0.12236423025771766`, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, 3}, {0.07646617909900748, 1.}]}, {{
             0.07646617909900748, 1.}, 
             Offset[{0, -3}, {0.07646617909900748, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.1795859065147925, 1.}, 
             Offset[{0, 3}, {0.1795859065147925, 1.}]}, {{0.1795859065147925, 
             1.}, Offset[{0, -3}, {0.1795859065147925, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, 3}, {0.12450766073666947`, 1.}]}, {{
             0.12450766073666947`, 1.}, 
             Offset[{0, -3}, {0.12450766073666947`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.23562282235163268`, 1.}, 
             Offset[{0, 3}, {0.23562282235163268`, 1.}]}, {{
             0.23562282235163268`, 1.}, 
             Offset[{0, -3}, {0.23562282235163268`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, 3}, {0.17373390279456613`, 1.}]}, {{
             0.17373390279456613`, 1.}, 
             Offset[{0, -3}, {0.17373390279456613`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.28473703254256205`, 1.}, 
             Offset[{0, 3}, {0.28473703254256205`, 1.}]}, {{
             0.28473703254256205`, 1.}, 
             Offset[{0, -3}, {0.28473703254256205`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, 3}, {0.21818694406562505`, 1.}]}, {{
             0.21818694406562505`, 1.}, 
             Offset[{0, -3}, {0.21818694406562505`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.33333333333333337`, 1.}, 
             Offset[{0, 3}, {0.33333333333333337`, 1.}]}, {{
             0.33333333333333337`, 1.}, 
             Offset[{0, -3}, {0.33333333333333337`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, 3}, {0.26315789473684204`, 1.}]}, {{
             0.26315789473684204`, 1.}, 
             Offset[{0, -3}, {0.26315789473684204`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.3874801813229478, 1.}, 
             Offset[{0, 3}, {0.3874801813229478, 1.}]}, {{0.3874801813229478, 
             1.}, Offset[{0, -3}, {0.3874801813229478, 1.}]}, {{
             0.3142742046419644, 1.}, 
             Offset[{0, 3}, {0.3142742046419644, 1.}]}, {{0.3142742046419644, 
             1.}, Offset[{0, -3}, {0.3142742046419644, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, 3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.4351972082710672, 0.9999999999999999}, 
             Offset[{0, -3}, {0.4351972082710672, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, 3}, {0.3601244291558333, 0.9999999999999999}]}, {{
             0.3601244291558333, 0.9999999999999999}, 
             Offset[{0, -3}, {0.3601244291558333, 0.9999999999999999}]}}], {{{
           1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.4884506713199511, 1.}, 
             Offset[{0, 3}, {0.4884506713199511, 1.}]}, {{0.4884506713199511, 
             1.}, Offset[{0, -3}, {0.4884506713199511, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, 3}, {0.41213412400168625`, 1.}]}, {{
             0.41213412400168625`, 1.}, 
             Offset[{0, -3}, {0.41213412400168625`, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.5412715703175557, 1.}, 
             Offset[{0, 3}, {0.5412715703175557, 1.}]}, {{0.5412715703175557, 
             1.}, Offset[{0, -3}, {0.5412715703175557, 1.}]}, {{
             0.4645763828988186, 1.}, 
             Offset[{0, 3}, {0.4645763828988186, 1.}]}, {{0.4645763828988186, 
             1.}, Offset[{0, -3}, {0.4645763828988186, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.593666352253891, 1.}, 
             Offset[{0, 3}, {0.593666352253891, 1.}]}, {{0.593666352253891, 
             1.}, Offset[{0, -3}, {0.593666352253891, 1.}]}, {{
             0.5174447588572202, 1.}, 
             Offset[{0, 3}, {0.5174447588572202, 1.}]}, {{0.5174447588572202, 
             1.}, Offset[{0, -3}, {0.5174447588572202, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6341186150693461, 1.}, 
             Offset[{0, 3}, {0.6341186150693461, 1.}]}, {{0.6341186150693461, 
             1.}, Offset[{0, -3}, {0.6341186150693461, 1.}]}, {{
             0.5588638410710047, 1.}, 
             Offset[{0, 3}, {0.5588638410710047, 1.}]}, {{0.5588638410710047, 
             1.}, Offset[{0, -3}, {0.5588638410710047, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.6914305740078063, 1.}, 
             Offset[{0, 3}, {0.6914305740078063, 1.}]}, {{0.6914305740078063, 
             1.}, Offset[{0, -3}, {0.6914305740078063, 1.}]}, {{
             0.6185109464600299, 1.}, 
             Offset[{0, 3}, {0.6185109464600299, 1.}]}, {{0.6185109464600299, 
             1.}, Offset[{0, -3}, {0.6185109464600299, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.7311885453309904, 1.}, 
             Offset[{0, 3}, {0.7311885453309904, 1.}]}, {{0.7311885453309904, 
             1.}, Offset[{0, -3}, {0.7311885453309904, 1.}]}, {{
             0.6606243201660856, 1.}, 
             Offset[{0, 3}, {0.6606243201660856, 1.}]}, {{0.6606243201660856, 
             1.}, Offset[{0, -3}, {0.6606243201660856, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.781813055934375, 1.}, 
             Offset[{0, 3}, {0.781813055934375, 1.}]}, {{0.781813055934375, 
             1.}, Offset[{0, -3}, {0.781813055934375, 1.}]}, {{
             0.7152629674574378, 1.}, 
             Offset[{0, 3}, {0.7152629674574378, 1.}]}, {{0.7152629674574378, 
             1.}, Offset[{0, -3}, {0.7152629674574378, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.826266097205434, 1.}, 
             Offset[{0, 3}, {0.826266097205434, 1.}]}, {{0.826266097205434, 
             1.}, Offset[{0, -3}, {0.826266097205434, 1.}]}, {{
             0.7643771776483671, 1.}, 
             Offset[{0, 3}, {0.7643771776483671, 1.}]}, {{0.7643771776483671, 
             1.}, Offset[{0, -3}, {0.7643771776483671, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.8754923392633307, 1.}, 
             Offset[{0, 3}, {0.8754923392633307, 1.}]}, {{0.8754923392633307, 
             1.}, Offset[{0, -3}, {0.8754923392633307, 1.}]}, {{
             0.8204140934852073, 1.}, 
             Offset[{0, 3}, {0.8204140934852073, 1.}]}, {{0.8204140934852073, 
             1.}, Offset[{0, -3}, {0.8204140934852073, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9182743997631558, 1.}, 
             Offset[{0, 3}, {0.9182743997631558, 1.}]}, {{0.9182743997631558, 
             1.}, Offset[{0, -3}, {0.9182743997631558, 1.}]}, {{
             0.8711992844473705, 1.}, 
             Offset[{0, 3}, {0.8711992844473705, 1.}]}, {{0.8711992844473705, 
             1.}, Offset[{0, -3}, {0.8711992844473705, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{0.9694127642252417, 1.}, 
             Offset[{0, 3}, {0.9694127642252417, 1.}]}, {{0.9694127642252417, 
             1.}, Offset[{0, -3}, {0.9694127642252417, 1.}]}, {{
             0.93701998431277, 1.}, 
             Offset[{0, 3}, {0.93701998431277, 1.}]}, {{0.93701998431277, 1.},
              Offset[{0, -3}, {0.93701998431277, 1.}]}}], {{{1., 0.}, {0., 
           1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{{{1.0000000000000002`, 1.}, 
             Offset[{0, 3}, {1.0000000000000002`, 1.}]}, {{
             1.0000000000000002`, 1.}, 
             Offset[{0, -3}, {1.0000000000000002`, 1.}]}, {{
             0.9883040935672512, 1.}, 
             Offset[{0, 3}, {0.9883040935672512, 1.}]}, {{0.9883040935672512, 
             1.}, Offset[{0, -3}, {0.9883040935672512, 1.}]}}], {{{1., 0.}, {
           0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], 
       StyleBox[{
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}], 
         GeometricTransformationBox[
          LineBox[{}], {{{1., 0.}, {0., 1.}}, {0., 0.}}]},
        Antialiasing->False]}}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[
           {GrayLevel[1], EdgeForm[{RGBColor[0.34398, 0.49112, 0.89936], 
            AbsoluteThickness[1.]}], 
            DiskBox[{0, 0}, Offset[{2., 2.}, {0., 0.}]]}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}], CompressedData["
1:eJxTTMoPSmVmYGAQBWJGIGZiQADmX9wv9Be8t3eoZ/zL+mW5PUT0g73J9Isx
bsU74fwU84l3XcoOw/l6i3f2PDM6BeeDtYtfgPPTDeceLRG7DOf7gAWuoZl/
0/4/GLy3lzybChS6g2beAzi/SOZ4oczxh2jmP4bzI/wTbVu/PoHz/cAOfgbn
Q/z3HM3+l3C++qbZJ/KUXsP50qeyNdYvfAPn8wBDaX/DOzgf4t33cD4Ay9lv
+g==
       "]]}, {
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0., 0.9883040935672515}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.988", "0.008"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9883040935672515, 0.008245894595446217]]}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", "0"}, "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.0215554884854582`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[0.9883040935672515, 0.008245894595446217]}], 
          Row[{"RejectionRate = ", 0}], 
          Row[{IndeterminateThreshold, " = ", 0.0215554884854582}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.04678362573099415, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.047", "0.016"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.04678362573099415, 0.016196389956235614`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9880538508844026`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.04678362573099415, 0.016196389956235614`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9880538508844026}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.09941520467836257, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.099", "0.023"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.09941520467836257, 0.02294902557935509]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.994099531040634`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.09941520467836257, 0.02294902557935509]}], 
          Row[{IndeterminateThreshold, " = ", 0.994099531040634}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.15204678362573099`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.152", "0.028"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.15204678362573099`, 0.02753912288906152]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9985227694709047`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.15204678362573099`, 0.02753912288906152]}], 
          Row[{IndeterminateThreshold, " = ", 0.9985227694709047}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.2046783625730994, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.205", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.2046783625730994, 0.030944459778533266`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9992440906613836`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.2046783625730994, 0.030944459778533266`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9992440906613836}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.25146198830409355`, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.251", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.25146198830409355`, 0.0332750442384685]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9995717909317401`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.25146198830409355`, 0.0332750442384685]}], 
          Row[{IndeterminateThreshold, " = ", 0.9995717909317401}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.2982456140350877, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.298", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.2982456140350877, 0.03508771929824568]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9997418673749584`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.2982456140350877, 0.03508771929824568]}], 
          Row[{IndeterminateThreshold, " = ", 0.9997418673749584}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.3508771929824561, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.35", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.3508771929824561, 0.036602988340491714`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9998335350142143`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.3508771929824561, 0.036602988340491714`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9998335350142143}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.39766081871345027`, 0.9999999999999999}}]},
        TagBox[
         GridBox[{{
            
            TemplateBox[{"\"Accuracy = \"", "0.9999999999999999`"}, 
             "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.40", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.39766081871345027`, 0.03753638955761696]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999013890261497`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 0.9999999999999999}], 
          Row[{"RejectionRate = ", 
            Around[0.39766081871345027`, 0.03753638955761696]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999013890261497}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.4502923976608187, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.45", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.4502923976608187, 0.038158273659132456`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999211269066288`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.4502923976608187, 0.038158273659132456`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999211269066288}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5029239766081871, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.50", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5029239766081871, 0.03834759370936853]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999434345618526`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5029239766081871, 0.03834759370936853]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999434345618526}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5555555555555556, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.56", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5555555555555556, 0.03811079669833543]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.999954315966852`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5555555555555556, 0.03811079669833543]}], 
          Row[{IndeterminateThreshold, " = ", 0.999954315966852}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.5964912280701754, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.60", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.5964912280701754, 0.03762738699917069]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999636655022122`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.5964912280701754, 0.03762738699917069]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999636655022122}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.6549707602339181, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.65", "0.04"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.6549707602339181, 0.0364598137738882]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999743630598783`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.6549707602339181, 0.0364598137738882]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999743630598783}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.695906432748538, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.696", "0.035"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.695906432748538, 0.035282112582452445`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999804031985158`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.695906432748538, 0.035282112582452445`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999804031985158}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.7485380116959064, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.749", "0.033"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.7485380116959064, 0.03327504423846861]]}, 
             "RowDefault"]}, {
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999832610362052`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.7485380116959064, 0.03327504423846861]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999832610362052}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.7953216374269005, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.795", "0.031"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.7953216374269005, 0.0309444597785334]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999877092398041`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.7953216374269005, 0.0309444597785334]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999877092398041}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.847953216374269, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.848", "0.028"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.847953216374269, 0.027539122889061674`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999920285369499`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.847953216374269, 0.027539122889061674`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999920285369499}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.8947368421052632, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.895", "0.024"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.8947368421052632, 0.023537557657892717`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999946946260091`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.8947368421052632, 0.023537557657892717`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999946946260091}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9532163742690059, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", "1.`"}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.953", "0.016"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9532163742690059, 0.016196389956235815`]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.9999977380328188`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 1.}], 
          Row[{"RejectionRate = ", 
            Around[0.9532163742690059, 0.016196389956235815`]}], 
          Row[{IndeterminateThreshold, " = ", 0.9999977380328188}]}], 
        "Tooltip"]& ], 
      TagBox[
       TooltipBox[
        {Opacity[0.], PointBox[{{0.9941520467836257, 1.}}]},
        TagBox[
         GridBox[{{
            TemplateBox[{"\"Accuracy = \"", 
              InterpretationBox[
               
               TemplateBox[{"1.`", "\[Infinity]"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[1., 
                DirectedInfinity[1]]]}, "RowDefault"]}, {
            TemplateBox[{"\"RejectionRate = \"", 
              InterpretationBox[
               
               TemplateBox[{"0.994", "0.006"}, "Around", SyntaxForm -> 
                PlusMinus], 
               Around[0.9941520467836257, 0.00584795321637449]]}, 
             "RowDefault"]}, {
            
            TemplateBox[{
             "IndeterminateThreshold", "\" = \"", "0.999998702931673`"}, 
             "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          DefaultBaseStyle -> "Column", 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
       Annotation[#, 
        Column[{
          Row[{"Accuracy = ", 
            Around[1., 
             DirectedInfinity[1]]}], 
          Row[{"RejectionRate = ", 
            Around[0.9941520467836257, 0.00584795321637449]}], 
          Row[{IndeterminateThreshold, " = ", 0.999998702931673}]}], 
        "Tooltip"]& ]}}, {{}, {}}}},
  AspectRatio->Full,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.9789503211369079},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"Accuracy\"", TraditionalForm], None}, {
     FormBox["\"RejectionRate\"", TraditionalForm], None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{Automatic, Automatic},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.5], 
    AbsoluteThickness[1], 
    AbsoluteDashing[{1, 2}]],
  ImageSize->{377, 269},
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1.0000000000000002`}, {0.9789503211369079, 1.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8600731773132277`*^9, 3.8601551600034714`*^9, 
  3.8602191561549044`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"283b9309-221c-4d1e-8a43-53c401967a52"]
}, Open  ]],

Cell[TextData[StyleBox["Conclusion :", "Section"]], "Text",
 CellChangeTimes->{{3.8602191635161514`*^9, 3.860219172808279*^9}, {
  3.8602192095838194`*^9, 
  3.8602192116557245`*^9}},ExpressionUUID->"01465b36-ba3d-46e2-a461-\
0836be839e87"],

Cell["\<\
SVM and Neural Networks work well for the data giving us an accuracy of 98.5 \
% on an average. However, when the code of neural networks was run for \
multiple times on different subsets of data obtained by shuffling, it was \
observed that sometimes neural networks was overfitting for the data. \
Therefore, given any type of data regardless of shuffling SVM seems to be \
performing well than Neural Networks without overfitting the data. The \
algorithm is able to classify observations belonging to Gentoo correctly but \
there seems to be a slight confusion in classifying species belonging to \
Adelie and Chinstrap.\
\>", "Text",
 CellChangeTimes->{{3.8602192146038504`*^9, 3.860219216809252*^9}, {
   3.8602199382475443`*^9, 3.8602199627317886`*^9}, {3.860220003030501*^9, 
   3.860220135505184*^9}, {3.860220185029065*^9, 3.8602201946007566`*^9}, {
   3.8602203341301584`*^9, 3.8602204238476624`*^9}, 3.860220622715218*^9, {
   3.8602216651092424`*^9, 3.860221733745751*^9}, {3.8602219035773654`*^9, 
   3.860221964900679*^9}},ExpressionUUID->"2b3e9357-8855-4ec5-a318-\
5a765a899eb6"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{950.25, 522.75},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>0.9 Inherited,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"235ffe87-9b89-4607-8da2-49c58195a92d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 236, 4, 88, "Title",ExpressionUUID->"6b051f5c-fe2a-4b73-84cc-fa6803a63ac7"],
Cell[CellGroupData[{
Cell[841, 30, 257, 4, 59, "Section",ExpressionUUID->"df7820e1-9cda-4961-943d-147b1d810051"],
Cell[1101, 36, 1050, 16, 93, "Text",ExpressionUUID->"a7dda368-5459-492e-8bb1-94e798fa0af2"],
Cell[CellGroupData[{
Cell[2176, 56, 193, 3, 48, "Subsection",ExpressionUUID->"39f3cc48-90a9-4458-bc16-09e0e3ca9364"],
Cell[2372, 61, 1755, 37, 217, "Text",ExpressionUUID->"0132503d-1132-4092-ad1d-e618b04e951a"],
Cell[CellGroupData[{
Cell[4152, 102, 219, 3, 40, "Subsubsection",ExpressionUUID->"a0eb8d57-a983-418a-bbe3-357cfc38d91d"],
Cell[CellGroupData[{
Cell[4396, 109, 3730, 82, 91, "Input",ExpressionUUID->"041cfe90-4273-4f21-b987-0134afd016bf"],
Cell[8129, 193, 74305, 1226, 152, "Output",ExpressionUUID->"f84dc23b-34f8-4bd5-a227-98f090251423"],
Cell[82437, 1421, 45214, 750, 71, "Output",ExpressionUUID->"5f50dc09-1ea5-475f-a449-13aefeaef545"],
Cell[127654, 2173, 45633, 756, 152, "Output",ExpressionUUID->"25dfdf1b-575b-41d9-a7b5-d0feac1cfcf5"]
}, Open  ]],
Cell[173302, 2932, 861, 14, 72, "Text",ExpressionUUID->"d4912be5-ff23-4105-83a8-5667b37fc77f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[174224, 2953, 227, 4, 59, "Section",ExpressionUUID->"d39a6bc0-9eb8-40c3-a0bf-f2b59588bd26"],
Cell[174454, 2959, 204, 4, 31, "Text",ExpressionUUID->"540c6959-3e05-4736-be4a-d32335542b35"],
Cell[174661, 2965, 881, 14, 93, "Text",ExpressionUUID->"c4471314-7961-4292-96b0-28d602dc3564"],
Cell[175545, 2981, 1340, 24, 26, "Input",ExpressionUUID->"2a158522-ff5a-4b3a-ad9f-263cc8a75eaa"],
Cell[176888, 3007, 223, 5, 31, "Text",ExpressionUUID->"05fa7c00-cfbb-4b71-a1e5-3b452ca0cddc"],
Cell[CellGroupData[{
Cell[177136, 3016, 230, 4, 25, "Input",ExpressionUUID->"1cda4366-9ff6-4d9a-ae1a-9e59aef0c30f"],
Cell[177369, 3022, 53424, 1006, 212, "Output",ExpressionUUID->"a4289c15-659b-4044-a0f0-8d058e8f7ccc"]
}, Open  ]],
Cell[230808, 4031, 265, 6, 31, "Text",ExpressionUUID->"12f0b080-115f-43b3-83e5-9452f1711828"],
Cell[CellGroupData[{
Cell[231098, 4041, 212, 3, 25, "Input",ExpressionUUID->"ef2446c3-3395-4500-a0c3-a1e83b731708"],
Cell[231313, 4046, 382, 7, 28, "Output",ExpressionUUID->"85238ec6-6bfb-4c02-a124-176605195e13"]
}, Open  ]],
Cell[231710, 4056, 193, 3, 31, "Text",ExpressionUUID->"24efdd45-751c-409b-a2b8-2545c94ca863"],
Cell[CellGroupData[{
Cell[231928, 4063, 919, 18, 26, "Input",ExpressionUUID->"c8440ce7-8d74-4dab-9ebd-801f96edf748"],
Cell[232850, 4083, 23327, 416, 214, "Output",ExpressionUUID->"58da2805-aca8-4d19-aba8-3621cd1091e6"]
}, Open  ]],
Cell[256192, 4502, 327, 7, 52, "Text",ExpressionUUID->"6787729a-6c79-49fd-b273-59efb7dcb16b"],
Cell[256522, 4511, 574, 10, 72, "Text",ExpressionUUID->"551276c1-8789-4352-a805-a18c60ddafd3"],
Cell[CellGroupData[{
Cell[257121, 4525, 376, 8, 26, "Input",ExpressionUUID->"ec92bb44-22cc-43b0-834c-fba8b0cb7d3c"],
Cell[257500, 4535, 1335, 32, 47, "Output",ExpressionUUID->"506e96b8-d1cb-49a5-a76c-1332c357cd90"]
}, Open  ]],
Cell[258850, 4570, 329, 7, 31, "Text",ExpressionUUID->"06f9fedb-0552-4aa6-8acc-09f9df5f622b"],
Cell[259182, 4579, 1132, 21, 25, "Input",ExpressionUUID->"462d931b-a88b-4256-9007-0b8061ea6e55"],
Cell[260317, 4602, 335, 7, 31, "Text",ExpressionUUID->"517e3801-28ad-47fb-954e-f35acafaa7b3"],
Cell[CellGroupData[{
Cell[260677, 4613, 329, 6, 25, "Input",ExpressionUUID->"316ab361-9c25-41d0-9754-980559bb6b6c"],
Cell[261009, 4621, 64009, 1227, 266, "Output",ExpressionUUID->"03bfaa9d-fe7f-4684-81e4-f06f615c8651"]
}, Open  ]],
Cell[325033, 5851, 276, 6, 31, "Text",ExpressionUUID->"a04214de-b1b2-4ba6-8514-d2678c171607"],
Cell[CellGroupData[{
Cell[325334, 5861, 699, 16, 43, "Input",ExpressionUUID->"91d1a2e4-13f0-4ad6-88b8-7a48b92fcc54"],
Cell[326036, 5879, 63925, 1224, 266, "Output",ExpressionUUID->"385ba0bb-8e96-4507-bdee-de5f70fc4b23"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[390010, 7109, 161, 3, 59, "Section",ExpressionUUID->"8e6431b2-ca14-4580-97bf-49ce679b7e40"],
Cell[390174, 7114, 294, 6, 31, "Text",ExpressionUUID->"8b5fb8f9-9d8b-4858-a480-75b92abffbc7"],
Cell[CellGroupData[{
Cell[390493, 7124, 184, 3, 40, "Subsubsection",ExpressionUUID->"25423d2d-c207-436e-99e6-70228adb7035"],
Cell[390680, 7129, 285, 6, 31, "Text",ExpressionUUID->"79e631e3-1b62-42f9-9098-4a4356ef2d04"],
Cell[CellGroupData[{
Cell[390990, 7139, 691, 12, 26, "Input",ExpressionUUID->"a8eef42e-c673-4a6c-bebd-c0589cd6325d"],
Cell[391684, 7153, 10438, 304, 230, "Output",ExpressionUUID->"d16a50a2-ef9c-4d82-9b36-c807cfc98807"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402159, 7462, 437, 9, 26, "Input",ExpressionUUID->"307fb2cd-9f26-4bd2-8604-77eaf4142e3a"],
Cell[402599, 7473, 7440, 217, 230, "Output",ExpressionUUID->"100ad12f-e589-4afe-a585-db7b3e57c148"]
}, Open  ]],
Cell[CellGroupData[{
Cell[410076, 7695, 441, 9, 26, "Input",ExpressionUUID->"46b3b117-4a0f-4c0a-bf4f-9bedcb387ae7"],
Cell[410520, 7706, 10273, 301, 230, "Output",ExpressionUUID->"1276e265-791e-4483-b84c-7eef00024293"]
}, Open  ]],
Cell[CellGroupData[{
Cell[420830, 8012, 427, 9, 26, "Input",ExpressionUUID->"2c1396a3-f676-4b09-b9a6-849d16474856"],
Cell[421260, 8023, 6773, 196, 230, "Output",ExpressionUUID->"69ca5a6a-e0a0-4e6f-a679-32f809ba0ca9"]
}, Open  ]],
Cell[428048, 8222, 282, 6, 31, "Text",ExpressionUUID->"5abc48a6-66cc-4e4a-ac11-ab72fb220389"],
Cell[428333, 8230, 375, 8, 52, "Text",ExpressionUUID->"74f72194-cbab-42e3-aaa0-d04a1308af7f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[428745, 8243, 177, 3, 48, "Subsection",ExpressionUUID->"1b10c966-669a-49fe-adbb-2bc6171e0f78"],
Cell[428925, 8248, 409, 8, 52, "Text",ExpressionUUID->"194d6920-de5e-4a1e-8ea7-5a6ac46c9a80"],
Cell[429337, 8258, 761, 17, 60, "Input",ExpressionUUID->"89f63307-a306-43e5-8a5e-272d4dda35ea"],
Cell[CellGroupData[{
Cell[430123, 8279, 401, 7, 26, "Input",ExpressionUUID->"9d77c732-6686-4fc2-841f-1bc79cebe340"],
Cell[430527, 8288, 5504, 142, 217, "Output",ExpressionUUID->"36bd9566-2c60-4aa0-812a-ec56d8728890"]
}, Open  ]],
Cell[436046, 8433, 314, 7, 52, "Text",ExpressionUUID->"dec40b8b-1855-4de5-9b48-39ca1a610a5c"],
Cell[436363, 8442, 344, 7, 52, "Text",ExpressionUUID->"9a3ada0d-3060-4244-b3f6-025f759ccd42"],
Cell[CellGroupData[{
Cell[436732, 8453, 1017, 23, 78, "Input",ExpressionUUID->"5b2bfbdf-3e61-4a21-9d80-0a4e9c56cda6"],
Cell[437752, 8478, 9248, 211, 339, "Output",ExpressionUUID->"67cf53c3-991a-498d-b59b-977cc34c8fc6"]
}, Open  ]],
Cell[447015, 8692, 307, 7, 31, "Text",ExpressionUUID->"15f1ab48-4761-4bfd-89fd-ee5536e2e9db"],
Cell[447325, 8701, 682, 12, 93, "Text",ExpressionUUID->"e2b753e5-44a5-4b1a-b5f8-17c47bc42e4a"],
Cell[CellGroupData[{
Cell[448032, 8717, 1516, 33, 60, "Input",ExpressionUUID->"b2282cd1-9712-407e-993c-3a652cdbad85"],
Cell[449551, 8752, 43926, 859, 248, "Output",ExpressionUUID->"999df66c-1a49-4bce-88c1-0cd4661e2579"]
}, Open  ]],
Cell[493492, 9614, 604, 11, 72, "Text",ExpressionUUID->"56b1b526-7741-4f51-aca1-2b9eb54ae5f9"],
Cell[CellGroupData[{
Cell[494121, 9629, 1109, 28, 60, "Input",ExpressionUUID->"f391c8c5-edd8-4d7a-a45e-0d19a010511a"],
Cell[495233, 9659, 40258, 775, 248, "Output",ExpressionUUID->"ccd54673-71a2-433c-884c-fad2828ce2e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[535528, 10439, 171, 3, 40, "Subsubsection",ExpressionUUID->"e0ecd1fc-67c9-4570-9b65-d172469ccb93"],
Cell[535702, 10444, 222, 5, 31, "Text",ExpressionUUID->"87b82f34-c2a0-43b0-8742-06129e1443fc"],
Cell[CellGroupData[{
Cell[535949, 10453, 1658, 37, 77, "Input",ExpressionUUID->"a3da6bf1-b56e-4d6d-9ed2-128726eb8dc6"],
Cell[537610, 10492, 20527, 484, 415, "Output",ExpressionUUID->"7f82922e-e46d-4cbf-a03e-dcae0c479d70"]
}, Open  ]],
Cell[558152, 10979, 20532, 485, 412, "Input",ExpressionUUID->"73b98eec-1a61-476b-9829-fc33c620a2c4"],
Cell[578687, 11466, 241, 6, 31, "Text",ExpressionUUID->"68ba9342-f76e-4b18-a68f-5fed2d004a60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[578965, 11477, 167, 3, 40, "Subsubsection",ExpressionUUID->"5c509b77-4c68-4939-b83b-ce938326948f"],
Cell[579135, 11482, 398, 7, 52, "Text",ExpressionUUID->"5624c3a8-f943-420d-a5da-c69832feac9a"],
Cell[579536, 11491, 636, 11, 72, "Text",ExpressionUUID->"8a46a677-47c7-45cd-87a6-f271ddbe54f2"],
Cell[CellGroupData[{
Cell[580197, 11506, 610, 15, 43, "Input",ExpressionUUID->"45fa0a52-f2d1-4bac-81d0-115a37170cad"],
Cell[580810, 11523, 1227, 31, 86, "Output",ExpressionUUID->"a63952bf-7783-422a-aef1-c0dbe3e2662e"]
}, Open  ]],
Cell[582052, 11557, 776, 14, 114, "Text",ExpressionUUID->"0c925738-e6db-4f29-9e66-ede0d4451007"],
Cell[CellGroupData[{
Cell[582853, 11575, 1060, 22, 43, "Input",ExpressionUUID->"d9670f64-2db1-4c23-bf63-1f376fc727b0"],
Cell[583916, 11599, 12050, 266, 299, "Output",ExpressionUUID->"13422719-4879-4e9e-ae8a-354e521a38d3"]
}, Open  ]],
Cell[595981, 11868, 607, 10, 72, "Text",ExpressionUUID->"8a7725f1-4e06-47b5-9bb2-d83d0d9a72bc"],
Cell[CellGroupData[{
Cell[596613, 11882, 821, 18, 43, "Input",ExpressionUUID->"2d20969c-226f-4cbc-b4ca-085f08f64a9e"],
Cell[597437, 11902, 12374, 272, 311, "Output",ExpressionUUID->"3e56ce55-df31-41ae-9586-1718ce7aed83"]
}, Open  ]],
Cell[609826, 12177, 462, 9, 52, "Text",ExpressionUUID->"52c3d4e4-0405-45ce-927c-fa295332d034"],
Cell[CellGroupData[{
Cell[610313, 12190, 872, 18, 43, "Input",ExpressionUUID->"d5e38a3c-ace2-4fb5-b385-dbd778ce22dc"],
Cell[611188, 12210, 11877, 264, 314, "Output",ExpressionUUID->"dc938348-e6b8-4970-a2e6-55a0cc4a8caa"]
}, Open  ]],
Cell[623080, 12477, 377, 8, 31, "Text",ExpressionUUID->"5982701a-4580-4c8e-9aca-2b84772a3704"],
Cell[623460, 12487, 283, 6, 31, "Text",ExpressionUUID->"cd5ced53-ea28-46dc-ad33-7abd418ec623"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[623804, 12500, 221, 4, 59, "Section",ExpressionUUID->"80efdaa6-e5db-42f4-981f-f27ea6f9726d"],
Cell[624028, 12506, 510, 9, 72, "Text",ExpressionUUID->"dbcad691-32c5-4fc3-b7c8-f615dff2d39a"],
Cell[624541, 12517, 385, 8, 52, "Text",ExpressionUUID->"814bef02-a12c-40d8-ad76-82552393b7a4"],
Cell[CellGroupData[{
Cell[624951, 12529, 685, 15, 43, "Input",ExpressionUUID->"2191fba8-c2de-4823-9be7-d3f9001f5a5c"],
Cell[625639, 12546, 52657, 993, 188, "Output",ExpressionUUID->"0e6f3a42-29e3-4549-8154-6efe16fa683c"]
}, Open  ]],
Cell[678311, 13542, 463, 9, 52, "Text",ExpressionUUID->"92e2b45a-f6b4-4850-a5a3-621971615dff"],
Cell[CellGroupData[{
Cell[678799, 13555, 555, 14, 26, "Input",ExpressionUUID->"f557d0a8-407f-4afd-b437-619cebf10bb6"],
Cell[679357, 13571, 519, 9, 28, "Output",ExpressionUUID->"ab59307d-7eed-4a18-bff6-4f1ad9da18bd"]
}, Open  ]],
Cell[679891, 13583, 376, 7, 31, "Text",ExpressionUUID->"6d75bdc1-2cfd-4e37-87d2-ee4a6a5270c2"],
Cell[680270, 13592, 1861, 51, 60, "Input",ExpressionUUID->"87c03745-b443-4808-ae75-c94150c6acc0"],
Cell[CellGroupData[{
Cell[682156, 13647, 175, 3, 48, "Subsection",ExpressionUUID->"e9cb1620-472a-4727-a083-09fb71b14902"],
Cell[682334, 13652, 286, 6, 31, "Text",ExpressionUUID->"553874bd-97fc-4762-aec4-53bbc64af997"],
Cell[682623, 13660, 300, 5, 31, "Text",ExpressionUUID->"020d666e-2277-4226-a81a-653545c08dcd"],
Cell[CellGroupData[{
Cell[682948, 13669, 526, 11, 26, "Input",ExpressionUUID->"5d3ab892-20d1-445d-b9a5-87b52fe40582"],
Cell[683477, 13682, 42514, 822, 58, "Output",ExpressionUUID->"96c56386-895d-43d5-b215-f5a284e8cd38"]
}, Open  ]],
Cell[726006, 14507, 215, 5, 31, "Text",ExpressionUUID->"a7d87299-c3ba-411e-a85d-ee4db348bf1e"],
Cell[CellGroupData[{
Cell[726246, 14516, 257, 4, 26, "Input",ExpressionUUID->"9792bb2d-1580-4b4e-bf7a-208a3bde7ad8"],
Cell[726506, 14522, 562, 11, 35, "Output",ExpressionUUID->"98f08284-1711-4077-816c-0b67c8c6a5fc"]
}, Open  ]],
Cell[727083, 14536, 604, 10, 52, "Text",ExpressionUUID->"db8b4744-1666-46d9-9d0d-c44a46903c3d"],
Cell[CellGroupData[{
Cell[727712, 14550, 261, 4, 25, "Input",ExpressionUUID->"53984bdb-3a34-49ed-98ca-a9652c902699"],
Cell[727976, 14556, 74380, 1489, 534, "Output",ExpressionUUID->"d8a2756f-0bfc-433e-8551-bc8a5c80508f"]
}, Open  ]],
Cell[802371, 16048, 601, 11, 52, "Text",ExpressionUUID->"4087f377-3620-48df-8d20-9f72b45665e1"],
Cell[CellGroupData[{
Cell[802997, 16063, 288, 5, 26, "Input",ExpressionUUID->"8a4bd43f-6d34-4392-a0ce-572eca7800d6"],
Cell[803288, 16070, 83536, 1653, 442, "Output",ExpressionUUID->"346931ca-99f2-4e36-9357-5c3256ee046e"]
}, Open  ]],
Cell[886839, 17726, 373, 7, 52, "Text",ExpressionUUID->"bf80700a-ee99-4484-9bb8-da8aef42494f"],
Cell[CellGroupData[{
Cell[887237, 17737, 328, 6, 25, "Input",ExpressionUUID->"4a24c5b5-44da-448b-aaa0-b870b817c3b1"],
Cell[887568, 17745, 1012, 27, 41, "Output",ExpressionUUID->"2da9bf0d-8de0-410d-ad7b-15c70a807154"]
}, Open  ]],
Cell[888595, 17775, 383, 8, 52, "Text",ExpressionUUID->"d0a93d7d-93e8-4226-aea9-08d0045a4795"],
Cell[CellGroupData[{
Cell[889003, 17787, 480, 10, 26, "Input",ExpressionUUID->"de764d4e-6c6e-4a87-a0ef-cdebf6bc2220"],
Cell[889486, 17799, 75725, 1611, 257, "Output",ExpressionUUID->"550760e3-0b3b-4f10-b83a-64063760e636"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[965260, 19416, 164, 3, 48, "Subsection",ExpressionUUID->"fb2e1392-7b6d-4356-8db2-45fbcacb510c"],
Cell[965427, 19421, 337, 7, 52, "Text",ExpressionUUID->"eb950121-60e5-4214-be68-272fc5ef3dc2"],
Cell[965767, 19430, 253, 5, 31, "Text",ExpressionUUID->"1341500d-43cf-42de-9d02-6088ad47f436"],
Cell[CellGroupData[{
Cell[966045, 19439, 324, 6, 26, "Input",ExpressionUUID->"b1c5ad09-e6d9-4c23-8b5b-804571724aa5"],
Cell[966372, 19447, 69771, 1246, 58, "Output",ExpressionUUID->"9848bfd3-ab52-4d3c-8428-de095b21ac84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1036180, 20698, 257, 4, 26, "Input",ExpressionUUID->"f879ec11-8332-47a3-9420-0ce6cc2260d3"],
Cell[1036440, 20704, 517, 11, 35, "Output",ExpressionUUID->"d98a301d-e1cc-412a-83bf-e5d106953aa6"]
}, Open  ]],
Cell[1036972, 20718, 244, 4, 31, "Text",ExpressionUUID->"3bfdda84-d758-4c55-b3f4-51117102a578"],
Cell[CellGroupData[{
Cell[1037241, 20726, 263, 4, 25, "Input",ExpressionUUID->"3ce864c1-9911-4223-9d10-d7a48e227e80"],
Cell[1037507, 20732, 103411, 1974, 534, "Output",ExpressionUUID->"74aaf827-b2d2-41aa-a2b9-60a736e3c9f4"]
}, Open  ]],
Cell[1140933, 22709, 630, 11, 72, "Text",ExpressionUUID->"3fb3b65b-f737-4723-870a-e3bc2b2a23ac"],
Cell[CellGroupData[{
Cell[1141588, 22724, 288, 5, 26, "Input",ExpressionUUID->"0ac19f16-28b4-4982-8c61-7f0b11890ac0"],
Cell[1141879, 22731, 110474, 2143, 442, "Output",ExpressionUUID->"1cd034c3-5d90-48fc-b188-2dc42a1cc96d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1252390, 24879, 281, 5, 25, "Input",ExpressionUUID->"4bb0d6c7-1e26-40fd-bd71-cee1667baedb"],
Cell[1252674, 24886, 939, 26, 41, "Output",ExpressionUUID->"d3e0363a-a806-41fc-8e1d-f33931b689d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1253650, 24917, 430, 9, 26, "Input",ExpressionUUID->"a248ebcf-ffe6-47d8-981e-a760c9868c61"],
Cell[1254083, 24928, 72100, 1545, 257, "Output",ExpressionUUID->"23b906d5-6915-4634-a22f-85a3ef0adec3"]
}, Open  ]],
Cell[1326198, 26476, 312, 7, 31, "Text",ExpressionUUID->"075689ff-6000-44b7-a358-99438ba1514c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1326547, 26488, 170, 3, 48, "Subsection",ExpressionUUID->"4febb5bb-9106-40f6-a57f-c4b387c63d03"],
Cell[1326720, 26493, 323, 7, 52, "Text",ExpressionUUID->"f9c00a8e-3e99-4755-962e-c32398c8b655"],
Cell[1327046, 26502, 204, 4, 31, "Text",ExpressionUUID->"96c45a1f-476a-47af-9c59-7e5067a1a75d"],
Cell[CellGroupData[{
Cell[1327275, 26510, 327, 7, 26, "Input",ExpressionUUID->"521609e6-265d-4000-b3b5-1534d31b750a"],
Cell[1327605, 26519, 46779, 877, 58, "Output",ExpressionUUID->"74b8e0f9-16c6-465a-bbb1-b1fd7a37e757"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1374421, 27401, 261, 4, 26, "Input",ExpressionUUID->"fe8303b4-1815-40b0-b346-618b8951d4f2"],
Cell[1374685, 27407, 485, 9, 35, "Output",ExpressionUUID->"dd207130-6e9c-4438-8c68-635f22ad8592"]
}, Open  ]],
Cell[1375185, 27419, 196, 3, 31, "Text",ExpressionUUID->"210e0305-7156-4ff0-b900-dca4aa0827f5"],
Cell[CellGroupData[{
Cell[1375406, 27426, 222, 3, 25, "Input",ExpressionUUID->"ca17617f-de5c-4cc2-a75a-56d267988e94"],
Cell[1375631, 27431, 79169, 1551, 534, "Output",ExpressionUUID->"e5fa962d-7f52-455e-aafb-4b4f9cb257fd"]
}, Open  ]],
Cell[1454815, 28985, 474, 9, 52, "Text",ExpressionUUID->"f31af790-8554-400a-9c4e-63e639e49b6f"],
Cell[CellGroupData[{
Cell[1455314, 28998, 285, 5, 26, "Input",ExpressionUUID->"8b6f8940-557d-41f3-be4e-e643cb429862"],
Cell[1455602, 29005, 82111, 1605, 442, "Output",ExpressionUUID->"6885842f-957a-475a-a0c6-76fb7641e80c"]
}, Open  ]],
Cell[1537728, 30613, 284, 6, 31, "Text",ExpressionUUID->"5387a51c-da20-4e1f-b0e2-38a970b12b0d"],
Cell[CellGroupData[{
Cell[1538037, 30623, 277, 5, 25, "Input",ExpressionUUID->"93b224cf-6819-469d-951d-0cc8770b88f5"],
Cell[1538317, 30630, 921, 26, 41, "Output",ExpressionUUID->"a62587a0-73b5-4fb8-b1ba-e765ed52752d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1539275, 30661, 426, 9, 26, "Input",ExpressionUUID->"bb60c9d6-9f7c-43ba-af7f-d997fbc0a30e"],
Cell[1539704, 30672, 64781, 1427, 257, "Output",ExpressionUUID->"6d8a4a4a-6c0a-4d94-8569-17c57b43ee04"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1604534, 32105, 166, 3, 48, "Subsection",ExpressionUUID->"d2de1ad6-0f82-4bc9-9717-c28e6973c5ab"],
Cell[1604703, 32110, 377, 7, 52, "Text",ExpressionUUID->"9fdb4e51-4966-4145-a8ae-a724e6454720"],
Cell[CellGroupData[{
Cell[1605105, 32121, 327, 7, 26, "Input",ExpressionUUID->"ce74ae81-26a9-4250-90eb-8f30cf353bba"],
Cell[1605435, 32130, 172579, 3003, 58, "Output",ExpressionUUID->"b3d7cd32-04f2-425d-b48d-079eb03d4123"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1778051, 35138, 261, 4, 26, "Input",ExpressionUUID->"5849627a-6fd6-4129-87c0-4bdf4cfa8477"],
Cell[1778315, 35144, 670, 12, 75, "Output",ExpressionUUID->"bc672652-43a3-479d-97be-2853a90aa7b5"]
}, Open  ]],
Cell[1779000, 35159, 178, 3, 31, "Text",ExpressionUUID->"1945dfb2-bb9d-4ebc-900c-75d073f3ae27"],
Cell[CellGroupData[{
Cell[1779203, 35166, 226, 3, 25, "Input",ExpressionUUID->"8c31a105-f0c8-44e3-a89c-946441eb72e3"],
Cell[1779432, 35171, 218339, 3951, 532, "Output",ExpressionUUID->"7bbb882b-5629-4bed-8efc-04ac97df0200"]
}, Open  ]],
Cell[1997786, 39125, 479, 9, 52, "Text",ExpressionUUID->"59f03028-a6cb-4fa6-9560-2976832f6371"],
Cell[CellGroupData[{
Cell[1998290, 39138, 290, 5, 26, "Input",ExpressionUUID->"a48af896-a788-4d22-925e-c02ad154d15c"],
Cell[1998583, 39145, 215265, 3836, 442, "Output",ExpressionUUID->"00a9423c-52ef-4aab-9aa8-4264a8ebe8b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2213885, 42986, 283, 5, 25, "Input",ExpressionUUID->"a1948ee7-5071-4638-87de-4a6b019c3ec9"],
Cell[2214171, 42993, 923, 26, 41, "Output",ExpressionUUID->"a056abb2-3d27-4695-b8ff-5e18431a436f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2215131, 43024, 432, 9, 26, "Input",ExpressionUUID->"d77cc669-0184-4f07-829f-f482ecddce69"],
Cell[2215566, 43035, 69123, 1510, 257, "Output",ExpressionUUID->"02858d98-77c9-42d7-9ac4-4c968f7d22e3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2284738, 44551, 176, 3, 48, "Subsection",ExpressionUUID->"ab42dd64-5465-4963-88e5-1fffc5b5c4f9"],
Cell[2284917, 44556, 394, 8, 52, "Text",ExpressionUUID->"eea57385-f2c4-48a6-aa8b-570663ca6f14"],
Cell[CellGroupData[{
Cell[2285336, 44568, 333, 7, 26, "Input",ExpressionUUID->"3545a0fd-3ff0-4c4b-bca1-2bf903a54b91"],
Cell[2285672, 44577, 66070, 1194, 58, "Output",ExpressionUUID->"3c9cd8be-5cde-4263-a110-75b238d4acea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2351779, 45776, 262, 4, 26, "Input",ExpressionUUID->"3fa0039f-5f29-41c9-9235-6b434d20a72c"],
Cell[2352044, 45782, 663, 13, 75, "Output",ExpressionUUID->"26767bd6-e41d-4e1e-ad5c-1c8d1b13d8bf"]
}, Open  ]],
Cell[2352722, 45798, 189, 3, 31, "Text",ExpressionUUID->"b0515d67-2fc8-4f50-9b95-9931a944f587"],
Cell[CellGroupData[{
Cell[2352936, 45805, 266, 4, 25, "Input",ExpressionUUID->"3b58669b-7350-40bc-b61c-7c78de6e1a48"],
Cell[2353205, 45811, 145123, 2769, 534, "Output",ExpressionUUID->"fe981f7d-d08c-4c7e-a6bf-de1915c06112"]
}, Open  ]],
Cell[2498343, 48583, 411, 8, 52, "Text",ExpressionUUID->"c967c3f3-16fa-4ace-8777-98afa3740eec"],
Cell[CellGroupData[{
Cell[2498779, 48595, 290, 5, 26, "Input",ExpressionUUID->"9bc6a954-c817-4fcb-b8e2-f4d6cb8dd520"],
Cell[2499072, 48602, 108063, 2026, 442, "Output",ExpressionUUID->"0e729a29-346a-4c76-9b90-daf0f37e6301"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2607172, 50633, 278, 5, 25, "Input",ExpressionUUID->"b1dfcc7f-e6e8-4eb3-8e25-c14a9e4da253"],
Cell[2607453, 50640, 923, 26, 41, "Output",ExpressionUUID->"06e80906-df70-4820-9b70-94f051c9b076"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2608413, 50671, 426, 9, 26, "Input",ExpressionUUID->"621f84ec-ffbc-41a2-bfcb-94132ccf8a19"],
Cell[2608842, 50682, 66770, 1474, 257, "Output",ExpressionUUID->"283b9309-221c-4d1e-8a43-53c401967a52"]
}, Open  ]],
Cell[2675627, 52159, 240, 4, 45, "Text",ExpressionUUID->"01465b36-ba3d-46e2-a461-0836be839e87"],
Cell[2675870, 52165, 1105, 17, 114, "Text",ExpressionUUID->"2b3e9357-8855-4ec5-a318-5a765a899eb6"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

